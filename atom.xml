<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-02-26T15:50:35.311Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP协议系列（二）</title>
    <link href="http://blog.poetries.top/2018/02/26/http-2/"/>
    <id>http://blog.poetries.top/2018/02/26/http-2/</id>
    <published>2018-02-26T15:20:43.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>图解HTTP一书</p></blockquote><h1 id="一、了解web及网络基础"><a href="#一、了解web及网络基础" class="headerlink" title="一、了解web及网络基础"></a>一、了解web及网络基础</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP1%3A了解web及网络基础.png" alt=""></p><blockquote><p>对于与<code>HTTP</code>相关的协议如<code>TCP</code>,<code>IP</code>,<code>DNS</code>,<code>ARP</code>等，它们之间协作关系如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/http_tcp_dns_arp.png" alt=""></p><h1 id="二、简单的HTTP协议"><a href="#二、简单的HTTP协议" class="headerlink" title="二、简单的HTTP协议"></a>二、简单的HTTP协议</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP2简单的HTTP协议.png" alt=""></p><h2 id="2-1-请求与响应"><a href="#2-1-请求与响应" class="headerlink" title="2.1 请求与响应"></a>2.1 请求与响应</h2><blockquote><p><code>HTTP</code>协议通过客户端(<code>request</code>)，服务器端(<code>response</code>)实现网络通信</p></blockquote><ul><li>请求报文：</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/request.png" alt=""></p><ul><li>响应报文：</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/reponses.png" alt=""></p><h2 id="2-2-HTTP非持久连接和持久连接"><a href="#2-2-HTTP非持久连接和持久连接" class="headerlink" title="2.2 HTTP非持久连接和持久连接"></a>2.2 HTTP非持久连接和持久连接</h2><blockquote><p><code>HTTP</code>既可以使用非持久连接（<code>nonpersistent connection</code>），也可以使用持久连接（<code>persistent connection</code>）。HTTP/1.0使用非持久连接，<code>HTTP/1.1</code>默认使用持久连接。</p></blockquote><ul><li>HTTP持久连接是使用同一个TCP连接来发送和接收多个<code>HTTP</code>请求/应答，而不是为每一个新的请求/应答打开新的连接的方法</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/HTTP_persistent_connection.png" alt=""></p><h2 id="2-3-HTTP管线化"><a href="#2-3-HTTP管线化" class="headerlink" title="2.3 HTTP管线化"></a>2.3 HTTP管线化</h2><ul><li>HTTP管线化将多个<code>HTTP</code>请求整批提交，而在发送过程中不需先等待服务端的回应。</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/HTTP_pipelining.png" alt=""></p><h1 id="三、HTTP报文内HTTP信息"><a href="#三、HTTP报文内HTTP信息" class="headerlink" title="三、HTTP报文内HTTP信息"></a>三、HTTP报文内HTTP信息</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP3HTTP报文内HTTP信息.png" alt=""></p><h2 id="3-1-请求报文"><a href="#3-1-请求报文" class="headerlink" title="3.1 请求报文"></a>3.1 请求报文</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/1a4e7e6a-6d7b-38f1-af8a-043140034c8f.jpg" alt=""></p><p>下面是一个实际请求：</p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/412b4451-2738-3ebc-b1f6-a0cc13b9697b.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/cdc4dbbb-f98e-31d5-8270-3c37bf1c54e5.jpg" alt=""></p><h2 id="3-2-响应报文"><a href="#3-2-响应报文" class="headerlink" title="3.2 响应报文"></a>3.2 响应报文</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/0236098f-1a98-3a4f-ba6c-4a44c6ec4ed0.jpg" alt=""></p><p>以下是一个实际的HTTP响应报文： </p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/bddb00b6-a3e1-3112-a4f4-4b3cb8687c70.jpg" alt=""></p><h1 id="四、返回结果的HTTP状态码"><a href="#四、返回结果的HTTP状态码" class="headerlink" title="四、返回结果的HTTP状态码"></a>四、返回结果的HTTP状态码</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/http1.jpg" alt=""></p><h1 id="五、与HTTP协作的Web服务器"><a href="#五、与HTTP协作的Web服务器" class="headerlink" title="五、与HTTP协作的Web服务器"></a>五、与HTTP协作的Web服务器</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP5与HTTP协作的Web服务器.png" alt=""></p><h1 id="六、HTTP首部"><a href="#六、HTTP首部" class="headerlink" title="六、HTTP首部"></a>六、HTTP首部</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP6HTTP首部.png" alt=""></p><h2 id="6-1-通用首部字段"><a href="#6-1-通用首部字段" class="headerlink" title="6.1 通用首部字段"></a>6.1 通用首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header1.png" alt=""></p><h2 id="6-2-请求首部字段"><a href="#6-2-请求首部字段" class="headerlink" title="6.2 请求首部字段"></a>6.2 请求首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header2.png" alt=""></p><h2 id="6-3-响应首部字段"><a href="#6-3-响应首部字段" class="headerlink" title="6.3 响应首部字段"></a>6.3 响应首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header3.png" alt=""></p><h2 id="6-4-实体首部字段"><a href="#6-4-实体首部字段" class="headerlink" title="6.4 实体首部字段"></a>6.4 实体首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header4.png" alt=""></p><h2 id="6-5-为-Cookie-服务的首部字段"><a href="#6-5-为-Cookie-服务的首部字段" class="headerlink" title="6.5 为 Cookie 服务的首部字段"></a>6.5 为 Cookie 服务的首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header5.png" alt=""></p><h1 id="七、确保Web安全的Https"><a href="#七、确保Web安全的Https" class="headerlink" title="七、确保Web安全的Https"></a>七、确保Web安全的Https</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP7确保Web安全的Https.png" alt=""></p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/img_0137.png" alt=""></p><h1 id="八、确认访问用户身份的认证"><a href="#八、确认访问用户身份的认证" class="headerlink" title="八、确认访问用户身份的认证"></a>八、确认访问用户身份的认证</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP8确认访问用户身份的认证.png" alt=""></p><h1 id="九、基于HTTP的功能追加协议"><a href="#九、基于HTTP的功能追加协议" class="headerlink" title="九、基于HTTP的功能追加协议"></a>九、基于HTTP的功能追加协议</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP9基于HTTP的功能追加协议.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;图解HTTP一书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、了解web及网络基础&quot;&gt;&lt;a href=&quot;#一、了解web及网络基础&quot; class=&quot;headerlink&quot; title=&quot;一、了解web及网络基础&quot;&gt;&lt;/a&gt;一、了解web
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议系列（一）</title>
    <link href="http://blog.poetries.top/2018/02/26/http-1/"/>
    <id>http://blog.poetries.top/2018/02/26/http-1/</id>
    <published>2018-02-26T15:20:43.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h1><h2 id="1-1-Web基础"><a href="#1-1-Web基础" class="headerlink" title="1.1 Web基础"></a>1.1 Web基础</h2><ul><li><code>HTTP</code>（<code>HyperText Transfer Protocol</code>，超为本传输协议）</li><li><code>WWW（Word Wide Web）</code>的三种技术：<code>HTML</code>、<code>HTTP</code>、<code>URL</code></li></ul><h2 id="1-2-URL"><a href="#1-2-URL" class="headerlink" title="1.2 URL"></a>1.2 URL</h2><blockquote><p><code>URI</code>（<code>Uniform Resource Indentifier</code>，统一资源标识符），<code>URL</code>（Uniform Resource Locator，统一资源定位符），<code>URN</code>（<code>Uniform Resource Name</code>，统一资源名称），例如 <code>urn:isbn:0-486-27557-4</code> 。<code>URI</code> 包含 <code>URL</code> 和 <code>URN</code>，目前 <code>WEB</code> 只有 <code>URL</code> 比较流行，所以见到的基本都是 <code>URL</code>。</p></blockquote><ul><li><code>URL</code>格式</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/4102b7d0-39b9-48d8-82ae-ac4addb7ebfb.jpg?raw=true" alt=""></p><h2 id="1-3-请求和响应报文"><a href="#1-3-请求和响应报文" class="headerlink" title="1.3 请求和响应报文"></a>1.3 请求和响应报文</h2><p><strong>请求报文</strong></p><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/9dbb5fc2-936b-4c6d-b3a7-9617aae45080.jpg?raw=true" alt=""></p><p><strong>响应报文</strong></p><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/c634b5ed-a14b-4302-b40e-3ee387dd3c8a.jpg?raw=true" alt=""></p><h1 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h1><blockquote><p>客户端发送的请求报文第一行为请求行，包含了方法字段。</p></blockquote><h2 id="2-1-GET：获取资源"><a href="#2-1-GET：获取资源" class="headerlink" title="2.1 GET：获取资源"></a>2.1 GET：获取资源</h2><h2 id="2-2-POST：传输实体主体"><a href="#2-2-POST：传输实体主体" class="headerlink" title="2.2 POST：传输实体主体"></a>2.2 POST：传输实体主体</h2><ul><li><code>POST</code> 主要目的不是获取资源，而是传输实体主体数据。</li><li><code>GET</code> 和 <code>POST</code> 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 <code>URL</code>中，而<code>POST</code> 的参数存储在实体主体部分。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test/demo_form.asp?name1=value1&amp;name2=value2 HTTP/1.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /test/demo_form.asp HTTP/1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><blockquote><p><code>GET</code> 的传参方式相比于 <code>POST</code>安全性较差，因为 <code>GET</code> 传的参数在 <code>URL</code> 是可见的，可能会泄露私密信息。并且 <code>GET</code> 只支持 <code>ASCII</code> 字符，如果参数为中文则可能会出现乱码，而 <code>POST</code>支持标准字符集。</p></blockquote><h2 id="2-3-HEAD：获取报文首部"><a href="#2-3-HEAD：获取报文首部" class="headerlink" title="2.3 HEAD：获取报文首部"></a>2.3 HEAD：获取报文首部</h2><ul><li>和 <code>GET</code>方法一样，但是不返回报文实体主体部分。</li><li>主要用于确认 URL 的有效性以及资源更新的日期时间等。</li></ul><h2 id="2-4-PUT：上传文件"><a href="#2-4-PUT：上传文件" class="headerlink" title="2.4 PUT：上传文件"></a>2.4 PUT：上传文件</h2><ul><li>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般 WEB 网站不使用该方法。</li></ul><h2 id="2-5-DELETE：删除文件"><a href="#2-5-DELETE：删除文件" class="headerlink" title="2.5 DELETE：删除文件"></a>2.5 DELETE：删除文件</h2><ul><li>与 PUT 功能相反，并且同样不带验证机制。</li></ul><h2 id="2-6-OPTIONS：查询支持的方法"><a href="#2-6-OPTIONS：查询支持的方法" class="headerlink" title="2.6 OPTIONS：查询支持的方法"></a>2.6 OPTIONS：查询支持的方法</h2><ul><li>查询指定的 <code>URL</code> 能够支持的方法。</li><li>会返回 <code>Allow: GET</code>,<code>POST</code>, <code>HEAD</code>, <code>OPTIONS</code> 这样的内容。</li></ul><h2 id="2-7-TRACE：追踪路径"><a href="#2-7-TRACE：追踪路径" class="headerlink" title="2.7 TRACE：追踪路径"></a>2.7 <code>TRACE</code>：追踪路径</h2><ul><li>服务器会将通信路径返回给客户端。</li><li>发送请求时，在 <code>Max-Forwards</code> 首部字段中填入数值，每经过一个服务器就会减 <code>1</code>，当数值为 <code>0</code> 时就停止传输。</li><li>TRACE 一般不会使用，并且它容易受到 <code>XST</code> 攻击（<code>Cross-Site Tracing</code>，跨站追踪），因此更不会去使用它。</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/ca711108-e937-4d7d-99aa-61b325c61f1a.jpg?raw=true" alt=""></p><h2 id="2-8-CONNECT：要求用隧道协议连接代理"><a href="#2-8-CONNECT：要求用隧道协议连接代理" class="headerlink" title="2.8 CONNECT：要求用隧道协议连接代理"></a>2.8 CONNECT：要求用隧道协议连接代理</h2><ul><li>用隧道协议进行 <code>TCP</code> 通信。</li><li>主要使用 <code>SSL</code>（<code>Secure Sokets Layer</code>，安全套接字）和 <code>TLS</code>（<code>Transport Layer Security</code>，传输层安全）协议把通信内容加密后经网络隧道传输。</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/d8355d56-aa2b-4452-8001-8475cc095af1.jpg?raw=true" alt=""></p><h1 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h1><ul><li>服务器返回的响应报文中第一行为状态行，包含了状态码以及原因短语，来告知客户端请求的结果。</li></ul><table><thead><tr><th>状态码</th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td><code>1XX</code></td><td><code>Informational</code>（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td><code>2XX</code></td><td><code>Success</code>（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td><code>3XX</code></td><td><code>Redirection</code>（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td><code>4XX</code></td><td><code>Client Error</code>（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td><code>5XX</code></td><td><code>Server Error</code>（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h2 id="3-1-2XX-成功"><a href="#3-1-2XX-成功" class="headerlink" title="3.1 2XX 成功"></a>3.1 2XX 成功</h2><p><strong>200 OK</strong></p><p><strong>204 No Content</strong>：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p><p><strong>206 Partial Content</strong></p><h2 id="3-2-3XX-重定向"><a href="#3-2-3XX-重定向" class="headerlink" title="3.2 3XX 重定向"></a>3.2 3XX 重定向</h2><p><strong>301 Moved Permanently</strong>：永久性重定向</p><p><strong>302 Found</strong>：临时性重定向</p><p><strong>303 See Other</strong></p><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会把 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p><p><strong>304 Not Modified</strong>：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，但是不满足条件，则服务器会返回 304 状态码。</p><p><strong>307 Temporary Redirect</strong>：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p><h2 id="3-3-4XX-客户端错误"><a href="#3-3-4XX-客户端错误" class="headerlink" title="3.3 4XX 客户端错误"></a>3.3 4XX 客户端错误</h2><p><strong>400 Bad Request</strong>：请求报文中存在语法错误</p><p><strong>401 Unauthorized</strong>：该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。如果之前已进行过一次请求，则表示用户认证失败。</p><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/b1b4cf7d-c54a-4ff1-9741-cd2eea331123.jpg?raw=true" alt=""></p><p><strong>403 Forbidden</strong>：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</p><p><strong>404 Not Found</strong></p><h2 id="3-4-5XX-服务器错误"><a href="#3-4-5XX-服务器错误" class="headerlink" title="3.4 5XX 服务器错误"></a>3.4 5XX 服务器错误</h2><p><strong>500 Internal Server Error</strong>：服务器正在执行请求时发生错误</p><p><strong>503 Service Unavilable</strong>：该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p><h1 id="四、HTTP首部"><a href="#四、HTTP首部" class="headerlink" title="四、HTTP首部"></a>四、HTTP首部</h1><p>HTTP 报文包含了首部和主体两部分。有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。各种首部字段及其含义如下（不需要全记，仅供查阅）：</p><h2 id="4-1-通用首部字段"><a href="#4-1-通用首部字段" class="headerlink" title="4.1 通用首部字段"></a>4.1 通用首部字段</h2><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><code>Cache-Control</code></td><td>控制缓存的行为</td></tr><tr><td><code>Connection</code></td><td>逐跳首部、 连接的管理</td></tr><tr><td><code>Date</code></td><td>创建报文的日期时间</td></tr><tr><td><code>Pragma</code></td><td>报文指令</td></tr><tr><td><code>Trailer</code></td><td>报文末端的首部一览</td></tr><tr><td><code>Transfer-Encoding</code></td><td>指定报文主体的传输编码方式</td></tr><tr><td><code>Upgrade</code></td><td>升级为其他协议</td></tr><tr><td><code>Via</code></td><td>代理服务器的相关信息</td></tr><tr><td><code>Warning</code></td><td>错误通知</td></tr></tbody></table><h2 id="4-2-请求首部字段"><a href="#4-2-请求首部字段" class="headerlink" title="4.2 请求首部字段"></a>4.2 请求首部字段</h2><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><code>Accept</code></td><td>用户代理可处理的媒体类型</td></tr><tr><td><code>Accept-Charset</code></td><td>优先的字符集</td></tr><tr><td><code>Accept-Encoding</code></td><td>优先的内容编码</td></tr><tr><td><code>Accept-Language</code></td><td>优先的语言（自然语言）</td></tr><tr><td><code>Authorization</code></td><td>Web认证信息</td></tr><tr><td><code>Expect</code></td><td>期待服务器的特定行为</td></tr><tr><td><code>From</code></td><td>用户的电子邮箱地址</td></tr><tr><td><code>Host</code></td><td>请求资源所在服务器</td></tr><tr><td><code>If-Match</code></td><td>比较实体标记（<code>ETag</code>）</td></tr><tr><td><code>If-Modified-Since</code></td><td>比较资源的更新时间</td></tr><tr><td><code>If-None-Match</code></td><td>比较实体标记（与 <code>If-Match</code> 相反）</td></tr><tr><td><code>If-Range</code></td><td>资源未更新时发送实体 <code>Byte</code> 的范围请求</td></tr><tr><td><code>If-Unmodified-Since</code></td><td>比较资源的更新时间（与<code>If-Modified-Since</code>相反）</td></tr><tr><td><code>Max-Forwards</code></td><td>最大传输逐跳数</td></tr><tr><td><code>Proxy-Authorization</code></td><td>代理服务器要求客户端的认证信息</td></tr><tr><td><code>Range</code></td><td>实体的字节范围请求</td></tr><tr><td><code>Referer</code></td><td>对请求中 <code>URI</code> 的原始获取方</td></tr><tr><td><code>TE</code></td><td>传输编码的优先级</td></tr><tr><td><code>User-Agent</code></td><td><code>HTTP</code> 客户端程序的信息</td></tr></tbody></table><h2 id="4-3-响应首部字段"><a href="#4-3-响应首部字段" class="headerlink" title="4.3 响应首部字段"></a>4.3 响应首部字段</h2><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><code>Accept-Ranges</code></td><td>是否接受字节范围请求</td></tr><tr><td><code>Age</code></td><td>推算资源创建经过时间</td></tr><tr><td><code>ETag</code></td><td>资源的匹配信息</td></tr><tr><td><code>Location</code></td><td>令客户端重定向至指定URI</td></tr><tr><td><code>Proxy-Authenticate</code></td><td>代理服务器对客户端的认证信息</td></tr><tr><td><code>Retry-After</code></td><td>对再次发起请求的时机要求</td></tr><tr><td><code>Server</code></td><td>HTTP服务器的安装信息</td></tr><tr><td><code>Vary</code></td><td>代理服务器缓存的管理信息</td></tr><tr><td><code>WWW-Authenticate</code></td><td>服务器对客户端的认证信息</td></tr></tbody></table><h2 id="4-4-实体首部字段"><a href="#4-4-实体首部字段" class="headerlink" title="4.4 实体首部字段"></a>4.4 实体首部字段</h2><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td><code>Allow</code></td><td>资源可支持的<code>HTTP</code>方法</td></tr><tr><td><code>Content-Encoding</code></td><td>实体主体适用的编码方式</td></tr><tr><td><code>Content-Language</code></td><td>实体主体的自然语言</td></tr><tr><td><code>Content-Length</code></td><td>实体主体的大小（单位： 字节）</td></tr><tr><td><code>Content-Location</code></td><td>替代对应资源的URI</td></tr><tr><td><code>Content-MD5</code></td><td>实体主体的报文摘要</td></tr><tr><td><code>Content-Range</code></td><td>实体主体的位置范围</td></tr><tr><td><code>Content-Type</code></td><td>实体主体的媒体类型</td></tr><tr><td><code>Expires</code></td><td>实体主体过期的日期时间</td></tr><tr><td><code>Last-Modified</code></td><td>资源的最后修改日期时间</td></tr></tbody></table><h1 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h1><h2 id="5-1-Cookie"><a href="#5-1-Cookie" class="headerlink" title="5.1 Cookie"></a>5.1 Cookie</h2><ul><li><code>HTTP</code> 协议是无状态的，主要是为了让 <code>HTTP</code> 协议尽可能简单，使得它能够处理大量事务。<code>HTTP/1.1</code> 引入 <code>Cookie</code> 来保存状态信息</li><li>服务器会发送的响应报文包含 <code>Set-Cookie</code> 字段，客户端得到该相应后把 <code>Cookie</code> 内容保存到浏览器中。下次再发送请求时，从浏览器中读出 <code>Cookie</code> 值，在请求报文中包含<code>Cookie</code>字段，这样服务器就知道客户端的状态信息了。<code>Cookie</code> 状态信息保存在客户端浏览器中，而不是服务器上</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/ff17c103-750a-4bb8-9afa-576327023af9.png?raw=true" alt=""></p><p><strong>Set-Cookie 字段有以下属性</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>NAME=VALUE</code></td><td>赋予 <code>Cookie</code> 的名称和其值（必需项）</td></tr><tr><td><code>expires=DATE</code></td><td><code>Cookie</code> 的有效期（若不明确指定则默认为浏览器关闭前为止）</td></tr><tr><td><code>path=PATH</code></td><td>将服务器上的文件目录作为 <code>Cookie</code> 的适用对象（若不指定则默认为文档所在的文件目录）</td></tr><tr><td><code>domain=域名</code></td><td>作为 <code>Cookie</code>适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名）</td></tr><tr><td><code>Secure</code></td><td>仅在 <code>HTTPS</code> 安全通信时才会发送 <code>Cookie</code></td></tr><tr><td><code>HttpOnly</code></td><td>加以限制，使 <code>Cookie</code> 不能被 <code>JavaScript</code> 脚本访问</td></tr></tbody></table><p><strong>Session 和 Cookie 区别</strong></p><blockquote><p><code>Session</code> 是服务器用来跟踪用户的一种手段，每个 <code>Session</code> 都有一个唯一标识：<code>Session ID</code>。当服务器创建了一个 <code>Session</code> 时，给客户端发送的响应报文就包含了 <code>Set-Cookie</code> 字段，其中有一个名为 sid 的键值对，这个键值对就是 <code>Session ID</code>。客户端收到后就把 <code>Cookie</code> 保存在浏览器中，并且之后发送的请求报文都包含 <code>Session ID</code>。<code>HTTP</code> 就是 <code>Session</code> 和 <code>Cookie</code> 这两种方式一起合作来实现跟踪用户状态的，而 <code>Session</code> 用于服务器端，<code>Cookie</code> 用于客户端。</p></blockquote><p><strong>浏览器禁用 Cookie 的情况</strong></p><ul><li>会使用 <code>URL</code> 重写技术，在 <code>URL</code> 后面加上 <code>sid=xxx</code> </li></ul><p><strong>使用 Cookie 实现用户名和密码的自动填写</strong></p><ul><li>网站脚本会自动从 <code>Cookie</code> 中读取用户名和密码，从而实现自动填写。</li></ul><h2 id="5-2-缓存"><a href="#5-2-缓存" class="headerlink" title="5.2 缓存"></a>5.2 缓存</h2><ul><li>有两种缓存方法：让代理服务器进行缓存和让客户端浏览器进行缓存。</li></ul><p><strong><code>Cache-Control</code> 用于控制缓存的行为</strong></p><ul><li><code>Cache-Control: no-cache</code>有两种含义，如果是客户端向缓存服务器发送的请求报文中含有该指令，表示客户端不想要缓存的资源；如果是源服务器向缓存服务器发送的响应报文中含有该指令，表示缓存服务器不能对资源进行缓存。</li><li><code>Expires</code>字段可以用于告知缓存服务器该资源什么时候会过期。当首部字段 <code>Cache-Control</code> 有指定 <code>max-age</code> 指令时，比起首部字段 Expires，会优先处理 <code>max-age</code> 指令。</li></ul><h2 id="5-3-持久连接"><a href="#5-3-持久连接" class="headerlink" title="5.3 持久连接"></a>5.3 持久连接</h2><blockquote><p>当浏览器访问一个包含多张图片的 <code>HTML</code> 页面时，除了请求访问 <code>HTML</code> 页面资源，还会请求图片资源，如果每进行一次 <code>HTTP</code> 通信就要断开一次 <code>TCP</code> 连接，连接建立和断开的开销会很大。<strong>持久连接</strong> 只需要进行一次 <code>TCP</code> 连接就能进行多次 <code>HTTP</code>通信。<code>HTTP/1.1</code>开始，所有的连接默认都是持久连接</p></blockquote><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/c73a0b78-5f46-4d2d-a009-dab2a999b5d8.jpg?raw=true" alt=""></p><ul><li>持久连接需要使用 <code>Connection</code> 首部字段进行管理。<code>HTTP/1.1</code> 开始<code>HTTP</code> 默认是持久化连接的，如果要断开 <code>TCP</code> 连接，需要由客户端或者服务器端提出断开，使用 <code>Connection: close</code> ；而在<code>HTTP/1.1</code>之前默认是非持久化连接的，如果要维持持续连接，需要使用 <code>Keep-Alive</code>。</li><li>管线化方式可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/6943e2af-5a70-4004-8bee-b33d60f39da3.jpg?raw=true" alt=""></p><h2 id="5-4-编码"><a href="#5-4-编码" class="headerlink" title="5.4 编码"></a>5.4 编码</h2><p>编码（Encoding）主要是为了对实体进行压缩。常用的编码有：gzip、compress、deflate、identity，其中 identity 表示不执行压缩的编码格式。</p><h2 id="5-5-分块传输"><a href="#5-5-分块传输" class="headerlink" title="5.5 分块传输"></a>5.5 分块传输</h2><blockquote><p>分块传输（<code>Chunked Transfer Coding</code>）可以把数据分割成多块，让浏览器逐步显示页面。</p></blockquote><h2 id="5-6-多部分对象集合"><a href="#5-6-多部分对象集合" class="headerlink" title="5.6 多部分对象集合"></a>5.6 多部分对象集合</h2><ul><li>一份报文主体内可含有多类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔；每个部分都可以有首部字段。</li></ul><p>例如，上传多个表单时可以使用如下方式：</p><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/decb0936-e83c-4a55-840a-fe8aa101ac61.png?raw=true" alt=""></p><h2 id="5-7-范围请求"><a href="#5-7-范围请求" class="headerlink" title="5.7 范围请求"></a>5.7 范围请求</h2><ul><li>如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。</li><li>在请求报文首部中添加 <code>Range</code>字段，然后指定请求的范围，例如  <code>Range : bytes = 5001-10000</code>。请求成功的话服务器发送 <code>206 Partial Content</code> 状态。</li></ul><h2 id="5-8-内容协商"><a href="#5-8-内容协商" class="headerlink" title="5.8 内容协商"></a>5.8 内容协商</h2><ul><li>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</li><li>涉及以下首部字段：<code>Accept</code>、<code>Accept-Charset</code>、<code>Accept-Encoding</code>、<code>Accept-Language</code>、<code>Content-Language</code></li></ul><h2 id="5-9-虚拟主机"><a href="#5-9-虚拟主机" class="headerlink" title="5.9 虚拟主机"></a>5.9 虚拟主机</h2><ul><li>使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</li></ul><h2 id="5-10-通信数据转发"><a href="#5-10-通信数据转发" class="headerlink" title="5.10 通信数据转发"></a>5.10 通信数据转发</h2><p><strong>代理</strong></p><ul><li>代理服务器接受客户端的请求，并且转发给其它服务器。代理服务器一般是透明的，不会改变 URL。</li><li>使用代理的主要目的是：缓存、网络访问控制以及记录访问日志。</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/c07035c3-a9ba-4508-8e3c-d8ae4c6ee9ee.jpg?raw=true" alt=""></p><p><strong>网关</strong></p><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而其它非 HTTP 服务器的服务。</p><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/81375888-6be1-476f-9521-42eea3e3154f.jpg?raw=true" alt=""></p><p><strong>隧道</strong></p><p>使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。</p><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/64b95403-d976-421a-8b45-bac89c0b5185.jpg?raw=true" alt=""></p><h1 id="六、HTTPs"><a href="#六、HTTPs" class="headerlink" title="六、HTTPs"></a>六、HTTPs</h1><p><strong>HTTP 有以下安全性问题</strong></p><ul><li>通信使用明文，内容可能会被窃听；</li><li>不验证通信方的身份，因此有可能遭遇伪装；</li><li>无法证明报文的完整性，所以有可能已遭篡改。</li></ul><blockquote><p><code>HTTPs</code> 并不是新协议，而是 <code>HTTP</code> 先和 <code>SSL</code>（Secure Socket Layer）通信，再由 <code>SSL</code> 和 <code>TCP</code> 通信。通过使用 <code>SSL</code>，<code>HTTPs</code> 提供了加密、认证和完整性保护。</p></blockquote><h2 id="6-1-加密"><a href="#6-1-加密" class="headerlink" title="6.1 加密"></a>6.1 加密</h2><blockquote><p>有两种加密方式：对称密钥加密和公开密钥加密。对称密钥加密的加密和解密使用同一密钥，而公开密钥加密使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p></blockquote><ul><li>对称密钥加密的缺点：无法安全传输密钥；公开密钥加密的缺点：相对来说更耗时</li><li><code>HTTPs</code> 采用 <strong>混合的加密机制</strong>，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中，共享密钥即对称密钥）</li></ul><p><img src="https://github.com/CyC2018/InterviewNotes/blob/master/pics/110b1a9b-87cd-45c3-a21d-824623715b33.jpg?raw=true" alt=""></p><h2 id="6-2-认证"><a href="#6-2-认证" class="headerlink" title="6.2 认证"></a>6.2 认证</h2><ul><li>通过使用 <strong>证书</strong> 来对通信方进行认证。证书中有公开密钥数据，如果可以验证公开密钥的确属于通信方的，那么就可以确定通信方是可靠的。</li><li>数字证书认证机构（<code>CA</code>，Certificate<br>Authority）颁发的公开密钥证书，可以通过 CA 对其进行验证。</li><li>进行 <code>HTTPs</code> 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，就可以开始加密过程。</li><li>使用 <code>OpenSSL</code> 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。</li><li>客户端证书需要用户自行安装，只有在业务需要非常高安全性时才使用客户端证书，例如网上银行。</li></ul><h2 id="6-3-完整性"><a href="#6-3-完整性" class="headerlink" title="6.3 完整性"></a>6.3 完整性</h2><ul><li><code>SSL</code> 提供摘要功能来验证完整性。</li></ul><h1 id="七、HTTP-1-0-与-HTTP-1-1-的区别"><a href="#七、HTTP-1-0-与-HTTP-1-1-的区别" class="headerlink" title="七、HTTP/1.0 与 HTTP/1.1 的区别"></a>七、HTTP/1.0 与 HTTP/1.1 的区别</h1><ul><li><code>HTTP/1.1</code> 默认是长连接；</li><li><code>HTTP/1.1</code> 提供了范围请求功能；</li><li><code>HTTP/1.1</code> 提供了虚拟主机的功能；</li><li><code>HTTP/1.1</code> 多了一些缓存处理字段；</li><li><code>HTTP/1.1</code> 多了一些状态码；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、基础概念&quot;&gt;&lt;a href=&quot;#一、基础概念&quot; class=&quot;headerlink&quot; title=&quot;一、基础概念&quot;&gt;&lt;/a&gt;一、基础概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-Web基础&quot;&gt;&lt;a href=&quot;#1-1-Web基础&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>实现数据的双向绑定mvvm-剖析Vue的原理</title>
    <link href="http://blog.poetries.top/2018/02/25/vue-mvvm/"/>
    <id>http://blog.poetries.top/2018/02/25/vue-mvvm/</id>
    <published>2018-02-25T09:12:32.000Z</published>
    <updated>2018-02-26T15:50:35.387Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>完成的效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        word: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/1.gif" alt=""></p><h2 id="一、几种实现双向绑定的做法"><a href="#一、几种实现双向绑定的做法" class="headerlink" title="一、几种实现双向绑定的做法"></a>一、几种实现双向绑定的做法</h2><blockquote><p>目前几种主流的<code>mvc(vm)</code>框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（<code>input</code>、<code>textare</code>等）添加了<code>change(input)</code>事件，来动态修改<code>model</code>和 <code>view</code>，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p></blockquote><ul><li>发布者-订阅者模式（<code>backbone.js</code>）</li><li>脏值检查（<code>angular.js</code>） </li><li>数据劫持（<code>vue.js</code>） </li></ul><h3 id="1-1-发布者-订阅者模式"><a href="#1-1-发布者-订阅者模式" class="headerlink" title="1.1 发布者-订阅者模式"></a>1.1 发布者-订阅者模式</h3><ul><li>一般通过<code>sub</code>, <code>pub</code>的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code>，<a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="noopener">这里有篇文章讲的比较详细</a></li><li>这种方式现在毕竟太low了，我们更希望通过 <code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式</li></ul><h3 id="1-2-脏值检查"><a href="#1-2-脏值检查" class="headerlink" title="1.2 脏值检查"></a>1.2 脏值检查</h3><blockquote><p><code>angular.js</code> 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p></blockquote><ul><li><code>DOM</code>事件，譬如用户输入文本，点击按钮等。( <code>ng-click</code> ) </li><li><code>XHR</code>响应事件 ( <code>$http</code> ) </li><li>浏览器<code>Location</code>变更事件 ( <code>$location</code> ) </li><li><code>Timer</code>事件( <code>$timeout</code> , <code>$interval</code> ) </li><li>执行 <code>$digest()</code> 或 <code>$apply()</code></li></ul><h3 id="1-3-数据劫持"><a href="#1-3-数据劫持" class="headerlink" title="1.3 数据劫持"></a>1.3 数据劫持</h3><ul><li><code>vue.js</code>则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</li></ul><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><blockquote><p>已经了解到<code>vue</code>是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉<code>defineProperty</code>，猛戳<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">这里</a></p></blockquote><p><strong>要实现mvvm的双向绑定，就必须要实现以下几点</strong></p><ul><li>实现一个数据监听器<code>Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个指令解析器<code>Compile</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个<code>Watcher</code>，作为连接<code>Observer</code>和<code>Compile</code>的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li><code>mvvm</code>入口函数，整合以上三者</li></ul><p>上述流程如图所示：</p><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/2.png" alt=""></p><h3 id="2-1-实现Observer"><a href="#2-1-实现Observer" class="headerlink" title="2.1 实现Observer"></a>2.1 实现Observer</h3><ul><li>我们知道可以利用<code>Obeject.defineProperty()</code>来监听属性变动</li><li>那么将需要<code>observe</code>的数据对象进行递归遍历，包括子属性对象的属性，都加上<code>setter</code>和<code>getter</code></li><li>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化。相关代码可以是这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    defineReactive(data, key, data[key]);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/observer.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/observer.js</a></li></ul><blockquote><p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发<code>notify</code>，再调用订阅者的<code>update</code>方法，代码改善之后是这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="comment">// ... 省略</span></span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">            dep.notify(); <span class="comment">// 通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>那么问题来了，谁是订阅者，怎么往订阅器添加订阅者？</li><li>没错，上面的思路整理中我们已经明确订阅者应该是<code>Watcher</code>, 而且<code>var dep = new Dep();</code>是在 <code>defineReactive</code>方法内部定义的，所以想通过<code>dep</code>添加订阅者，就必须要在闭包内操作，所以我们可以在<code>getter</code>里面动手脚：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer.js</span></span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">Dep.target = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.value = data[key];<span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里已经实现了一个<code>Observer</code>了，已经具备了监听数据和数据变化通知订阅者的功能。那么接下来就是实现<code>Compile</code>了</li></ul><h3 id="2-2-实现Compile"><a href="#2-2-实现Compile" class="headerlink" title="2.2 实现Compile"></a>2.2 实现<code>Compile</code></h3><ul><li><code>compile</code>主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图</li><li>并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示</li></ul><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/3.png" alt=""></p><ul><li>因为遍历解析的过程有多次操作<code>dom</code>节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作</li><li>解析完成，再将<code>fragment</code>添加回原来的真实<code>dom</code>节点中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el);</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment); &#125;,</span><br><span class="line">    node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(), child;</span><br><span class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>compileElement</code>方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> childNodes = el.childNodes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> text = node.textContent;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;<span class="comment">// 表达式文本</span></span><br><span class="line">            <span class="comment">// 按元素节点方式编译</span></span><br><span class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">                me.compile(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历编译子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                me.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    compile: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 规定：指令以 v-xxx 命名</span></span><br><span class="line">            <span class="comment">// 如 &lt;span v-text="content"&gt;&lt;/span&gt; 中指令为 v-text</span></span><br><span class="line">            <span class="keyword">var</span> attrName = attr.name;<span class="comment">// v-text</span></span><br><span class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line">                <span class="keyword">var</span> exp = attr.value; <span class="comment">// content</span></span><br><span class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);<span class="comment">// text</span></span><br><span class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">                <span class="comment">// 事件指令, 如 v-on:click</span></span><br><span class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 普通指令</span></span><br><span class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>];</span><br><span class="line">        <span class="comment">// 第一次初始化视图</span></span><br><span class="line">        updaterFn &amp;&amp; updaterFn(node, vm[exp]);</span><br><span class="line">        <span class="comment">// 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 一旦属性值有变化，会收到通知执行此更新函数，更新视图</span></span><br><span class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新函数</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">    textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">        node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/compile.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/compile.js</a></p></blockquote><ul><li>这里通过递归遍历保证了每个节点及子节点都会解析编译到</li><li>指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=&quot;content&quot;</code>中<code>v-text</code>便是指令</li><li>监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知</li><li>至此，一个简单的<code>Compile</code>就完成了。接下来要看看<code>Watcher</code>这个订阅者的具体实现了</li></ul><h3 id="2-3-实现Watcher"><a href="#2-3-实现Watcher" class="headerlink" title="2.3 实现Watcher"></a>2.3 实现Watcher</h3><blockquote><p><code>Watcher</code>订阅者作为<code>Observer</code>和<code>Compile</code>之间通信的桥梁，主要做的事情是</p></blockquote><ul><li>在自身实例化时往属性订阅器<code>dep</code>里面添加自己</li><li>自身必须有一个<code>update()</code>方法</li><li>待属性变动<code>dep.notice()</code>通知时，能调用自身的<code>update()</code>方法，并触发<code>Compile</code>中绑定的回调，则功成身退。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get(); </span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();<span class="comment">// 属性值变化收到通知</span></span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get(); <span class="comment">// 取到最新值</span></span><br><span class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal); <span class="comment">// 执行Compile中绑定的回调，更新视图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>;<span class="comment">// 将当前订阅者指向自己</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp];<span class="comment">// 触发getter，添加自己到属性订阅器中</span></span><br><span class="line">        Dep.target = <span class="literal">null</span>;<span class="comment">// 添加完毕，重置</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update(); <span class="comment">// 调用订阅者的update方法，通知变化</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/watcher.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/watcher.js</a></p></blockquote><ul><li>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前<code>watcher</code>实例，强行触发属性定义的<code>getter</code>方法，<code>getter</code>方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前<code>watcher</code>实例，从而在属性值有变化的时候，<code>watcherInstance</code>就能收到更新通知。</li><li>基本上<code>vue</code>中数据绑定相关比较核心的几个模块也是这几个，猛戳<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">这里</a> , 在<code>src</code> 目录可找到<code>vue</code>源码。</li></ul><blockquote><p>最后来讲讲<code>MVVM</code>入口文件的相关逻辑和实现吧，相对就比较简单了</p></blockquote><h2 id="三、实现MVVM"><a href="#三、实现MVVM" class="headerlink" title="三、实现MVVM"></a>三、实现MVVM</h2><blockquote><p><code>MVVM</code>作为数据绑定的入口，整合<code>Observer</code>、<code>Compile</code>和<code>Watcher</code>三者，通过<code>Observer</code>来监听自己的<code>model</code>数据变化，通过<code>Compile</code>来解析编译模板指令，最终利用<code>Watcher</code>搭起<code>Observer</code>和<code>Compile</code>之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(<code>input</code>) -&gt; 数据<code>model</code>变更的双向绑定效果。</p></blockquote><ul><li>一个简单的<code>MVVM</code>构造器是这样子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这里有个问题，从代码中可看出监听的数据对象是<code>options.data</code>，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;;</code>这样的方式来改变数据。</li><li>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：<br><code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code></li><li>所以这里需要给<code>MVVM</code>实例添加一个属性代理的方法，使访问<code>vm</code>的属性代理为访问<code>vm._data</code>的属性，改造后的代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data, me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        me._proxy(key);</span><br><span class="line">    &#125;);</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">_proxy: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">            configurable: <span class="literal">false</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> me._data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                me._data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/mvvm.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/mvvm.js</a></p><ul><li>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了<code>vm</code>实例对象的属性的读写权，使读写<code>vm</code>实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;完成的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="MVVM" scheme="http://blog.poetries.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习篇</title>
    <link href="http://blog.poetries.top/2018/02/25/nginx-study/"/>
    <id>http://blog.poetries.top/2018/02/25/nginx-study/</id>
    <published>2018-02-25T07:12:08.000Z</published>
    <updated>2018-02-26T15:50:35.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Nginx</code> 是一款面向性能设计的 <code>HTTP</code> 服务器，能反向代理 <code>HTTP</code>，<code>HTTPS</code> 和邮件相关(<code>SMTP</code>，<code>POP3</code>，<code>IMAP</code>)的协议链接。并且提供了负载均衡以及 <code>HTTP</code> 缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。</p></blockquote><ul><li>所以关于 `Nginx，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」</li></ul><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h3><blockquote><p><code>prce</code>(重定向支持)和<code>openssl</code>(<code>https</code>支持，如果不需要<code>https</code>可以不安装)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre-devel </span><br><span class="line">yum -y install gcc make gcc-c++ wget</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p><code>CentOS 6.5</code> 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可</p><h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h3><p><a href="http://nginx.org/download/" target="_blank" rel="noopener">nginx的所有版本在这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装wget</span></span><br><span class="line"><span class="comment"># 下载已编译版本</span></span><br><span class="line">$ yum install wget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">tar zxf nginx-1.13.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-3-编译安装"><a href="#1-3-编译安装" class="headerlink" title="1.3 编译安装"></a>1.3 编译安装</h3><p>然后进入目录编译安装，<a href="#configure参数说明">configure参数说明</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.11.5</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/usr/local/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/usr/local/nginx/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/usr/local/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/usr/local/nginx/conf"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/usr/local/nginx/conf/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/usr/local/nginx/logs/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"scgi_temp"</span></span><br></pre></td></tr></table></figure><blockquote><p>安装报错误的话比如：<code>“C compiler cc is not found”</code>，这个就是缺少编译环境，安装一下就可以了 <code>yum -y install gcc make gcc-c++ openssl-devel</code></p></blockquote><p>如果没有<code>error</code>信息，就可以执行下边的安装了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="1-4-nginx测试"><a href="#1-4-nginx测试" class="headerlink" title="1.4 nginx测试"></a>1.4 nginx测试</h3><ul><li>运行下面命令会出现两个结果，一般情况<code>nginx</code>会安装在<code>/usr/local/nginx</code>目录中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">./nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br></pre></td></tr></table></figure><h3 id="1-5-设置全局nginx命令"><a href="#1-5-设置全局nginx命令" class="headerlink" title="1.5 设置全局nginx命令"></a>1.5 设置全局nginx命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>将下面内容添加到 <code>~/.bash_profile</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>运行命令 <strong><code>source ~/.bash_profile</code></strong> 让配置立即生效。你就可以全局运行 <code>nginx</code> 命令了。</p><h2 id="二、开机自启动"><a href="#二、开机自启动" class="headerlink" title="二、开机自启动"></a>二、开机自启动</h2><p><strong>开机自启动方法一</strong></p><ul><li>编辑 <strong><code>vi /lib/systemd/system/nginx.service</code></strong> 文件，没有创建一个 <strong><code>touch nginx.service</code></strong> - 然后将如下内容根据具体情况进行修改后，添加到<code>nginx.service</code>文件中：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]:服务的说明  </span><br><span class="line">Description:描述服务  </span><br><span class="line">After:描述服务类别  </span><br><span class="line">[Service]服务运行参数的设置  </span><br><span class="line">Type=forking是后台运行的形式  </span><br><span class="line">ExecStart为服务的具体运行命令  </span><br><span class="line">ExecReload为重启命令  </span><br><span class="line">ExecStop为停止命令  </span><br><span class="line">PrivateTmp=True表示给服务分配独立的临时空间  </span><br><span class="line">注意：[Service]的启动、重启、停止命令全部要求使用绝对路径  </span><br><span class="line">[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure><p>保存退出。</p><p>设置开机启动，使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"><span class="comment"># 输出下面内容表示成功了</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure><p><strong>开机自启动方法二</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 rc.local 文件中，添加下面这条命令</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx start</span><br></pre></td></tr></table></figure><ul><li>如果开机后发现自启动脚本没有执行，你要去确认一下<code>rc.local</code>这个文件的访问权限是否是可执行的，因为<code>rc.local</code>默认是不可执行的。修改<code>rc.local</code>访问权限，增加可执行权限：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h2 id="三、运维"><a href="#三、运维" class="headerlink" title="三、运维"></a>三、运维</h2><h3 id="3-1-服务管理"><a href="#3-1-服务管理" class="headerlink" title="3.1 服务管理"></a>3.1 服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭进程</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑关闭nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx的安装状态，</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><strong>关闭防火墙，或者添加防火墙规则就可以测试了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p>或者编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加这样一条开放80端口的规则后保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启服务即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># 命令进行查看目前nat</span></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><h3 id="3-2-重启服务防火墙报错解决"><a href="#3-2-重启服务防火墙报错解决" class="headerlink" title="3.2 重启服务防火墙报错解决"></a>3.2 重启服务防火墙报错解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># Redirecting to /bin/systemctl restart  iptables.service</span></span><br><span class="line"><span class="comment"># Failed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.</span></span><br></pre></td></tr></table></figure><ul><li>在<code>CentOS 7</code>或<code>RHEL 7</code>或<code>Fedora</code>中防火墙由 <strong><code>firewalld</code></strong> 来管理，当然你可以还原传统的管理方式。或则使用新的命令进行管理。<br>假如采用传统请执行一下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统命令</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables </span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="四、nginx卸载"><a href="#四、nginx卸载" class="headerlink" title="四、nginx卸载"></a>四、nginx卸载</h2><ul><li>如果通过<code>yum</code>安装，使用下面命令安装。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure><ul><li>编译安装，删除<code>/usr/local/nginx</code>目录即可</li><li>如果配置了自启动脚本，也需要删除。</li></ul><h2 id="五、参数说明"><a href="#五、参数说明" class="headerlink" title="五、参数说明"></a>五、参数说明</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–prefix=<code>&lt;path&gt;</code></td><td>Nginx安装路径。如果没有指定，默认为 /usr/local/nginx。</td></tr><tr><td>–sbin-path=<code>&lt;path&gt;</code></td><td>Nginx可执行文件安装路径。只能安装时指定，如果没有指定，默认为<code>&lt;prefix&gt;</code>/sbin/nginx。</td></tr><tr><td>–conf-path=<code>&lt;path&gt;</code></td><td>在没有给定-c选项下默认的nginx.conf的路径。如果没有指定，默认为<code>&lt;prefix&gt;</code>/conf/nginx.conf。</td></tr><tr><td>–pid-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/logs/nginx.pid。</td></tr><tr><td>–lock-path=<code>&lt;path&gt;</code></td><td>nginx.lock文件的路径。</td></tr><tr><td>–error-log-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/- logs/error.log。</td></tr><tr><td>–http-log-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/- logs/access.log。</td></tr><tr><td>–user=<code>&lt;user&gt;</code></td><td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的用户。如果没有指定，默认为 nobody。</td></tr><tr><td>–group=<code>&lt;group&gt;</code></td><td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的组。如果没有指定，默认为 nobody。</td></tr><tr><td>–builddir=DIR</td><td>指定编译的目录</td></tr><tr><td>–with-rtsig_module</td><td>启用 rtsig 模块</td></tr><tr><td>–with-select_module –without-select_module</td><td>允许或不允许开启SELECT模式，如果 configure 没有找到更合适的模式，比如：kqueue(sun os),epoll (linux kenel 2.6+), rtsig(- 实时信号)或者/dev/poll(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式</td></tr><tr><td>–with-poll_module –without-poll_module</td><td>Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure.</td></tr><tr><td>–with-http_ssl_module</td><td>Enable ngx_http_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl</td></tr><tr><td>–with-http_realip_module</td><td>启用 ngx_http_realip_module</td></tr><tr><td>–with-http_addition_module</td><td>启用 ngx_http_addition_module</td></tr><tr><td>–with-http_sub_module</td><td>启用 ngx_http_sub_module</td></tr><tr><td>–with-http_dav_module</td><td>启用 ngx_http_dav_module</td></tr><tr><td>–with-http_flv_module</td><td>启用 ngx_http_flv_module</td></tr><tr><td>–with-http_stub_status_module</td><td>启用 “server status” 页</td></tr><tr><td>–without-http_charset_module</td><td>禁用 ngx_http_charset_module</td></tr><tr><td>–without-http_gzip_module</td><td>禁用 ngx_http_gzip_module. 如果启用，需要 zlib 。</td></tr><tr><td>–without-http_ssi_module</td><td>禁用 ngx_http_ssi_module</td></tr><tr><td>–without-http_userid_module</td><td>禁用 ngx_http_userid_module</td></tr><tr><td>–without-http_access_module</td><td>禁用 ngx_http_access_module</td></tr><tr><td>–without-http_auth_basic_module</td><td>禁用 ngx_http_auth_basic_module</td></tr><tr><td>–without-http_autoindex_module</td><td>禁用 ngx_http_autoindex_module</td></tr><tr><td>–without-http_geo_module</td><td>禁用 ngx_http_geo_module</td></tr><tr><td>–without-http_map_module</td><td>禁用 ngx_http_map_module</td></tr><tr><td>–without-http_referer_module</td><td>禁用 ngx_http_referer_module</td></tr><tr><td>–without-http_rewrite_module</td><td>禁用 ngx_http_rewrite_module. 如果启用需要 PCRE 。</td></tr><tr><td>–without-http_proxy_module</td><td>禁用 ngx_http_proxy_module</td></tr><tr><td>–without-http_fastcgi_module</td><td>禁用 ngx_http_fastcgi_module</td></tr><tr><td>–without-http_memcached_module</td><td>禁用 ngx_http_memcached_module</td></tr><tr><td>–without-http_limit_zone_module</td><td>禁用 ngx_http_limit_zone_module</td></tr><tr><td>–without-http_empty_gif_module</td><td>禁用 ngx_http_empty_gif_module</td></tr><tr><td>–without-http_browser_module</td><td>禁用 ngx_http_browser_module</td></tr><tr><td>–without-http_upstream_ip_hash_module</td><td>禁用 ngx_http_upstream_ip_hash_module</td></tr><tr><td>–with-http_perl_module</td><td>启用 ngx_http_perl_module</td></tr><tr><td>–with-perl_modules_path=PATH</td><td>指定 perl 模块的路径</td></tr><tr><td>–with-perl=PATH</td><td>指定 perl 执行文件的路径</td></tr><tr><td>–http-log-path=PATH</td><td>Set path to the http access log</td></tr><tr><td>–http-client-body-temp-path=PATH</td><td>Set path to the http client request body temporary files</td></tr><tr><td>–http-proxy-temp-path=PATH</td><td>Set path to the http proxy temporary files</td></tr><tr><td>–http-fastcgi-temp-path=PATH</td><td>Set path to the http fastcgi temporary files</td></tr><tr><td>–without-http</td><td>禁用 HTTP server</td></tr><tr><td>–with-mail</td><td>启用 IMAP4/POP3/SMTP 代理模块</td></tr><tr><td>–with-mail_ssl_module</td><td>启用 ngx_mail_ssl_module</td></tr><tr><td>–with-cc=PATH</td><td>指定 C 编译器的路径</td></tr><tr><td>–with-cpp=PATH</td><td>指定 C 预处理器的路径</td></tr><tr><td>–with-cc-opt=OPTIONS</td><td>Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate –with-cc-opt=”-I /usr/local/include”. If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: –with-cc-opt=”-D FD_SETSIZE=2048”.</td></tr><tr><td>–with-ld-opt=OPTIONS</td><td>Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate –with-ld-opt=”-L /usr/local/lib”.</td></tr><tr><td>–with-cpu-opt=CPU</td><td>为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</td></tr><tr><td>–without-pcre</td><td>禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 “location” 配置指令中的正则表达式也需要 PCRE 。</td></tr><tr><td>–with-pcre=DIR</td><td>指定 PCRE 库的源代码的路径。</td></tr><tr><td>–with-pcre-opt=OPTIONS</td><td>Set additional options for PCRE building.</td></tr><tr><td>–with-md5=DIR</td><td>Set path to md5 library sources.</td></tr><tr><td>–with-md5-opt=OPTIONS</td><td>Set additional options for md5 building.</td></tr><tr><td>–with-md5-asm</td><td>Use md5 assembler sources.</td></tr><tr><td>–with-sha1=DIR</td><td>Set path to sha1 library sources.</td></tr><tr><td>–with-sha1-opt=OPTIONS</td><td>Set additional options for sha1 building.</td></tr><tr><td>–with-sha1-asm</td><td>Use sha1 assembler sources.</td></tr><tr><td>–with-zlib=DIR</td><td>Set path to zlib library sources.</td></tr><tr><td>–with-zlib-opt=OPTIONS</td><td>Set additional options for zlib building.</td></tr><tr><td>–with-zlib-asm=CPU</td><td>Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro</td></tr><tr><td>–with-openssl=DIR</td><td>Set path to OpenSSL library sources</td></tr><tr><td>–with-openssl-opt=OPTIONS</td><td>Set additional options for OpenSSL building</td></tr><tr><td>–with-debug</td><td>启用调试日志</td></tr><tr><td>–add-module=PATH</td><td>Add in a third-party module found in directory PATH</td></tr></tbody></table><h2 id="六、配置"><a href="#六、配置" class="headerlink" title="六、配置"></a>六、配置</h2><ul><li>在<code>Centos</code> 默认配置文件在 <strong><code>/usr/local/nginx-1.5.1/conf/nginx.conf</code></strong> 我们要在这里配置一些文件。<code>nginx.conf</code>是主配置文件，由若干个部分组成，每个大括号<code>{}</code>表示一个部分。每一行指令都由分号结束<code>;</code>，标志着一行的结束。</li></ul><h3 id="6-1-常用正则"><a href="#6-1-常用正则" class="headerlink" title="6.1 常用正则"></a>6.1 常用正则</h3><table><thead><tr><th>正则</th><th>说明</th><th>正则</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符以外的任意字符</td><td><code>$</code></td><td>匹配字符串的结束</td></tr><tr><td><code>?</code></td><td>重复0次或1次</td><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>+</code></td><td>重复1次或更多次</td><td><code>{n,}</code></td><td>重复n次或更多次</td></tr><tr><td><code>*</code></td><td>重复0次或更多次</td><td><code>[c]</code></td><td>匹配单个字符c</td></tr><tr><td><code>\d</code></td><td>匹配数字</td><td><code>[a-z]</code></td><td>匹配a-z小写字母的任意一个</td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td><td>-</td><td>-</td></tr></tbody></table><h3 id="6-2-全局变量"><a href="#6-2-全局变量" class="headerlink" title="6.2 全局变量"></a>6.2 全局变量</h3><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><code>$args</code></td><td>这个变量等于请求行中的参数，同<code>$query_string</code></td><td><code>$remote_port</code></td><td>客户端的端口。</td></tr><tr><td><code>$content_length</code></td><td>请求头中的<code>Content-length</code>字段。</td><td><code>$remote_user</code></td><td>已经经过<code>Auth Basic Module</code>验证的用户名。</td></tr><tr><td><code>$content_type</code></td><td>请求头中的<code>Content-Type</code>字段。</td><td><code>$request_filename</code></td><td>当前请求的文件路径，由<code>root</code>或<code>alias</code>指令与<code>URI</code>请求生成。</td></tr><tr><td><code>$document_root</code></td><td>当前请求在<code>root</code>指令中指定的值。</td><td><code>$scheme</code></td><td><code>HTTP</code>方法（如<code>http</code>，<code>https</code>）。</td></tr><tr><td><code>$host</code></td><td>请求主机头字段，否则为服务器名称。</td><td><code>$server_protocol</code></td><td>请求使用的协议，通常是<code>HTTP/1.0</code>或<code>HTTP/1.1</code>。</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端<code>agent</code>信息</td><td><code>$server_addr</code></td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td><code>$http_cookie</code></td><td>客户端<code>cookie</code>信息</td><td><code>$server_name</code></td><td>服务器名称。</td></tr><tr><td><code>$limit_rate</code></td><td>这个变量可以限制连接速率。</td><td><code>$server_port</code></td><td>请求到达服务器的端口号。</td></tr><tr><td><code>$request_method</code></td><td>客户端请求的动作，通常为<code>GET</code>或<code>POST</code>。</td><td><code>$request_uri</code></td><td>包含请求参数的原始<code>URI</code>，不包含主机名，如：<code>/foo/bar.php?arg=baz</code>。</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的IP地址。</td><td><code>$uri</code></td><td>不带请求参数的当前<code>URI</code>，<code>$uri</code>不包含主机名，如<code>/foo/bar.html</code>。</td></tr><tr><td><code>$document_uri</code></td><td>与<code>$uri</code>相同。</td><td>-</td><td>-</td></tr></tbody></table><p>例如请求：<code>http://localhost:3000/test1/test2/test.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost  </span><br><span class="line">$server_port：3000  </span><br><span class="line">$request_uri：/test1/test2/test.php  </span><br><span class="line">$document_uri：/test1/test2/test.php  </span><br><span class="line">$document_root：/var/www/html  </span><br><span class="line">$request_filename：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure><h3 id="6-3-符号参考"><a href="#6-3-符号参考" class="headerlink" title="6.3 符号参考"></a>6.3 符号参考</h3><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>k</code>,<code>K</code></td><td>千字节</td><td><code>m</code>,<code>M</code></td><td>兆字节</td><td><code>ms</code></td><td>毫秒</td></tr><tr><td><code>s</code></td><td>秒</td><td><code>m</code></td><td>分钟</td><td><code>h</code></td><td>小时</td></tr><tr><td><code>d</code></td><td>日</td><td><code>w</code></td><td>周</td><td><code>M</code></td><td>一个月, <code>30</code>天</td></tr></tbody></table><ul><li>例如，”8k”，”1m” 代表字节数计量。  </li><li>例如，”1h 30m”，”1y 6M”。代表 “1小时 30分”，”1年零6个月”。 </li></ul><h3 id="6-4-配置文件"><a href="#6-4-配置文件" class="headerlink" title="6.4 配置文件"></a>6.4 配置文件</h3><ul><li><code>nginx</code> 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 <code>nginx</code> 安装目录下的 <code>conf</code> 目录下。</li><li>指令由 <code>nginx</code> 的各个模块提供，不同的模块会提供不同的指令来实现配置。<br>指令除了 <code>Key-Value</code> 的形式，还有作用域指令。</li><li><code>nginx.conf</code> 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。</li></ul><blockquote><p>下面的这些上下文指令是用的比较多：</p></blockquote><table><thead><tr><th><code>Directive</code></th><th><code>Description</code></th><th><code>Contains Directive</code></th></tr></thead><tbody><tr><td><code>main</code></td><td><code>nginx</code> 在运行时与具体业务功能（比如 <code>http</code> 服务或者 <code>email</code>服务代理）无关的一些参数，比如工作进程数，运行的身份等。</td><td><code>user</code>, <code>worker_processes</code>, <code>error_log</code>, <code>events</code>, <code>http</code>, <code>mail</code></td></tr><tr><td><code>http</code></td><td>与提供 <code>http</code> 服务相关的一些配置参数。例如：是否使用 <code>keepalive</code>啊，是否使用<code>gzip</code> 进行压缩等。</td><td><code>server</code></td></tr><tr><td><code>server</code></td><td><code>http</code> 服务上支持若干虚拟主机。每个虚拟主机一个对应的 <code>server</code> 配置项，配置项里面包含该虚拟主机相关的配置。在提供 <code>mail</code> 服务的代理时，也可以建立若干 <code>server.</code> 每个 <code>server</code> 通过监听的地址来区分。</td><td><code>listen</code>, <code>server_name</code>,<code>access_log</code>, <code>location</code>, <code>protocol</code>, <code>proxy</code>, <code>smtp_auth</code>, <code>xclient</code></td></tr><tr><td><code>location</code></td><td><code>http</code> 服务中，某些特定的 <code>URL</code> 对应的一系列配置项。</td><td><code>index</code>, <code>root</code></td></tr><tr><td><code>mail</code></td><td>实现<code>email</code>相关的 <code>SMTP/IMAP/POP3</code> 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</td><td><code>server</code>,<code>http</code>, <code>imap_capabilities</code></td></tr><tr><td><code>include</code></td><td>以便增强配置文件的可读性，使得部分配置文件可以重新使用。</td><td>-</td></tr><tr><td><code>valid_referers</code></td><td>用来校验<code>Http</code>请求头<code>Referer</code>是否有效。</td><td>-</td></tr><tr><td><code>try_files</code></td><td>用在<code>server</code>部分，不过最常见的还是用在<code>location</code>部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。</td><td>-</td></tr><tr><td><code>if</code></td><td>当在<code>location</code>块中使用<code>if</code>指令，在某些情况下它并不按照预期运行，一般来说避免使用<code>if</code>指令。</td><td>-</td></tr></tbody></table><ul><li>例如我们再 <strong><code>nginx.conf</code></strong> 里面引用两个配置 <code>vhost/example.com.conf</code>和 <code>vhost/gitlab.com.conf</code> 它们都被放在一个我自己新建的目录 <code>vhost</code>下面。<code>nginx.conf</code> 配置如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span>  vhost/example.com.conf;</span><br><span class="line">    <span class="attribute">include</span>  vhost/gitlab.com.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单的配置: <code>example.com.conf</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  baidu.com app.baidu.com; <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;    <span class="comment"># 这里指定默认入口页面</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/app.baidu.com;         <span class="comment"># 这里指定目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-内置预定义变量"><a href="#6-5-内置预定义变量" class="headerlink" title="6.5 内置预定义变量"></a>6.5 内置预定义变量</h3><ul><li><code>Nginx</code>提供了许多预定义的变量，也可以通过使用<code>set</code>来设置变量。你可以在<code>if</code>中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，<a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">更多详见</a></li></ul><table><thead><tr><th>变量名称</th><th>值</th></tr></thead><tbody><tr><td><code>$args_name</code></td><td>在请求中的<code>name</code>参数</td></tr><tr><td><code>$args</code>  `</td><td>所有请求参数</td></tr><tr><td><code>$query_string</code></td><td><code>$args</code>的别名</td></tr><tr><td><code>$content_length</code></td><td>请求头<code>Content-Length</code>的值</td></tr><tr><td><code>$content_type</code></td><td>请求头<code>Content-Type</code>的值</td></tr><tr><td><code>$host</code></td><td>如果当前有<code>Host</code>，则为请求头<code>Host</code>的值；如果没有这个头，那么该值等于匹配该请求的<code>server_name</code>的值</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的<code>IP</code>地址</td></tr><tr><td><code>$request</code></td><td>完整的请求，从客户端收到，包括<code>Http</code>请求方法、<code>URI</code>、<code>Http</code>协议、头、请求体</td></tr><tr><td><code>$request_uri</code></td><td>完整请求的<code>URI</code>，从客户端来的请求，包括参数</td></tr><tr><td><code>$scheme</code></td><td>当前请求的协议</td></tr><tr><td><code>$uri</code></td><td>当前请求的标准化<code>URI</code></td></tr></tbody></table><h3 id="6-6-反向代理"><a href="#6-6-反向代理" class="headerlink" title="6.6 反向代理"></a>6.6 反向代理</h3><ul><li>反向代理是一个<code>Web</code>服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;                                                        </span><br><span class="line">  <span class="attribute">server_name</span>  localhost;                                              </span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;  <span class="comment"># 允许客户端请求的最大单文件字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>                         http://localhost:8080;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host              <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For   <span class="variable">$remote_addr</span>; <span class="comment"># HTTP的请求端真实的IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;      <span class="comment"># 为了正确地识别实际用户发出的协议是 http 还是 https</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂的配置: <code>gitlab.com.conf</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:3000;</span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理到上游服务器的配置中，最重要的是<code>proxy_pass</code>指令。以下是代理模块中的一些常用指令：</li></ul><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>proxy_connect_timeout</code></td><td><code>Nginx</code>从接受请求至连接到上游服务器的最长等待时间</td></tr><tr><td><code>proxy_send_timeout</code></td><td>后端服务器数据回传时间(代理发送超时)</td></tr><tr><td><code>proxy_read_timeout</code></td><td>连接成功后，后端服务器响应时间(代理接收超时)</td></tr><tr><td><code>proxy_cookie_domain</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>domain</code>属性</td></tr><tr><td><code>proxy_cookie_path</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>path</code>属性</td></tr><tr><td><code>proxy_buffer_size</code></td><td>设置代理服务器（<code>nginx</code>）保存用户头信息的缓冲区大小</td></tr><tr><td><code>proxy_buffers</code></td><td><code>proxy_buffers</code>缓冲区，网页平均在多少k以下</td></tr><tr><td><code>proxy_set_header</code></td><td>重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现</td></tr><tr><td><code>proxy_ignore_headers</code></td><td>这个指令禁止处理来自代理服务器的应答。</td></tr><tr><td><code>proxy_intercept_errors</code></td><td>使<code>nginx</code>阻止<code>HTTP</code>应答代码为<code>400</code>或者更高的应答。</td></tr></tbody></table><h3 id="6-7-负载均衡"><a href="#6-7-负载均衡" class="headerlink" title="6.7 负载均衡"></a>6.7 负载均衡</h3><ul><li><code>upstream</code>指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为<code>down</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> gitlab &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="comment"># upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.122.11:8081</span> ;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:82</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">3</span> down;</span><br><span class="line">    server 127.0.0.1:84 weight=3; max_fails=3  fail_timeout=20s;</span><br><span class="line">    server 127.0.0.1:85 weight=4;;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://gitlab;    <span class="comment">#在这里设置一个代理，和upstream的名字一样</span></span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>;  <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>;  <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>;  <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>;  <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>;<span class="comment"># 缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">        <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>; <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器<code>down</code>掉，能自动剔除。</li></ul><p><strong>负载均衡：</strong></p><ul><li><code>upstream</code>模块能够使用3种负载均衡算法：轮询、IP哈希、最少连接数。</li></ul><p><strong>轮询：</strong> </p><ul><li>默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；  </li></ul><p><strong>IP哈希：</strong> </p><ul><li>通过<code>ip_hash</code>指令来激活，Nginx通过IPv4地址的前3个字节或者整个IPv6地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；  </li></ul><p><strong>最少连接数：</strong> </p><ul><li>通过<code>least_conn</code>指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给<code>server</code>配置<code>weight</code>权重来说明，该算法将考虑到不同服务器的加权最少连接数。</li></ul><h4 id="6-7-1-RR"><a href="#6-7-1-RR" class="headerlink" title="6.7.1 RR"></a>6.7.1 RR</h4><p><strong>简单配置</strong> </p><blockquote><p>这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的，也就是说访问不到，但是我们访问 <code>http://localhost</code> 的时候，也不会有问题，会默认跳转到<code>http://localhost:8080</code>具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>负载均衡的核心代码为</strong> </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-2-权重"><a href="#6-7-2-权重" class="headerlink" title="6.7.2 权重"></a>6.7.2 权重</h4><ul><li>指定轮询几率，<code>weight</code>和访问比率成正比，用于后端服务器性能不均的情况。 例如</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span> weight=<span class="number">9</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>那么10次一般只会有<code>1</code>次会访问到<code>8081</code>，而有<code>9</code>次会访问到<code>8080</code></li></ul><h4 id="6-7-3-ip-hash"><a href="#6-7-3-ip-hash" class="headerlink" title="6.7.3 ip_hash"></a>6.7.3 ip_hash</h4><blockquote><p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了<code>session</code>保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了<code>session</code>中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用<code>iphash</code>了，<code>iphash</code>的每个请求按访问<code>ip</code>的<code>hash</code>结果分配，这样每个访客固定访问一个后端服务器，可以解决<code>session</code>的问题。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-4-fair"><a href="#6-7-4-fair" class="headerlink" title="6.7.4 fair"></a>6.7.4 fair</h4><ul><li>这是个第三方模块，按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    fair;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-5-url-hash"><a href="#6-7-5-url-hash" class="headerlink" title="6.7.5 url_hash"></a>6.7.5 url_hash</h4><blockquote><p>这是个第三方模块，按访问<code>url</code>的<code>hash</code>结果来分配请求，使每个<code>url</code>定向到同一个后端服务器，后端服务器为缓存时比较有效。 在<code>upstream</code>中加入<code>hash</code>语句，<code>server</code>语句中不能写入<code>weight</code>等其他的参数，<code>hash_method</code>是使用的<code>hash</code>算法</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">hash_method</span> crc32;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上<code>5</code>种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式，不过<code>fair</code>和<code>url_hash</code>需要安装第三方模块才能使用</li></ul><p><strong>server指令可选参数：</strong></p><ul><li><code>weight</code>：设置一个服务器的访问权重，数值越高，收到的请求也越多；</li><li><code>fail_timeout</code>：在这个指定的时间内服务器必须提供响应，如果在这个时间内没有收到响应，那么服务器将会被标记为<code>down</code>状态；</li><li><code>max_fails</code>：设置在<code>fail_timeout</code>时间之内尝试对一个服务器连接的最大次数，如果超过这个次数，那么服务器将会被标记为<code>down</code>;</li><li><code>down</code>：标记一个服务器不再接受任何请求；</li><li><code>backup</code>：一旦其他服务器宕机，那么有该标记的机器将会接收请求。</li></ul><p><strong>keepalive指令：</strong></p><ul><li><code>Nginx</code>服务器将会为每一个<code>worker</code>进行保持同上游服务器的连接。</li></ul><h3 id="6-8-屏蔽ip"><a href="#6-8-屏蔽ip" class="headerlink" title="6.8 屏蔽ip"></a>6.8 屏蔽ip</h3><ul><li>在<code>nginx</code>的配置文件<code>nginx.conf</code>中加入如下配置，可以放到<code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code>语句块，需要注意相对路径，本例当中<code>nginx.conf</code>，<code>blocksip.conf</code>在同一个目录中。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> blockip.conf;</span><br></pre></td></tr></table></figure><ul><li>在<code>blockip.conf</code>里面输入内容，如：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deny</span> <span class="number">165.91.122.67</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> IP;   <span class="comment"># 屏蔽单个ip访问</span></span><br><span class="line"><span class="attribute">allow</span> IP;  <span class="comment"># 允许单个ip访问</span></span><br><span class="line"><span class="attribute">deny</span> all;  <span class="comment"># 屏蔽所有ip访问</span></span><br><span class="line"><span class="attribute">allow</span> all; <span class="comment"># 允许所有ip访问</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.0.0.0</span>/<span class="number">8</span>   <span class="comment"># 屏蔽整个段即从123.0.0.1到123.255.255.254访问的命令</span></span><br><span class="line">deny <span class="number">124.45.0.0</span>/<span class="number">16</span> <span class="comment"># 屏蔽IP段即从123.45.0.1到123.45.255.254访问的命令</span></span><br><span class="line">deny <span class="number">123.45.6.0</span>/<span class="number">24</span> <span class="comment"># 屏蔽IP段即从123.45.6.1到123.45.6.254访问的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想实现这样的应用，除了几个IP外，其他全部拒绝</span></span><br><span class="line">allow <span class="number">1.1.1.1</span>; </span><br><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.2</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure><h2 id="七、第三方模块安装方法"><a href="#七、第三方模块安装方法" class="headerlink" title="七、第三方模块安装方法"></a>七、第三方模块安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/你的安装目录  --add-module=/第三方模块目录</span><br></pre></td></tr></table></figure><h2 id="八、重定向"><a href="#八、重定向" class="headerlink" title="八、重定向"></a>八、重定向</h2><ul><li><code>permanent</code> 永久性重定向。请求日志中的状态码为301</li><li><code>redirect</code> 临时重定向。请求日志中的状态码为302</li></ul><h3 id="8-1-重定向整个网站"><a href="#8-1-重定向整个网站" class="headerlink" title="8.1 重定向整个网站"></a>8.1 重定向整个网站</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> old-site.com</span><br><span class="line">    return <span class="number">301</span> <span class="variable">$scheme</span>://new-site.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-重定向单页"><a href="#8-2-重定向单页" class="headerlink" title="8.2 重定向单页"></a>8.2 重定向单页</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> = /oldpage.html &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> http://example.org/newpage.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-重定向整个子路径"><a href="#8-3-重定向整个子路径" class="headerlink" title="8.3 重定向整个子路径"></a>8.3 重定向整个子路径</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /old-site &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/old-site/(.*)</span> http://example.org/new-site/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、性能"><a href="#九、性能" class="headerlink" title="九、性能"></a>九、性能</h2><h3 id="9-1-内容缓存"><a href="#9-1-内容缓存" class="headerlink" title="9.1 内容缓存"></a>9.1 内容缓存</h3><ul><li>允许浏览器基本上永久地缓存静态内容。 <code>Nginx</code>将为您设置<code>Expires</code>和<code>Cache-Control</code>头信息。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span> /data;</span><br><span class="line">    <span class="attribute">expires</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用<code>-1</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /empty.gif &#123;</span><br><span class="line">    empty_gif;</span><br><span class="line">    <span class="attribute">expires</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Gzip压缩"><a href="#9-2-Gzip压缩" class="headerlink" title="9.2 Gzip压缩"></a>9.2 Gzip压缩</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">gzip_types</span><br><span class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">    text/javascript application/javascript application/x-javascript</span><br><span class="line">    text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">    text/css text/plain text/x-component</span><br><span class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">    image/x-icon;</span><br><span class="line"><span class="attribute">gzip_disable</span>  <span class="string">"msie6"</span>;</span><br></pre></td></tr></table></figure><h3 id="9-3-打开文件缓存"><a href="#9-3-打开文件缓存" class="headerlink" title="9.3 打开文件缓存"></a>9.3 打开文件缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache</span> max=<span class="number">1000</span> inactive=<span class="number">20s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_min_uses</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h3 id="9-4-SSL缓存"><a href="#9-4-SSL缓存" class="headerlink" title="9.4 SSL缓存"></a>9.4 SSL缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br></pre></td></tr></table></figure><h3 id="9-5-上游Keepalive"><a href="#9-5-上游Keepalive" class="headerlink" title="9.5 上游Keepalive"></a>9.5 上游Keepalive</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6-监控"><a href="#9-6-监控" class="headerlink" title="9.6 监控"></a>9.6 监控</h3><ul><li>使用<code>ngxtop</code>实时解析<code>nginx</code>访问日志，并且将处理结果输出到终端，功能类似于系统命令<code>top</code>。所有示例都读取<code>nginx</code>配置文件的访问日志位置和格式。如果要指定访问日志文件和/或日志格式，请使用-f和-a选项。</li><li>注意：在<code>nginx</code>配置中<code>/usr/local/nginx/conf/nginx.conf</code>日志文件必须是绝对路径。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 ngxtop</span></span><br><span class="line">pip install ngxtop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时状态</span></span><br><span class="line">ngxtop</span><br><span class="line"><span class="comment"># 状态为404的前10个请求的路径：</span></span><br><span class="line">ngxtop top request_path --filter <span class="string">'status == 404'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送总字节数最多的前10个请求</span></span><br><span class="line">ngxtop --order-by <span class="string">'avg(bytes_sent) * count'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排名前十位的IP，例如，谁攻击你最多</span></span><br><span class="line">ngxtop --group-by remote_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印具有4xx或5xx状态的请求，以及status和http referer</span></span><br><span class="line">ngxtop -i <span class="string">'status &gt;= 400'</span> <span class="built_in">print</span> request status http_referer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由200个请求路径响应发送的平均正文字节以'foo'开始：</span></span><br><span class="line">ngxtop avg bytes_sent --filter <span class="string">'status == 200 and request_path.startswith("foo")'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用“common”日志格式从远程机器分析apache访问日志</span></span><br><span class="line">ssh remote tail -f /var/<span class="built_in">log</span>/apache2/access.log | ngxtop -f common</span><br></pre></td></tr></table></figure><h2 id="十、常见使用场景"><a href="#十、常见使用场景" class="headerlink" title="十、常见使用场景"></a>十、常见使用场景</h2><h3 id="10-1-跨域问题"><a href="#10-1-跨域问题" class="headerlink" title="10.1 跨域问题"></a>10.1 跨域问题</h3><ul><li>在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加<code>add_headers</code>来支持<code>cors</code>跨域。配置如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET,POST,HEAD'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面更改头信息，还有一种，使用 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener">rewrite</a> 指令重定向URI来解决跨域问题。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">  <span class="attribute">location</span> / &#123; </span><br><span class="line">    <span class="attribute">root</span>  html;                   <span class="comment">#去请求../html文件夹里的文件</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;  <span class="comment">#首页响应地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 用于拦截请求，匹配任何以 /api/开头的地址，</span></span><br><span class="line">  <span class="comment"># 匹配符合以后，停止往下搜索正则。</span></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~/api/</span>&#123; </span><br><span class="line">    <span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用，</span></span><br><span class="line">    <span class="comment"># 例如www.a.com/proxy/api/msg?meth=1&amp;par=2重写，只对/proxy/api/msg重写。</span></span><br><span class="line">    <span class="comment"># rewrite后面的参数是一个简单的正则 ^/api/(.*)$，</span></span><br><span class="line">    <span class="comment"># $1代表正则中的第一个()，$2代表第二个()的值，以此类推。</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把请求代理到其他主机 </span></span><br><span class="line">    <span class="comment"># 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下</span></span><br><span class="line">    <span class="comment"># 如果你的请求地址是他 http://server/html/test.jsp</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com/ 后面有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/html/test.jsp 访问</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com 后面没有有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/test.jsp 访问</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况</span></span><br><span class="line">    <span class="comment"># proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。</span></span><br><span class="line">    <span class="attribute">proxy_cookie_path</span> /platfrom/ /;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header</span></span><br><span class="line">    <span class="comment"># 设置 Cookie 头通过</span></span><br><span class="line">    <span class="attribute">proxy_pass_header</span> Set-Cookie;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-跳转到带www的域上面"><a href="#10-2-跳转到带www的域上面" class="headerlink" title="10.2 跳转到带www的域上面"></a>10.2 跳转到带www的域上面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 配置正常的带www的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> www.wangchujiang.com;</span><br><span class="line">    <span class="attribute">root</span> /home/www/wabg/download;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 这个要放到下面，</span></span><br><span class="line">    <span class="comment"># 将不带www的 wangchujiang.com 永久性重定向到  https://www.wangchujiang.com</span></span><br><span class="line">    <span class="attribute">server_name</span> wangchujiang.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://www.wangchujiang.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-代理转发"><a href="#10-3-代理转发" class="headerlink" title="10.3 代理转发"></a>10.3 代理转发</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> server-api&#123;</span><br><span class="line">    <span class="comment"># api 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3110</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> server-resource&#123;</span><br><span class="line">    <span class="comment"># 静态资源 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3120</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">3111</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;      <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/server-statics;</span><br><span class="line">    <span class="comment"># 匹配 api 路由的反向代理到API服务</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设这里验证码也在API服务中</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/captcha</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设你的图片资源全部在另外一个服务上面</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/img/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html</span></span><br><span class="line">    <span class="comment"># 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">        <span class="comment">#                               ^ 空格很重要</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-代理转发连接替换"><a href="#10-4-代理转发连接替换" class="headerlink" title="10.4 代理转发连接替换"></a>10.4 代理转发连接替换</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/api/upload</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /wfs/v1/upload <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://wfs-api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-5-ssl配置"><a href="#10-5-ssl配置" class="headerlink" title="10.5 ssl配置"></a>10.5 ssl配置</h3><ul><li>超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，HTTPS 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。</li></ul><ul><li>创建<code>SSL</code>证书，如果你购买的证书，就可以直接下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/ssl</span><br><span class="line"><span class="comment"># 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。</span></span><br><span class="line">sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class="line"><span class="comment"># 上面命令，会有下面需要填写内容</span></span><br><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State or Province Name (full name) [Some-State]:New York</span><br><span class="line">Locality Name (eg, city) []:New York City</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.</span><br><span class="line">Organizational Unit Name (eg, section) []:Ministry of Water Slides</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:your_domain.com</span><br><span class="line">Email Address []:admin@your_domain.com</span><br></pre></td></tr></table></figure><ul><li>创建自签证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先，创建证书和私钥的目录</span><br><span class="line"><span class="comment"># mkdir -p /etc/nginx/cert</span></span><br><span class="line"><span class="comment"># cd /etc/nginx/cert</span></span><br><span class="line">创建服务器私钥，命令会让你输入一个口令：</span><br><span class="line"><span class="comment"># openssl genrsa -des3 -out nginx.key 2048</span></span><br><span class="line">创建签名请求的证书（CSR）：</span><br><span class="line"><span class="comment"># openssl req -new -key nginx.key -out nginx.csr</span></span><br><span class="line">在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：</span><br><span class="line"><span class="comment"># cp nginx.key nginx.key.org</span></span><br><span class="line"><span class="comment"># openssl rsa -in nginx.key.org -out nginx.key</span></span><br><span class="line">最后标记证书使用上述私钥和CSR：</span><br><span class="line"><span class="comment"># openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt</span></span><br></pre></td></tr></table></figure><p>查看目前nginx编译选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx -V</span><br></pre></td></tr></table></figure><p>输出下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.7.8</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre</span><br></pre></td></tr></table></figure><p>如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>运行完成之后还需要<code>make</code> (不用make install)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份nginx的二进制文件</span></span><br><span class="line">cp -rf /usr/<span class="built_in">local</span>/nginx/sbin/nginx　 /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br><span class="line"><span class="comment"># 覆盖nginx的二进制文件</span></span><br><span class="line">cp -rf objs/nginx   /usr/<span class="built_in">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure><p>HTTPS server</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class="line">    <span class="comment"># 禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 </span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h。</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。</span></span><br><span class="line">    <span class="comment"># 这里指定的是OpenSSL库能够识别的写法，你可以通过 openssl -v cipher 'RC4:HIGH:!aNULL:!MD5'（后面是你所指定的套件加密算法） 来看所支持算法。</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-强制将http重定向到https"><a href="#10-6-强制将http重定向到https" class="headerlink" title="10.6 强制将http重定向到https"></a>10.6 强制将http重定向到https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;    <span class="comment"># 强制将http重定向到https</span></span><br><span class="line">    <span class="comment"># 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-7-两个虚拟主机"><a href="#10-7-两个虚拟主机" class="headerlink" title="10.7 两个虚拟主机"></a>10.7 两个虚拟主机</h3><ul><li>纯静态<code>-html</code> 支持</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain1.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain1.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain1.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain2.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain2.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain2.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-8-虚拟主机标准配置"><a href="#10-8-虚拟主机标准配置" class="headerlink" title="10.8 虚拟主机标准配置"></a>10.8 虚拟主机标准配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span> default;</span><br><span class="line">    <span class="attribute">server_name</span>     _ *;</span><br><span class="line">    <span class="attribute">access_log</span>      logs/default.access.log main;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">       <span class="attribute">index</span> index.html;</span><br><span class="line">       <span class="attribute">root</span>  /var/www/default/htdocs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-9-防盗链"><a href="#10-9-防盗链" class="headerlink" title="10.9 防盗链"></a>10.9 防盗链</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> html</span><br><span class="line">   valid_referers <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.nginxcn.com</span>;</span><br><span class="line">   <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^/</span> www.nginx.cn</span><br><span class="line">     <span class="comment">#return 404;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-10虚拟目录配置"><a href="#10-10虚拟目录配置" class="headerlink" title="10.10虚拟目录配置"></a>10.10虚拟目录配置</h3><p>alias指定的目录是准确的，root是指定目录的上级目录，并且该上级目录要含有location指定名称的同名目录。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。]</span></span><br></pre></td></tr></table></figure><h3 id="10-11-防盗图配置"><a href="#10-11-防盗图配置" class="headerlink" title="10.11 防盗图配置"></a>10.11 防盗图配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf)</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.jslite.io</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span>  http://wangchujiang.com/piratesp.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-12-屏蔽-git等文件"><a href="#10-12-屏蔽-git等文件" class="headerlink" title="10.12 屏蔽.git等文件"></a>10.12 屏蔽.git等文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ (.git|.gitattributes|.gitignore|.svn)</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="域名路径加不加需要都能正常访问"><a href="#域名路径加不加需要都能正常访问" class="headerlink" title="域名路径加不加需要都能正常访问"></a>域名路径加不加需要都能正常访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://wangchujiang.com/api/index.php?a=1&amp;name=wcj</span><br><span class="line">                                  ^ 有后缀</span><br><span class="line"></span><br><span class="line">http://wangchujiang.com/api/index?a=1&amp;name=wcj</span><br><span class="line">                                 ^ 没有后缀</span><br></pre></td></tr></table></figure><ul><li><code>nginx rewrite</code>规则如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /index.php?/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line"><span class="attribute">if</span> (!-d <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">1</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">2</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$rule_1</span> = <span class="string">"21"</span>)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span> /index.php <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、错误问题"><a href="#十一、错误问题" class="headerlink" title="十一、错误问题"></a>十一、错误问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The plain HTTP request was sent to HTTPS port</span><br></pre></td></tr></table></figure><ul><li>解决办法，<code>fastcgi_param HTTPS $https if_not_empty</code> 添加这条规则，</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment"># 注意这条规则</span></span><br><span class="line">    <span class="attribute">server_name</span>  my.domain.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="variable">$https</span> if_not_empty;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/ssl/certs/your.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/private/your.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Your config here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、精品文章参考"><a href="#十二、精品文章参考" class="headerlink" title="十二、精品文章参考"></a>十二、精品文章参考</h2><ul><li><a href="https://my.oschina.net/u/3341316/blog/877206" target="_blank" rel="noopener">负载均衡原理的解析</a></li><li><a href="http://blog.githuber.cn/posts/73" target="_blank" rel="noopener">Nginx泛域名解析，实现多个二级域名 </a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">深入 NGINX: 我们如何设计性能和扩展</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">Inside NGINX: How We Designed for Performance &amp; Scale</a></li><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a></li><li><a href="http://os.51cto.com/art/201703/535326.htm#topx" target="_blank" rel="noopener">Nginx的优化与防盗链</a></li><li><a href="https://segmentfault.com/a/1190000009769143" target="_blank" rel="noopener">实战开发一个Nginx扩展 (Nginx Module)</a></li><li><a href="https://my.oschina.net/xshuai/blog/917097" target="_blank" rel="noopener">Nginx+Keepalived(双机热备)搭建高可用负载均衡环境(HA)</a></li><li><a href="http://www.huxd.org/articles/2017/07/24/1500890692329.html" target="_blank" rel="noopener">Nginx 平滑升级</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxNzg5ODE0OA==&amp;mid=2247483708&amp;idx=1&amp;sn=90b0b1dccd9c337922a0588245277666&amp;chksm=97f38cf7a08405e1928e0b46d923d630e529e7db8ac7ca2a91310a075986f8bcb2cee5b4953d#rd" target="_blank" rel="noopener">Nginx最新模块—ngx_http_mirror_module分析可以做版本发布前的预先验证，进行流量放大后的压测等等</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 是一款面向性能设计的 &lt;code&gt;HTTP&lt;/code&gt; 服务器，能反向代理 &lt;code&gt;HTTP&lt;/code&gt;，&lt;code&gt;HTTPS&lt;/code&gt; 和邮件相关(&lt;code&gt;SMTP&lt;/code&gt;，&lt;code
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>日常频繁使用的Linux命令</title>
    <link href="http://blog.poetries.top/2018/02/25/linux-frequently-use-command/"/>
    <id>http://blog.poetries.top/2018/02/25/linux-frequently-use-command/</id>
    <published>2018-02-25T01:32:41.000Z</published>
    <updated>2018-02-26T15:50:35.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><p><strong>1.1 创建删除文件</strong></p><ul><li><code>mkdir</code>(<code>-p</code>多层创建)</li><li><code>touch</code></li><li><code>cp</code>(<code>-r</code>递归复制)</li><li><code>rm -rf</code></li><li><code>mv</code>(改名、移动剪切)</li><li><code>cat</code> (打印)</li></ul><p><strong>1.2 创建删除软连接</strong></p><blockquote><p>linux下的软链接类似于windows下的快捷方式。常用于实际路径很深，每次进入的时候需要花费一定时间，此时我们在根目录创建一个软链接指向该目录，那么我们进入该软连接其实就是进入了软链接指向的实际目录。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln  -s  /data/elastic/plugin/ik/custom  myES</span><br></pre></td></tr></table></figure><ul><li>以上命令中的 <code>/data/elastic/plugin/ik/custom</code> 就是源文件，<code>myES</code> 是链接文件名， 其作用是当进入 <code>myES</code> 目录，实际上是链接进入了 <code>/data/elastic/plugin/ik/custom</code> 目录</li><li><strong>删除软链接</strong> <code>rm -rf  myES</code> <ul><li>注意不是 <code>rm -rf  myES/</code></li></ul></li></ul><p><strong>1.3 重定向命令</strong></p><ul><li><code>ls  -l  /etc &gt; /home/myback.txt</code>     (覆盖重定向)　把显示的结果覆盖到<code>/home/myback.txt</code>中去</li><li><code>ls  -l  /etc &gt;&gt; /home/myback.txt</code>     (追加重定向)　把显示的结果追加到<code>/home/myback.txt</code>中去 </li></ul><p><strong>1.4 查看文件大小</strong></p><ul><li>查看某个文件夹当前所占用的空间使用 <code>du -h file</code></li><li>查看当前目录下的所有文件各个大小 <code>du -sh *</code>  </li></ul><h2 id="二、搜索命令"><a href="#二、搜索命令" class="headerlink" title="二、搜索命令"></a>二、搜索命令</h2><p><strong>2.1 管道过滤</strong></p><ul><li>使用管道命令过滤搜索的内容 <code>ls -l /etc | more</code></li></ul><p><strong>2.2 查询命令</strong>  </p><ul><li><strong>which</strong></li></ul><blockquote><p>在<code>PATH</code>变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `-a`：将所有由`PATH`目录中可以找到的命令均列出来，而不是只列出第一个被找到的命令</span></span><br><span class="line">[root@www ~] <span class="comment"># which ifconfig</span></span><br><span class="line">/sbin/ifconfig</span><br></pre></td></tr></table></figure><ul><li><strong>whereis</strong><ul><li><code>-b</code> 只查找二进制格式的文件</li><li><code>-m</code> 只查找在说明文件manual路径下的文件</li><li><code>-s</code> 只招<code>source</code>源文件</li><li><code>-u</code> 查找不在上述三个选项当中的其他特殊文件</li></ul></li></ul><blockquote><p>只能用于程序名的搜索，而且只搜索二进制文件（参数<code>-b</code>）、<code>man</code>说明文件（参数<code>-m</code>）和源代码文件（参数<code>-s</code>）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] 文件或目录名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># whereis ifconfig</span></span><br><span class="line">ifconfig: /sbin/ifconfig /usr/share/man/man8/ifconfig.8.gz</span><br><span class="line">[root@www ~] <span class="comment"># whereis -m ifconfig</span></span><br><span class="line">ifconfig: /usr/share/man/man8/ifconfig.8.gz</span><br></pre></td></tr></table></figure><ul><li><strong>locate</strong><ul><li><code>-i</code>：忽略大小写差异；</li><li><code>-r</code>：后面可接正则表达式的实现方式。</li></ul></li></ul><blockquote><p>相当于<code>find -name</code>，可快速查找文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [-ir] keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># locate passwd</span></span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/news/passwd.nntp</span><br><span class="line">/etc/pam.d/passwd</span><br></pre></td></tr></table></figure><ul><li><strong>find查找任何文件</strong></li></ul><blockquote><p>最常用和最强大的查找命令，可以用它找到任何想找的文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]</span><br></pre></td></tr></table></figure><p><strong>find参数：基于文件名的搜索</strong></p><ul><li>与文件名有关的参数如下<ul><li><code>-name filename</code>：查找文件名为<code>filename</code>的文件。<code>filename</code>可使用正则表达式表示</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] # find / -name passwd</span><br></pre></td></tr></table></figure><p>查找文件名为<code>passwd</code>的文件</p><p><strong>find参数：基于文件大小的搜索</strong></p><ul><li>与文件大小有关的参数如下<ul><li><code>-size SIZE</code>：查找文件大小刚好等于SIZE的文件</li><li><code>-size -SIZE</code>：查找文件大小大于SIZE的文件</li><li><code>-size +SIZE</code>：查找文件大小小于SIZE的文件</li></ul></li></ul><blockquote><p>其中，SIZE的单位有</p></blockquote><ul><li><code>c</code> —— <code>byte</code>，字节；</li><li><code>w</code> —— 字（2字节）；</li><li><code>b</code> —— <code>bit</code>，块（512字节）；</li><li><code>k</code> —— 千字节；</li><li><code>M</code> —— 兆字节；</li><li><code>G</code> —— 吉字节</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># find . -type f -size +10k</span></span><br><span class="line">搜索大于10KB的文件</span><br><span class="line">[root@www ~] <span class="comment"># find . -type f -size 10k</span></span><br><span class="line">搜索等于10KB的文件</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>通常<code>find</code>不很常用，因为速度慢！</li><li>通常都是先使用<code>whereis</code>或者<code>locate</code>来检查，当真的找不到了，才用<code>find</code>查找</li></ul><h2 id="三、压缩解压命令"><a href="#三、压缩解压命令" class="headerlink" title="三、压缩解压命令"></a>三、压缩解压命令</h2><ul><li><code>*.tar</code> 用 <code>tar -xvf</code> 解压</li><li><code>*.gz</code> 用 <code>gzip -d</code>或者<code>gunzip</code> 解压</li><li><code>*.tar.gz</code>和<code>*.tgz</code> 用 <code>tar -xzf</code> 解压</li><li><code>*.bz2</code> 用<code>bzip2 -d</code>或者用<code>bunzip2</code> 解压</li><li><code>*.tar.bz2</code>用<code>tar -xjf</code> 解压</li><li><code>*.Z</code> 用 <code>uncompress</code> 解压</li><li><code>*.tar.Z</code> 用<code>tar -xZf</code> 解压</li><li><code>*.rar</code> 用 <code>unrar e</code>解压</li><li><code>*.zip</code> 用 <code>unzip</code> 解压</li></ul><h2 id="四、VI相关"><a href="#四、VI相关" class="headerlink" title="四、VI相关"></a>四、VI相关</h2><ul><li>定位到头尾 <ul><li><code>G</code> 定位到尾</li><li><code>1G</code> 定位到头</li><li><code>nG</code> 定位到指定行</li></ul></li><li>复制<ul><li>复制一行 <ul><li><code>yy</code> 复制当前行</li></ul></li><li>复制多行<ul><li><code>7yy</code> 从当前行开始复制<code>７</code>行</li></ul></li><li>复制当前到行尾的内容 <ul><li><code>y$</code></li></ul></li></ul></li><li>粘贴<ul><li><code>p</code> </li><li>大写<code>P</code>代表贴至游标前</li></ul></li><li>选择复制<ul><li><code>v</code>进入可视化</li></ul></li><li>删除<ul><li>删除一行<ul><li><code>dd</code></li></ul></li><li>剪切至行首 <ul><li><code>d^</code></li></ul></li><li>剪切至行尾 <ul><li><code>d$</code></li></ul></li></ul></li><li>搜索 <code>/</code>搜索的关键字，按<code>n</code>切换下一个关键字</li></ul><h2 id="五、磁盘管理"><a href="#五、磁盘管理" class="headerlink" title="五、磁盘管理"></a>五、磁盘管理</h2><ul><li>查看内存使用情况： <code>free -m</code>  (<code>m</code>为<code>MB</code>，<code>g</code>为<code>GB</code>)</li><li>查看对应磁盘使用情况： <code>df -h</code></li></ul><h2 id="六、进程管理"><a href="#六、进程管理" class="headerlink" title="六、进程管理"></a>六、进程管理</h2><ul><li><code>pkill</code>  根据进程名杀死进程</li><li><code>ps</code> 列出系统中运行的进程，包括进程号、命令、CPU使用量、内存使用量<ul><li><code>ps -a</code> 列出所有运行中/激活进程</li><li><code>ps -ef |grep processName</code> 列出需要进程</li><li><code>ps -aux</code> 显示进程信息</li></ul></li><li><code>pstree</code> <code>linux</code>中，每一个进程都是由其父进程创建的。此命令以可视化方式显示进程，通过显示进程的树状图来展示进程间关系</li><li><code>top</code> <ul><li>可以监视系统中不同的进程所使用的资源</li><li>显示进程的数据包括<code>PID</code>、进程属主、优先级、<code>%CPU</code>、<code>%memory</code>等。可以使用这些显示指示出资源使用量</li></ul></li></ul><h2 id="七、网络管理"><a href="#七、网络管理" class="headerlink" title="七、网络管理"></a>七、网络管理</h2><p><strong>7.1 下载源管理</strong></p><ul><li><code>yum list | grep nginx</code> 查看是否有<code>Nginx</code>源</li></ul><p><strong>7.2 防火墙相关</strong></p><blockquote><p><code>linux</code>查看防火墙状态及开启关闭命令</p></blockquote><ul><li><strong>service方式</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables stop</span></span><br></pre></td></tr></table></figure><p><strong>iptables方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># cd /etc/init.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时关闭防火墙 </span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables</span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables restart</span></span><br></pre></td></tr></table></figure><ul><li><code>linux</code>的防火墙是否阻止80端口<ul><li>返回有内容说明开通，没返回内容，则说明阻止</li><li><code>iptables -vnL | grep &quot;:80 &quot;</code></li></ul></li></ul><h2 id="八、上传文件相关"><a href="#八、上传文件相关" class="headerlink" title="八、上传文件相关"></a>八、上传文件相关</h2><ul><li>从远处复制文件到本地目录 <ul><li><code>scp root@10.10.10.10:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code></li></ul></li><li>上传本地目录到远程机器指定目录(拷贝目录带上<code>-r</code>,递归复制)<ul><li><code>scp -r /opt/soft/mongodb root@10.10.10.10:/opt/soft/scptest</code></li></ul></li></ul><h2 id="九、系统相关"><a href="#九、系统相关" class="headerlink" title="九、系统相关"></a>九、系统相关</h2><p><strong>9.1 CPU管理</strong></p><ul><li>查看对应CPU使用情况<ul><li><code>cat /proc/cpuinfo</code></li></ul></li><li>只显示一行对应的CPU型号以及其他信息 <ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot; | head -1</code></li></ul></li><li>系统有几个核就会显示几行<ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot;</code></li></ul></li><li>统计出一共有多少核<ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot; | wc -l</code></li></ul></li></ul><p><strong>9.2其他</strong></p><ul><li>查看对应服务器版本当前操作系统发行版信息<ul><li><code>cat /etc/issue</code>  或  <code>cat /etc/redhat-release</code></li></ul></li><li>查看更为底层的版本信息： <code>cat /proc/version</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文件管理&quot;&gt;&lt;a href=&quot;#一、文件管理&quot; class=&quot;headerlink&quot; title=&quot;一、文件管理&quot;&gt;&lt;/a&gt;一、文件管理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 创建删除文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Linux" scheme="http://blog.poetries.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组、字符串、对象常用方法</title>
    <link href="http://blog.poetries.top/2018/02/23/js-string-arr-object-api/"/>
    <id>http://blog.poetries.top/2018/02/23/js-string-arr-object-api/</id>
    <published>2018-02-23T07:10:12.000Z</published>
    <updated>2018-02-26T15:50:35.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、String对象"><a href="#一、String对象" class="headerlink" title="一、String对象"></a>一、String对象</h2><h3 id="1-1-slice"><a href="#1-1-slice" class="headerlink" title="1.1 slice"></a>1.1 slice</h3><ul><li><code>stringObject.slice(start, end)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.slice(<span class="number">-4</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="comment">// a: 'Hello world!'</span></span><br><span class="line"><span class="comment">// b: 'llo world!'</span></span><br><span class="line"><span class="comment">// c: 'rl'，参数可为负</span></span><br></pre></td></tr></table></figure><h3 id="1-2-substr"><a href="#1-2-substr" class="headerlink" title="1.2 substr"></a>1.2 substr</h3><ul><li><code>stringObject.substr(start, length)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.substr(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.substr(<span class="number">-5</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// a: 'Hello world!'</span></span><br><span class="line"><span class="comment">// b: 'Hell'</span></span><br><span class="line"><span class="comment">// c: 'or'，参数可为负</span></span><br></pre></td></tr></table></figure><h3 id="1-3-substring"><a href="#1-3-substring" class="headerlink" title="1.3 substring"></a>1.3 substring</h3><ul><li><code>stringObject.substring(start, stop)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.substring(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> d = a.substring(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// a: 'Hello world!'</span></span><br><span class="line"><span class="comment">// b: 'Hell'</span></span><br><span class="line"><span class="comment">// c: 'l'，start比stop小，交换这两个参数</span></span><br><span class="line"><span class="comment">// d: ''，参数为负，返回空字符串</span></span><br></pre></td></tr></table></figure><blockquote><p><code>slice</code>、<code>substr</code>、<code>substring</code>都是字符串的切割方法，三者之间有细微的区别，根据不同的使用场景可以灵活使用。三种方法都是生成新的字符串，而不是修改原<code>string</code></p></blockquote><h2 id="二、Array对象"><a href="#二、Array对象" class="headerlink" title="二、Array对象"></a>二、Array对象</h2><h3 id="2-1-concat"><a href="#2-1-concat" class="headerlink" title="2.1 concat"></a>2.1 concat</h3><ul><li>参数可以为具体的值，也可以为数组对象，可以任意多个。不改变现有的数组，返回被连接数组的一个副本。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.concat(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.concat([<span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="comment">// a: [1, 2, 3]</span></span><br><span class="line"><span class="comment">// b: [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// c: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="2-2-pop"><a href="#2-2-pop" class="headerlink" title="2.2 pop"></a>2.2 pop</h3><ul><li>删除 <code>arrayObject</code> 的最后一个元素，把数组长度减 <code>1</code>，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 <code>undefined</code> 值。该方法会改变原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.pop();</span><br><span class="line"><span class="comment">// a: [1, 2]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 3，返回删除元素的值</span></span><br></pre></td></tr></table></figure><h3 id="2-3-push"><a href="#2-3-push" class="headerlink" title="2.3 push"></a>2.3 push</h3><ul><li>参数顺序添加到 <code>arrayObject</code> 的尾部，直接修改<code>arrayObject</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3, 4, 5]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 5，返回修改后的数组的长度</span></span><br></pre></td></tr></table></figure><h3 id="2-4-shift"><a href="#2-4-shift" class="headerlink" title="2.4 shift"></a>2.4 shift</h3><ul><li>把数组的第一个元素从其中删除，并返回第一个元素的值。如果数组是空的，那么 <code>shift()</code> 方法将不进行任何操作，返回<code>undefined</code>值。该方法会改变原数组。类比<code>pop</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.shift();</span><br><span class="line"><span class="comment">// a: [2, 3]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 1，返回删除元素的值</span></span><br></pre></td></tr></table></figure><h3 id="2-5-unshift"><a href="#2-5-unshift" class="headerlink" title="2.5 unshift"></a>2.5 unshift</h3><ul><li>向数组的开头添加一个或更多元素，并返回新的长度。该方法的第一个参数将成为数组的新元素 <code>0</code>，如果还有第二个参数，它将成为新的元素 <code>1</code>，以此类推</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.unshift(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// a: [ 4, 5, 1, 2, 3 ]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: 5，返回修改后的数组的长度</span></span><br></pre></td></tr></table></figure><h3 id="2-6-slice"><a href="#2-6-slice" class="headerlink" title="2.6 slice"></a>2.6 slice</h3><ul><li>返回一个新的数组，包含从 <code>start</code> 到 <code>end</code> （不包括该元素）的 <code>arrayObject</code> 中的元素。该方法不会修改原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3, 4, 5]，不修改原数组</span></span><br><span class="line"><span class="comment">// b: [3, 4, 5]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> d = c.slice(<span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// c: [1, 2, 3, 4, 5]，不修改原数组</span></span><br><span class="line"><span class="comment">// d: [3, 4]，返回新数组</span></span><br></pre></td></tr></table></figure><h3 id="2-7-splice"><a href="#2-7-splice" class="headerlink" title="2.7 splice"></a>2.7 splice</h3><ul><li>可删除从 <code>index</code> 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从 <code>arrayObject</code> 中删除了元素，则返回的是含有被删除的元素的数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// a: [1, 3, 4, 5]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: [2]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> d = c.splice(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// c: [1, 2, 3, 4]，修改了原数组</span></span><br><span class="line"><span class="comment">// d: [5]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> f = e.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="comment">// e: [ 1, 6, 7, 3, 4, 5 ]，修改了原数组</span></span><br><span class="line"><span class="comment">// f: [2]，返回新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> h = g.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// g: [ 1, 8, 2, 3, 4, 5 ]，修改了原数组</span></span><br><span class="line"><span class="comment">// h: []，没有删除值，返回空数组</span></span><br></pre></td></tr></table></figure><h3 id="2-8-sort"><a href="#2-8-sort" class="headerlink" title="2.8 sort"></a>2.8 sort</h3><ul><li>无参数时，将按字母顺序对数组中的元素进行排序。参数为比较函数时，如果要交换<code>prev</code>和<code>next</code>的值，返回大于<code>0</code>的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.sort(<span class="function"><span class="keyword">function</span> (<span class="params">prev, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev - next;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// a: [1, 6, 8, 9, 10]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: [1, 6, 8, 9, 10]，返回修改后的数组</span></span><br></pre></td></tr></table></figure><h3 id="2-9-reverse"><a href="#2-9-reverse" class="headerlink" title="2.9 reverse"></a>2.9 reverse</h3><ul><li>用于颠倒数组中元素的顺序。会改变原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.reverse();</span><br><span class="line"><span class="comment">// a: [3, 2, 1]，修改了原数组</span></span><br><span class="line"><span class="comment">// b: [3, 2, 1]，返回修改后的数组</span></span><br></pre></td></tr></table></figure><h3 id="2-10-map"><a href="#2-10-map" class="headerlink" title="2.10 map"></a>2.10 map</h3><blockquote><p>有返回值，返回一个新的数组，每个元素为调用<code>func</code>的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> other = list.map(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="2-11-forEach"><a href="#2-11-forEach" class="headerlink" title="2.11 forEach"></a>2.11 forEach</h3><ul><li>数组的每个元素执行一次提供的函数。一般来说不修改原数组，但也可以通过处理函数修改原数组。该方法很灵活，可类比<code>for...of</code></li><li>没有返回值，只针对每个元素调用<code>func</code>。</li><li>优点：代码简介。</li><li>缺点：无法使用<code>break</code>，<code>return</code>等终止循环</li></ul><blockquote><ul><li><code>value</code> 当前操作的数组元素</li><li>当前操作元素的数组索引</li><li><code>array</code> 当前数组的引用</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.forEach(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.push(d * <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(other);</span><br><span class="line"><span class="comment">// print: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="2-12-find"><a href="#2-12-find" class="headerlink" title="2.12 find"></a>2.12 find</h3><ul><li>返回数组中<strong>第一个满足测试条件</strong>（返回<code>true</code>）的元素。如果不存在这样的元素，返回<code>undefined</code>。<code>findIndex</code>类似，只不过返回的是第一个满足测试条件的元素的<code>index</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.find(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal === <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.find(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal === <span class="number">4</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3]，不修改原数组</span></span><br><span class="line"><span class="comment">// b: 1</span></span><br><span class="line"><span class="comment">// c: undefined</span></span><br></pre></td></tr></table></figure><h3 id="2-13-filter"><a href="#2-13-filter" class="headerlink" title="2.13 filter"></a>2.13 filter</h3><ul><li>返回数组中<strong>所有满足测试条件</strong>（返回<code>true</code>）的元素组成的数组。如果不存在这样的元素，返回<code>[]</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.filter(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal &gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.filter(<span class="function">(<span class="params">curVal</span>) =&gt;</span> curVal &gt; <span class="number">3</span>);</span><br><span class="line"><span class="comment">// a: [1, 2, 3]，不修改原数组</span></span><br><span class="line"><span class="comment">// b: [2, 3]</span></span><br><span class="line"><span class="comment">// c: []</span></span><br></pre></td></tr></table></figure><h3 id="2-14-reduce和reduceRight"><a href="#2-14-reduce和reduceRight" class="headerlink" title="2.14 reduce和reduceRight"></a>2.14 reduce和reduceRight</h3><blockquote><p><code>.reduce</code>从左到右而<code>.reduceRight</code>从右到左循环遍历数组，每次调用接收目前为止的部分结果和当前遍历的值</p></blockquote><ul><li>两种方法都有如下典型用法：<code>.reduce(callback(previousValue, currentValue, index, array), initialValue)</code>。</li><li><code>previousValue</code>是最后被调用的回调函数的返回值，<code>initialValue</code>是开始时<code>previousValue</code>被初始化的值。<code>currentValue</code></li><li>是当前被遍历的元素值，<code>index</code>是当前元素在数组中的索引值。<code>array</code>是对调用<code>.reduce</code>数组的简单引用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> partial + value</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>].sum()</span><br><span class="line"><span class="comment">// &lt;- 28</span></span><br></pre></td></tr></table></figure><blockquote><p>可以使用<code>.reduce</code>作为对象的字符串生成器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (partial) &#123;</span><br><span class="line">            partial += <span class="string">', '</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> partial + value</span><br><span class="line">    &#125;, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">concat([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'George'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Sam'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Pear'</span> &#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &lt;- 'George, Sam, Pear'</span></span><br></pre></td></tr></table></figure><h3 id="2-15-some"><a href="#2-15-some" class="headerlink" title="2.15 some"></a>2.15 some</h3><blockquote><p>返回一个<code>boolean</code>，判断是否有元素符合<code>func</code>条件，如果有一个元素符合<code>func</code>条件，则循环会终止</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.some(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d, i);</span><br><span class="line">    <span class="keyword">return</span> d &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// print: 1,0 2,1 3,2 4,3</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h3 id="2-16-every"><a href="#2-16-every" class="headerlink" title="2.16 every"></a>2.16 every</h3><blockquote><p>返回一个<code>boolean</code>，判断每个元素是否符合<code>func</code>条件，有一个元素不满足<code>func</code>条件，则循环终止，返回<code>false</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">list.every(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d, i);</span><br><span class="line">    <span class="keyword">return</span> d &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// print: 1,0 2,1 3,2</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h2 id="三、Object"><a href="#三、Object" class="headerlink" title="三、Object"></a>三、Object</h2><h3 id="3-1-for-in"><a href="#3-1-for-in" class="headerlink" title="3.1 for in"></a>3.1 for in</h3><blockquote><p><code>for-in</code>循环实际是为循环”enumerable“对象而设计的，<code>for in</code>也可以循环数组，但是不推荐这样使用，<code>for–in</code>是用来循环带有字符串<code>key</code>的对象的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print:  "obj.a = 1" "obj.b = 2" "obj.c = 3"</span></span><br></pre></td></tr></table></figure><h3 id="3-2-for-of"><a href="#3-2-for-of" class="headerlink" title="3.2 for of"></a>3.2 for of</h3><blockquote><p><code>for of</code>为<code>ES6</code>提供，具有<code>iterator</code>接口，就可以用<code>for of</code>循环遍历它的成员</p></blockquote><ul><li><code>for of</code>循环可以使用的范围包括数组、<code>Set</code>和<code>Map</code>结构、某些类似数组的对象（比如<code>arguments</code>对象、<code>DOM NodeList</code>对象）、后文的<code>Generator</code>对象，以及字符串</li></ul><h4 id="3-2-1-entries"><a href="#3-2-1-entries" class="headerlink" title="3.2.1 entries"></a>3.2.1 entries</h4><blockquote><p><code>entries()</code> 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于<code>Set</code>，键名与键值相同。<code>Map</code>结构的<code>iterator</code>接口，默认就是调用<code>entries</code>方法</p></blockquote><h4 id="3-2-2-keys"><a href="#3-2-2-keys" class="headerlink" title="3.2.2 keys"></a>3.2.2 keys</h4><ul><li><code>keys()</code> 返回一个遍历器对象，用来遍历所有的键名。</li></ul><h4 id="3-2-3-values"><a href="#3-2-3-values" class="headerlink" title="3.2.3 values"></a>3.2.3 values</h4><ul><li><code>values()</code>返回一个遍历器对象，用来遍历所有的键值。 </li></ul><blockquote><p>这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print: 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line">obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print:  a 1 b 2 c 3</span></span><br><span class="line"><span class="comment">//说明：对于普通的对象，for...in循环可以遍历键名，for...of循环会报错。</span></span><br><span class="line"><span class="comment">//一种解决方法是，使用Object.keys方法将对象的键名生成一个数组，然后遍历这个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entries</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、String对象&quot;&gt;&lt;a href=&quot;#一、String对象&quot; class=&quot;headerlink&quot; title=&quot;一、String对象&quot;&gt;&lt;/a&gt;一、String对象&lt;/h2&gt;&lt;h3 id=&quot;1-1-slice&quot;&gt;&lt;a href=&quot;#1-1-slice&quot; c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="API" scheme="http://blog.poetries.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>持续集成 Travis CI</title>
    <link href="http://blog.poetries.top/2018/02/23/travis-ci/"/>
    <id>http://blog.poetries.top/2018/02/23/travis-ci/</id>
    <published>2018-02-23T04:12:08.000Z</published>
    <updated>2018-02-26T15:50:35.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h4 id="一、什么是持续集成？"><a href="#一、什么是持续集成？" class="headerlink" title="一、什么是持续集成？"></a>一、什么是持续集成？</h4><ul><li><code>Travis CI</code> 提供的是持续集成服务（<code>Continuous Integration</code>，简称 <code>CI</code>）。它绑定 <code>Github</code> 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</li><li>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</li><li>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码</li></ul><h4 id="二、-travis-yml"><a href="#二、-travis-yml" class="headerlink" title="二、.travis.yml"></a>二、.travis.yml</h4><blockquote><p>Travis 要求项目的根目录下面，必须有一个<code>.travis.yml</code>文件。这是配置文件，指定了 <code>Travis</code> 的行为。该文件必须保存在 <code>Github</code> 仓库里面，一旦代码仓库有新的 <code>Commit</code>，<code>Travis</code>就会去找这个文件，执行里面的命令</p></blockquote><ul><li>这个文件采用 <code>YAML</code> 格式。下面是一个最简单的 <code>Python</code> 项目的<code>.travis.yml</code>文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line">script: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>language</code>字段指定了默认运行环境，这里设定使用 <code>Python</code> 环境</li><li><code>script</code>字段指定要运行的脚本，<code>script: true</code>表示不执行任何脚本，状态直接设为成功</li></ul><p><strong>面是一个稍微复杂一点的.travis.yml</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">language: python</span><br><span class="line">sudo: required</span><br><span class="line">before_install: sudo pip install foo</span><br><span class="line">script: py.test</span><br></pre></td></tr></table></figure><h4 id="三、运行流程"><a href="#三、运行流程" class="headerlink" title="三、运行流程"></a>三、运行流程</h4><ul><li><code>Travis</code> 的运行流程很简单，任何项目都会经过两个阶段<ul><li><code>install</code>  阶段：安装依赖</li><li><code>script</code> 阶段：运行脚本</li></ul></li></ul><h5 id="3-1-install-阶段"><a href="#3-1-install-阶段" class="headerlink" title="3.1 install 阶段"></a>3.1 install 阶段</h5><blockquote><p><code>install</code>字段用来指定安装脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install: ./install-dependencies.sh</span><br></pre></td></tr></table></figure><ul><li>如果有多个脚本，可以写成下面的形式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">  - command1</span><br><span class="line">  - command2</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 上面代码中，如果`command1`失败了，整个构建就会停下来，不再往下进行。</span><br><span class="line">- 如果不需要安装，即跳过安装阶段，就直接设为`true`。</span><br></pre></td></tr></table></figure><p>install: true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 3.2、script 字段</span><br><span class="line"></span><br><span class="line">- script字段用来指定构建或测试脚本</span><br></pre></td></tr></table></figure></p><p>script: bundle exec thor build<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果有多个脚本，可以写成下面的形式</span><br></pre></td></tr></table></figure></p><p>script:</p><ul><li>command1</li><li>command2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **注意**，`script`与`install`不一样，如果`command1`失败，`command2`会继续执行。但是，整个构建阶段的状态是失败。如果`command2`只有在`command1`成功后才能执行，就要写成下面这样。</span><br></pre></td></tr></table></figure></li></ul><p>script: command1 &amp;&amp; command2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##### 3.3 实例：Node 项目</span><br><span class="line"></span><br><span class="line">- `Node` 项目的环境需要写成下面这样</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - &quot;8&quot;</span><br></pre></td></tr></table></figure></p><ul><li>上面代码中，<code>node_js</code>字段用来指定 <code>Node</code> 版本。</li><li><code>Node</code> 项目的<code>install</code>和<code>script</code>阶段都有默认脚本，可以省略<ul><li><code>install</code>默认值：<code>npm install</code></li><li><code>script</code>默认值：<code>npm test</code></li></ul></li></ul><h5 id="3-4-部署"><a href="#3-4-部署" class="headerlink" title="3.4 部署"></a>3.4 部署</h5><ul><li><code>script</code>阶段结束以后，还可以设置<a href="https://docs.travis-ci.com/user/notifications/" target="_blank" rel="noopener">通知步骤（notification）</a>和<a href="https://docs.travis-ci.com/user/deployment/" target="_blank" rel="noopener">部署步骤</a>（deployment），它们不是必须的</li></ul><blockquote><p>部署的脚本可以在<code>script</code>阶段执行，也可以使用 <code>Travis</code> 为几十种常见服务提供的快捷部署功能。比如，要部署到 <code>Github Pages</code>，可以写成下面这样</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip_cleanup: <span class="literal">true</span></span><br><span class="line">  github_token: <span class="variable">$GITHUB_TOKEN</span> <span class="comment"># Set in travis-ci.org dashboard</span></span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.travis-ci.com/user/deployment/" target="_blank" rel="noopener">其他部署方式</a></li></ul><h5 id="3-5-钩子方法"><a href="#3-5-钩子方法" class="headerlink" title="3.5 钩子方法"></a>3.5 钩子方法</h5><blockquote><p><code>Travis</code> 为上面这些阶段提供了7个钩子</p></blockquote><ul><li><code>before_install</code>：install 阶段之前执行</li><li><code>before_script</code>：script 阶段之前执行</li><li><code>after_failure</code>：script 阶段失败时执行</li><li><code>after_success</code>：script 阶段成功时执行</li><li><code>before_deploy</code>：deploy 步骤之前执行</li><li><code>after_deploy</code>：deploy 步骤之后执行</li><li><code>after_script</code>：script 阶段之后执行</li></ul><blockquote><p>完整的生命周期，从开始到结束是下面的流程</p></blockquote><ul><li><code>before_install</code></li><li><code>install</code></li><li><code>before_script</code></li><li><code>script</code></li><li><code>aftersuccess or afterfailure</code></li><li><code>[OPTIONAL] before_deploy</code></li><li><code>[OPTIONAL] deploy</code></li><li><code>[OPTIONAL] after_deploy</code></li><li><p><code>after_script</code></p></li><li><p>下面是一个before_install钩子的例子</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">  - sudo apt-get -qq update</span><br><span class="line">  - sudo apt-get install -y libxml2-dev</span><br></pre></td></tr></table></figure><blockquote><p>上面代码表示<code>before_install</code>阶段要做两件事，第一件事是要更新依赖，第二件事是安装<code>libxml2-dev</code>。用到的几个参数的含义如下：-qq表示减少中间步骤的输出，-y表示如果需要用户输入，总是输入yes</p></blockquote><h5 id="3-6-运行状态"><a href="#3-6-运行状态" class="headerlink" title="3.6 运行状态"></a>3.6 运行状态</h5><ul><li>最后，<code>Travis</code> 每次运行，可能会返回四种状态<ul><li><code>passed</code>：运行成功，所有步骤的退出码都是0</li><li><code>canceled</code>：用户取消执行</li><li><code>errored</code>：<code>before_install</code>、<code>install</code>、<code>before_script</code>有非零退出码，运行会立即停止</li><li><code>failed</code> ：<code>script</code>有非零状态码 ，会继续运行</li></ul></li></ul><h4 id="四、使用技巧"><a href="#四、使用技巧" class="headerlink" title="四、使用技巧"></a>四、使用技巧</h4><h5 id="4-1-环境变量"><a href="#4-1-环境变量" class="headerlink" title="4.1 环境变量"></a>4.1 环境变量</h5><ul><li><code>.travis.yml</code>的env字段可以定义环境变量,然后，脚本内部就使用这些变量了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line">  - DB=postgres</span><br><span class="line">  - SH=bash</span><br><span class="line">  - PACKAGE_VERSION=<span class="string">"1.0.*"</span></span><br></pre></td></tr></table></figure><blockquote><p>有些环境变量（比如用户名和密码）不能公开，这时可以通过 Travis 网站，写在每个仓库的设置页里面，Travis 会自动把它们加入环境变量。这样一来，脚本内部依然可以使用这些环境变量，但是只有管理员才能看到变量的值,<a href="https://docs.travis-ci.com/user/environment-variables" target="_blank" rel="noopener">具体操作文档</a></p></blockquote><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017121903.png" alt=""></p><h5 id="4-2-加密信息"><a href="#4-2-加密信息" class="headerlink" title="4.2 加密信息"></a>4.2 加密信息</h5><ul><li>如果不放心保密信息明文存在 <code>Travis</code> 的网站，可以使用 <code>Travis</code> 提供的加密功能</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、什么是持续集成？&quot;&gt;&lt;a href=&quot;#一、什么是持续集成？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是持续集成？&quot;&gt;&lt;/a&gt;一、什么是持续集成？&lt;/h4&gt;
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Travis CI" scheme="http://blog.poetries.top/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>pm2用法之ecosystem部署nodejs项目</title>
    <link href="http://blog.poetries.top/2018/02/22/pm2-ecosystem-deploy/"/>
    <id>http://blog.poetries.top/2018/02/22/pm2-ecosystem-deploy/</id>
    <published>2018-02-22T09:12:08.000Z</published>
    <updated>2018-02-26T15:50:35.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、node项目部署流程"><a href="#一、node项目部署流程" class="headerlink" title="一、node项目部署流程"></a>一、node项目部署流程</h2><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/bushu-1.png" alt=""><br><img src="http://7xq6al.com1.z0.glb.clouddn.com/bushu-2.png" alt=""><br><img src="http://7xq6al.com1.z0.glb.clouddn.com/bushu-3.png" alt=""></p><h2 id="二、配置部署脚本文件"><a href="#二、配置部署脚本文件" class="headerlink" title="二、配置部署脚本文件"></a>二、配置部署脚本文件</h2><blockquote><p>在项目根目录添加<code>pm2</code>的部署脚本文件 <code>ecosystem.json</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"apps"</span>: [</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"movie"</span>, <span class="comment">//对应Nginx上的配置</span></span><br><span class="line">        <span class="string">"script"</span>: <span class="string">"app.js"</span>, <span class="comment">//入口文件</span></span><br><span class="line">        <span class="string">"env"</span>: &#123;</span><br><span class="line">            <span class="string">"COMON_VARIABLE"</span>: <span class="string">"true"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"env_production"</span>: &#123;</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deploy"</span>: &#123;</span><br><span class="line">        <span class="string">"production"</span>: &#123;</span><br><span class="line">            <span class="string">"user"</span>: <span class="string">"poetries"</span>, <span class="comment">//Nginx服务器上的username</span></span><br><span class="line">            <span class="string">"host"</span>: [<span class="string">"120.120.14.21"</span>], <span class="comment">// 服务器地址</span></span><br><span class="line">            <span class="string">"port"</span>: <span class="string">"3922"</span>,</span><br><span class="line">            <span class="string">"ref"</span>: <span class="string">"origin/master"</span>, <span class="comment">//从指定的分支拉取代码</span></span><br><span class="line">            <span class="string">"repo"</span>: <span class="string">"git@github.com:poetries/poetries.github.io.git"</span>,</span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"/www/movie/production"</span>,<span class="comment">//发布到服务器指定的目录下</span></span><br><span class="line">            <span class="string">"ssh_options"</span>: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">            <span class="comment">//构建在发布</span></span><br><span class="line">            <span class="string">"post-deploy"</span>: <span class="string">"npm install --registry=https://registry.npm.taobao.org &amp;&amp; grunt build &amp;&amp; pm2 startOrRestart ecosystem.json --env production"</span>,</span><br><span class="line">            <span class="string">"env"</span>: &#123;</span><br><span class="line">                <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、配置Nginx的server"><a href="#三、配置Nginx的server" class="headerlink" title="三、配置Nginx的server"></a>三、配置Nginx的server</h2><blockquote><p>在<code>nginx</code>安装目录下的<code>vhost</code>中新建一个<code>xx-3000.conf</code>的配置文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">upstream movie &#123; <span class="comment">// website项目的目录名称</span></span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>; <span class="comment">// 服务器上的本地启动入口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置server</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name movie.poetries.top; <span class="comment">//指向的域名</span></span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Nginx-<span class="built_in">Proxy</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        proxy_pass http:<span class="comment">//movie; // 对应上面的目录</span></span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理静态资源</span></span><br><span class="line">    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt) &#123;</span><br><span class="line">        root /www/movie/public; <span class="comment">//静态资源路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、开启防火墙"><a href="#四、开启防火墙" class="headerlink" title="四、开启防火墙"></a>四、开启防火墙</h2><blockquote><p>Ubuntu的设置</p></blockquote><ul><li>打开 <code>sudo vi /etc/iptables.up.rules</code></li><li>生效 <code>sudo iptables-restore &lt; /etc/iptables.up.rules</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># movie</span></span><br><span class="line">-A INPUT -s 127.0.0.1 -p tcp --destination-port 3001 -m state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A OUTPUT -s 127.0.0.1 -p tcp --destination-port 3001 -m state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="五、部署命令"><a href="#五、部署命令" class="headerlink" title="五、部署命令"></a>五、部署命令</h2><ul><li><code>pm2 deploy ecosystem.json production setup</code> 初始化</li><li><code>pm2 deploy ecosystem.json production</code> 部署</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、node项目部署流程&quot;&gt;&lt;a href=&quot;#一、node项目部署流程&quot; class=&quot;headerlink&quot; title=&quot;一、node项目部署流程&quot;&gt;&lt;/a&gt;一、node项目部署流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>梳理Immutable常用API</title>
    <link href="http://blog.poetries.top/2018/02/04/immutable-api/"/>
    <id>http://blog.poetries.top/2018/02/04/immutable-api/</id>
    <published>2018-02-04T08:10:24.000Z</published>
    <updated>2018-02-26T15:50:35.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、fromJS"><a href="#一、fromJS" class="headerlink" title="一、fromJS"></a>一、fromJS</h2><ul><li>作用：是最最常用的将原生JS数据转换为<code>ImmutableJS</code>数据的转换方法,默认将原生<code>JS</code>的<code>Array</code>转为<code>List</code>，<code>Object</code>转为<code>Map</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS(&#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    c: <span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 得到</span></span><br><span class="line"><span class="built_in">Map</span> &#123;</span><br><span class="line">  <span class="string">"a"</span>: <span class="built_in">Map</span> &#123;</span><br><span class="line">    <span class="string">"b"</span>: List [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">"c"</span>: <span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见</span></span><br><span class="line"><span class="keyword">const</span> t1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="keyword">const</span> t2 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定制转换方式，下这种就是将Array转换为List，Object转换为Map</span></span><br><span class="line">    <span class="keyword">const</span> isIndexed = Immutable.Iterable.isIndexed(value);</span><br><span class="line">    <span class="keyword">return</span> isIndexed ? value.toList() : value.toOrderedMap();</span><br><span class="line">    <span class="comment">// true, "b", &#123;b: [10, 20, 30]&#125;</span></span><br><span class="line">    <span class="comment">// false, "a", &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;</span></span><br><span class="line">    <span class="comment">// false, "", &#123;"": &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br></pre></td></tr></table></figure><h2 id="二、toJS"><a href="#二、toJS" class="headerlink" title="二、toJS"></a>二、toJS</h2><ul><li>作用：将一个<code>Immutable</code>数据转换为<code>JS</code>类型的数据</li><li>用法：<code>value.toJS()</code></li></ul><h2 id="三、is"><a href="#三、is" class="headerlink" title="三、is"></a>三、is</h2><ul><li>作用：对两个对象进行比较</li><li>用法：<code>is(map1,map2)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line">map1 === map2   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(map1, map2) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">is(map1, map2) <span class="comment">//  true 只检测值是否相等</span></span><br></pre></td></tr></table></figure><h2 id="四、List-和-Map"><a href="#四、List-和-Map" class="headerlink" title="四、List 和 Map"></a>四、List 和 Map</h2><h3 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1 创建"></a>4.1 创建</h3><ul><li><code>List</code> 有序索引密集的集合，和<code>JS</code>中的<code>Array</code>很像 </li><li><code>Map</code> 无序索引集，类似<code>JavaScript</code>中的<code>Object</code></li></ul><h3 id="4-2-判断"><a href="#4-2-判断" class="headerlink" title="4.2 判断"></a>4.2 判断</h3><ul><li><code>List.isList()</code> 和 <code>Map.isMap()</code> 判断一个数据结构是不是<code>List/Map</code>类型</li></ul><h3 id="4-3-长度"><a href="#4-3-长度" class="headerlink" title="4.3 长度"></a>4.3 长度</h3><h4 id="4-3-1-size-获取List-Map的长度"><a href="#4-3-1-size-获取List-Map的长度" class="headerlink" title="4.3.1 size 获取List/Map的长度**"></a>4.3.1 <code>size</code> 获取<code>List/Map</code>的长度**</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).size);<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).size);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).size);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).size);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-count"><a href="#4-3-2-count" class="headerlink" title="4.3.2 count()"></a>4.3.2 count()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以定制条件，来确定大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).count(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 1 value大于3的有两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以制定条件，来确定 大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 2 大于3的有两个</span></span><br></pre></td></tr></table></figure><h3 id="4-4-数据读取"><a href="#4-4-数据读取" class="headerlink" title="4.4 数据读取"></a>4.4 数据读取</h3><h4 id="4-4-1-get-、-getIn"><a href="#4-4-1-get-、-getIn" class="headerlink" title="4.4.1 get() 、 getIn()"></a>4.4.1 <code>get() 、 getIn()</code></h4><blockquote><p>获取数据结构中的数据</p></blockquote><h4 id="4-4-2-has-、-hasIn"><a href="#4-4-2-has-、-hasIn" class="headerlink" title="4.4.2 has() 、 hasIn()"></a>4.4.2 <code>has() 、 hasIn()</code></h4><blockquote><p>判断是否存在某一个<code>key</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).hasIn([<span class="number">3</span>,<span class="string">'b'</span>]) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-3-includes"><a href="#4-4-3-includes" class="headerlink" title="4.4.3 includes()"></a>4.4.3 <code>includes()</code></h4><blockquote><p>判断是否存在某一个<code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="string">'2'</span>); <span class="comment">//false 不包含字符2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;) <span class="comment">//false</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-4-first-、-last"><a href="#4-4-4-first-、-last" class="headerlink" title="4.4.4 first() 、 last()"></a>4.4.4 <code>first() 、 last()</code></h4><blockquote><p>用来获取第一个元素或者最后一个元素，若没有则返回<code>undefined</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).first()<span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).last()<span class="comment">//&#123;a:4,b:5&#125;</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//&#123;d:3,e:4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-数据修改"><a href="#4-5-数据修改" class="headerlink" title="4.5 数据修改"></a>4.5 数据修改</h3><h4 id="4-5-1-set"><a href="#4-5-1-set" class="headerlink" title="4.5.1 set()"></a>4.5.1 <code>set()</code></h4><blockquote><p>设置第一层<code>key</code>、<code>index</code>的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="built_in">Map</span></span><br><span class="line"><span class="comment">// 将 key 位置的元素替换为 value</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'a'</span>, <span class="number">0</span>).toJS()); <span class="comment">// &#123;a: 0, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'e'</span>, <span class="number">99</span>).toJS());  <span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444, e: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 将 index 位置的元素替换为 value，即使索引越界也是安全的, 空位 undefined</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">-1</span>, <span class="number">0</span>).toJS()); <span class="comment">// [1, 2, 0]  注意-1 等效于 $arr1.set($arr1.size + -1, 0)</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">4</span>, <span class="number">0</span>).toJS());  <span class="comment">// [ 1, 2, 3, undefined, 0 ]  空位置为了undefined</span></span><br></pre></td></tr></table></figure><h4 id="4-5-2-setIn"><a href="#4-5-2-setIn" class="headerlink" title="4.5.2 setIn()"></a>4.5.2 <code>setIn()</code></h4><blockquote><p>设置深层结构中某属性的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="4-5-3-deleteIn"><a href="#4-5-3-deleteIn" class="headerlink" title="4.5.3 deleteIn()"></a>4.5.3 <code>deleteIn()</code></h4><blockquote><p>用来删除深层数据，用法参考<code>setIn</code></p></blockquote><h4 id="4-5-4-更新-update"><a href="#4-5-4-更新-update" class="headerlink" title="4.5.4 更新 update()"></a>4.5.4 <code>更新 update()</code></h4><blockquote><p>对对象中的某个属性进行更新，可对原数据进行相关操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////List</span></span><br><span class="line"><span class="keyword">const</span> list = List([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="keyword">const</span> result = list.update(<span class="number">2</span>, val =&gt; val.toUpperCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">///Map</span></span><br><span class="line"><span class="keyword">const</span> aMap = <span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> newMap = aMap.update(<span class="string">'key'</span>, value =&gt; value + value)</span><br></pre></td></tr></table></figure><h4 id="4-5-5-clear"><a href="#4-5-5-clear" class="headerlink" title="4.5.5 clear()"></a>4.5.5 <code>clear()</code></h4><blockquote><p>清除所有数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;).clear()  <span class="comment">//Map</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).clear()   <span class="comment">// List</span></span><br></pre></td></tr></table></figure><h3 id="4-6-List中的删除与插入"><a href="#4-6-List中的删除与插入" class="headerlink" title="4.6 List中的删除与插入"></a>4.6 List中的删除与插入</h3><h4 id="4-6-1-数组方法"><a href="#4-6-1-数组方法" class="headerlink" title="4.6.1 数组方法"></a>4.6.1 数组方法</h4><blockquote><p><code>List</code>对应的数据结构是<code>js</code>中的数组，所以数组的一些方法在<code>Immutable</code>中也是通用的，比如<code>push</code>，<code>pop</code>,<code>shift</code>，<code>unshift</code>，<code>insert</code></p></blockquote><ul><li><code>push()</code>：在<code>List</code>末尾插入一个元素</li><li><code>pop()</code>: 在<code>List</code>末尾删除一个元素</li><li><code>unshift</code>: 在<code>List</code>首部插入一个元素</li><li><code>shift</code>: 在<code>List</code>首部删除一个元素</li><li><code>insert</code>：在<code>List</code>的<code>index</code>处插入元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).insert(<span class="number">6</span>, <span class="number">5</span>) <span class="comment">//List [ 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).push(<span class="number">5</span>) <span class="comment">// List [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).pop() <span class="comment">// List[ 1, 2, 3 ]</span></span><br><span class="line">List([ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).unshift(<span class="number">1</span>) <span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).shift() <span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><h3 id="4-7-关于merge"><a href="#4-7-关于merge" class="headerlink" title="4.7 关于merge"></a>4.7 关于merge</h3><ul><li><code>merge</code> 浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，旧数据中已存在的属性用新数据中的覆盖</li><li><code>mergrWith</code> 自定义浅合并，可自行设置某些属性的值</li><li><code>mergeIn</code> 对深层数据进行浅合并</li><li><code>mergeDeep</code> 深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</li><li><code>mergeDeepIn</code>  对深层数据进行深合并</li><li><code>mergrDeepWith</code>  自定义深合并，可自行设置某些属性的值</li></ul><blockquote><p>这里用一段示例彻底搞懂<code>merge</code>，此示例为<code>Map</code>结构，<code>List</code>与<code>Map</code>原理相同</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">333</span>,<span class="attr">e</span>:<span class="number">444</span>&#125;&#125;);</span><br><span class="line"> <span class="keyword">const</span> Map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">e</span>:<span class="number">444</span>,<span class="attr">f</span>:<span class="number">555</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> Map3 = Map1.merge(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map4 = Map1.mergeDeep(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map5 = Map1.mergeWith(<span class="function">(<span class="params">oldData,newData,key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'a'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-序列算法"><a href="#4-8-序列算法" class="headerlink" title="4.8 序列算法"></a>4.8 序列算法</h3><h4 id="4-8-1-concat"><a href="#4-8-1-concat" class="headerlink" title="4.8.1 concat()"></a>4.8.1 <code>concat()</code></h4><blockquote><p>对象的拼接，用法与<code>js</code>数组中的<code>concat()</code>相同，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = list1.concat(list2)</span><br></pre></td></tr></table></figure><h4 id="4-8-2-map"><a href="#4-8-2-map" class="headerlink" title="4.8.2 map()"></a>4.8.2 <code>map()</code></h4><blockquote><p>遍历整个对象，对<code>Map/List</code>元素进行操作，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function"><span class="params">val</span>=&gt;</span><span class="number">10</span>*val)</span><br><span class="line"><span class="comment">//Map&#123;a:10,b:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-3-mapKey"><a href="#4-8-3-mapKey" class="headerlink" title="4.8.3 mapKey()"></a>4.8.3 mapKey()</h4><blockquote><p><code>Map</code>特有的<code>mapKey()</code> 遍历整个对象，对<code>Map</code>元素的<code>key</code>进行操作，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).mapKey(<span class="function"><span class="params">val</span>=&gt;</span>val+<span class="string">'l'</span>)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-4-mapEntries"><a href="#4-8-4-mapEntries" class="headerlink" title="4.8.4 mapEntries"></a>4.8.4 mapEntries</h4><blockquote><p><code>Map特有的mapEntries()</code>  遍历整个对象，对<code>Map</code>元素的<code>key</code>和<code>value</code>同时进行操作，返回一个新的对象。<code>Map</code>的<code>map()</code>也可实现此功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [key+<span class="string">'l'</span>,val*<span class="number">10</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-5-filter"><a href="#4-8-5-filter" class="headerlink" title="4.8.5 filter"></a>4.8.5 filter</h4><blockquote><ul><li><code>过滤 filter</code> 返回一个新的对象，包括所有满足过滤条件的元素</li><li>还有一个<code>filterNot()</code>方法，与此方法正好相反</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).filter(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;b:2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-6-reverse"><a href="#4-8-6-reverse" class="headerlink" title="4.8.6 reverse"></a>4.8.6 reverse</h4><blockquote><p>作用：将数据的结构进行反转</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).reverse(); <span class="comment">// List [5,4,3,2,1]</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">2</span>,<span class="attr">d</span>:<span class="number">3</span>&#125;,<span class="attr">e</span>:<span class="number">4</span>&#125;).recerse();</span><br><span class="line"><span class="comment">//Map &#123;e:4,b:&#123;c:2,d:3&#125;,a:1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-7-sort-amp-sortBy"><a href="#4-8-7-sort-amp-sortBy" class="headerlink" title="4.8.7 sort &amp; sortBy"></a>4.8.7 sort &amp; sortBy</h4><blockquote><p><code>排序 sort &amp; sortBy</code> 作用：对数据结构进行排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///List</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort()</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]).sortBy(<span class="function">(<span class="params">val,index,obj</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a,b)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//List  [ &#123;a:3&#125;, &#123;a:2&#125;, &#123;a:4&#125;, &#123;a:1&#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort()</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-8-groupBy"><a href="#4-8-8-groupBy" class="headerlink" title="4.8.8 groupBy"></a>4.8.8 groupBy</h4><blockquote><p><code>分组 groupBy</code>  作用：对数据进行分组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listOfMaps = List([</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">2</span> &#125;)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> groupsOfMaps = listOfMaps.groupBy(<span class="function"><span class="params">x</span> =&gt;</span> x.get(<span class="string">'v'</span>))</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   0: List [ Map&#123; "v": 0 &#125;, Map &#123; "v": 0 &#125; ],</span></span><br><span class="line"><span class="comment">//   1: List [ Map&#123; "v": 1 &#125;, Map &#123; "v": 1 &#125; ],</span></span><br><span class="line"><span class="comment">//   2: List [ Map&#123; "v": 2 &#125; ],</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-9-查找数据"><a href="#4-9-查找数据" class="headerlink" title="4.9 查找数据"></a>4.9 查找数据</h3><h4 id="4-9-1-indexOf-lastIndexOf"><a href="#4-9-1-indexOf-lastIndexOf" class="headerlink" title="4.9.1 indexOf lastIndexOf"></a>4.9.1 indexOf lastIndexOf</h4><blockquote><p>Map不存在此方法 和<code>js</code>数组中的方法相同，查找第一个或者最后一个<code>value</code>的<code>index</code>值，找不到则返回<code>-1</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).indexof(<span class="number">3</span>) <span class="comment">//2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastIndexof(<span class="number">3</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4 id="4-9-2-findIndex-、-findLastIndex"><a href="#4-9-2-findIndex-、-findLastIndex" class="headerlink" title="4.9.2 findIndex() 、 findLastIndex()"></a>4.9.2 <code>findIndex() 、 findLastIndex()</code></h4><blockquote><p><code>Map</code>不存在此方法,查找满足要求的元素的<code>index</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)   <span class="comment">// 1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-9-3-find-、-findLast"><a href="#4-9-3-find-、-findLast" class="headerlink" title="4.9.3 find() 、 findLast()"></a>4.9.3 <code>find() 、 findLast()</code></h4><blockquote><p>查找满足条件的元素的<code>value</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).find(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLast(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="4-9-4-findKey-、-findLastKey"><a href="#4-9-4-findKey-、-findLastKey" class="headerlink" title="4.9.4 findKey() 、 findLastKey()"></a>4.9.4 <code>findKey() 、 findLastKey()</code></h4><blockquote><p>查找满足条件的元素的<code>key</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-9-5-findEntry-、-findLastEntry"><a href="#4-9-5-findEntry-、-findLastEntry" class="headerlink" title="4.9.5 findEntry() 、 findLastEntry()"></a>4.9.5 <code>findEntry() 、 findLastEntry()</code></h4><blockquote><p>查找满足条件的元素的键值对 <code>key:value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-9-6-keyOf-lastKeyOf"><a href="#4-9-6-keyOf-lastKeyOf" class="headerlink" title="4.9.6 keyOf() lastKeyOf()"></a>4.9.6 <code>keyOf() lastKeyOf()</code></h4><blockquote><p>查找某一个<code>value</code>对应的<code>key</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).keyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastKeyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="4-9-7-max-、-maxBy"><a href="#4-9-7-max-、-maxBy" class="headerlink" title="4.9.7 max() 、 maxBy()"></a>4.9.7 <code>max() 、 maxBy()</code></h4><blockquote><p>查找最大值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).max() <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).maxBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-9-8-min-、-minBy"><a href="#4-9-8-min-、-minBy" class="headerlink" title="4.9.8 min() 、 minBy()"></a>4.9.8 <code>min() 、 minBy()</code></h4><blockquote><p>查找最小值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).min() <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).minBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-10-创建子集"><a href="#4-10-创建子集" class="headerlink" title="4.10 创建子集"></a>4.10 创建子集</h3><h4 id="4-10-1-slice"><a href="#4-10-1-slice" class="headerlink" title="4.10.1 slice()"></a>4.10.1 <code>slice()</code></h4><blockquote><p>和原生<code>js</code>中数组的<code>slice</code>数组一样，包含两个参数，<code>start</code>和<code>end</code>，<code>start</code>代表开始截取的位置，<code>end</code>代表结束的位置，不包括第<code>end</code>的元素。若不包括<code>end</code>，则返回整个对象，若<code>end</code>为负数，则返回（<code>start</code>，<code>length-end</code>）对应的数据。若<code>start</code>只有一个并且为负数，则返回最后的<code>end</code>个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//[1,2]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">-2</span>); <span class="comment">//[3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">-2</span>); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-2-rest"><a href="#4-10-2-rest" class="headerlink" title="4.10.2 rest()"></a>4.10.2 <code>rest()</code></h4><blockquote><p>返回除第一个元素之外的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-3butLast"><a href="#4-10-3butLast" class="headerlink" title="4.10.3butLast()"></a>4.10.3<code>butLast()</code></h4><blockquote><p>返回除最后一个元素之外的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-4-skip"><a href="#4-10-4-skip" class="headerlink" title="4.10.4 skip()"></a>4.10.4 <code>skip()</code></h4><blockquote><p>有一个参数<code>n</code>, 返回截掉前<code>n</code>个元素之后剩下的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-5-skipLast"><a href="#4-10-5-skipLast" class="headerlink" title="4.10.5 skipLast()"></a>4.10.5 <code>skipLast()</code></h4><blockquote><p>有一个参数<code>n</code>, 返回截掉最后n个元素之后剩下的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-6-skipWhile"><a href="#4-10-6-skipWhile" class="headerlink" title="4.10.6 skipWhile()"></a>4.10.6 <code>skipWhile()</code></h4><blockquote><p>返回从第一次返回<code>false</code>之后的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2,3,4]</span></span><br><span class="line">skipUntil()</span><br></pre></td></tr></table></figure><h4 id="4-10-7-take"><a href="#4-10-7-take" class="headerlink" title="4.10.7 take()"></a>4.10.7 <code>take()</code></h4><blockquote><p>有一个参数n, 返回前n个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).take(<span class="number">2</span>)<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-8-takeLast"><a href="#4-10-8-takeLast" class="headerlink" title="4.10.8 takeLast()"></a>4.10.8 <code>takeLast()</code></h4><blockquote><p>有一个参数n, 返回最后n个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).takeLast(<span class="number">2</span>)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-9-takeWhile"><a href="#4-10-9-takeWhile" class="headerlink" title="4.10.9 takeWhile()"></a>4.10.9 <code>takeWhile()</code></h4><blockquote><p>返回从第一次返回<code>false</code>之前的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.takeWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// []</span></span><br><span class="line">takeUntil()</span><br></pre></td></tr></table></figure><h3 id="4-11-处理数据"><a href="#4-11-处理数据" class="headerlink" title="4.11 处理数据"></a>4.11 处理数据</h3><h4 id="4-11-1-reduce"><a href="#4-11-1-reduce" class="headerlink" title="4.11.1 reduce()"></a>4.11.1 <code>reduce()</code></h4><blockquote><p>和<code>js</code>中数组中的<code>reduce</code>相同,按索引升序的顺序处理元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduce(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3 6 10</span></span><br></pre></td></tr></table></figure><h4 id="4-11-2-reduceRight"><a href="#4-11-2-reduceRight" class="headerlink" title="4.11.2 reduceRight()"></a>4.11.2 <code>reduceRight()</code></h4><blockquote><p>和<code>js</code>中数组中的<code>reduce</code>相同,按索引降序的顺序处理元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduceRight(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 7 9 10</span></span><br></pre></td></tr></table></figure><h4 id="4-11-3-every"><a href="#4-11-3-every" class="headerlink" title="4.11.3 every()"></a>4.11.3 <code>every()</code></h4><blockquote><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回`true，反之返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).every(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4-11-4-some"><a href="#4-11-4-some" class="headerlink" title="4.11.4 some()"></a>4.11.4 <code>some()</code></h4><blockquote><p>判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).some(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4-11-5-join"><a href="#4-11-5-join" class="headerlink" title="4.11.5 join()"></a>4.11.5 <code>join()</code></h4><blockquote><p>作用：同<code>js</code>中数组的<code>join</code>方法。把转换为字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).join(<span class="string">','</span>) <span class="comment">//1,2,3,4</span></span><br></pre></td></tr></table></figure><h4 id="4-11-6-isEmpty"><a href="#4-11-6-isEmpty" class="headerlink" title="4.11.6 isEmpty()"></a>4.11.6 <code>isEmpty()</code></h4><blockquote><p>作用：判断是否为空</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([]).isEmpty(); <span class="comment">// true</span></span><br><span class="line">Immutable.fromJS(&#123;&#125;).isEmpty(); <span class="comment">// true</span></span><br><span class="line">count()</span><br></pre></td></tr></table></figure><h4 id="4-11-7-countBy"><a href="#4-11-7-countBy" class="headerlink" title="4.11.7 countBy()"></a>4.11.7 <code>countBy()</code></h4><blockquote><p>与<code>count</code>不同的是，<code>countBy</code>返回一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">list.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br><span class="line"></span><br><span class="line">map.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、fromJS&quot;&gt;&lt;a href=&quot;#一、fromJS&quot; class=&quot;headerlink&quot; title=&quot;一、fromJS&quot;&gt;&lt;/a&gt;一、fromJS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用：是最最常用的将原生JS数据转换为&lt;code&gt;ImmutableJS&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>VS Code折腾记</title>
    <link href="http://blog.poetries.top/2018/02/02/vsc-config/"/>
    <id>http://blog.poetries.top/2018/02/02/vsc-config/</id>
    <published>2018-02-02T03:40:43.000Z</published>
    <updated>2018-02-26T15:50:35.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VS-Code常用插件"><a href="#VS-Code常用插件" class="headerlink" title="VS Code常用插件"></a>VS Code常用插件</h2><ul><li><code>Auto Close Tag</code> （自动关闭HTML标签）</li><li><code>Auto Rename Tag</code> (HTML标签自动改名)</li><li><code>Babel ES6/ES7</code> </li><li><code>Beautify css/sass/scss/less</code></li><li><code>Brackets Light</code> (主题)</li><li><code>Complete JSDoc Tags</code> (js文档注释提示)</li><li><code>Git History</code> (查看git提交记录)</li><li><code>HTML CSS Support</code> (HTML中提示可用的class)</li><li><code>npm Intellisense</code> (提示可以require的模块名称)</li><li><code>One Dark Theme</code> (主题)</li><li><code>Path Intellisense</code> (路径补全)</li><li><code>Reactjs code snippets</code> (reactjs代码提示)</li><li><code>Sass</code></li><li><code>SCSS IntelliSense Preview</code>  SCSS智能提醒，配置强大</li><li><code>Sublime Babel</code></li><li><code>VSCode Great Icons</code> (文件图标)</li><li><code>vscode-icons</code> （文件图标）</li><li><code>Beautify</code> - HTML、CSS、JS、JSON语法高亮</li><li><code>Guides</code> - 代码对齐辅助线</li><li><code>OneDark</code>主题</li><li><code>JavaScript (ES6) Code Snippets</code> (代码片段插件)</li><li><code>Project Manager</code> (项目管理器插件) 简单的项目管理器,可以在你的编辑器中快速切换项目</li><li><code>Sync Settings</code> (设置同步插件)在电脑上移植你的插件和设置是轻而易举的事</li><li><code>Git History</code> (<code>Git</code> 历史记录插件) 可视化的 <code>Git</code> 历史记录插件</li><li><code>Document This</code> (<code>JSDoc</code>注释插件)</li><li><code>npm Intellisense</code> (npm 模块导入插件)</li><li><code>Align</code> (代码对齐插件)</li><li><code>amVim</code> (<code>vim</code> 插件)</li><li><code>Faker</code> 可以生成随机的名称，地址，图像，电话号码</li><li><code>Color Info</code> 颜色信息及转换 </li><li><code>SVG Viewer SVG</code>预览</li><li><code>TODO Highlight</code> TODO 高亮</li><li><code>Minify</code> 代码压缩 </li><li><code>Regex Previewer</code> 正则表达式预览</li><li><code>File Tree View</code>  提供几个常见编程语言的函数或状态的树集合展示,可以快速点击跳转!</li><li><code>JavaScript Test Runner Preview</code> 快速执行单元测试,支持 <code>Mocha</code> 和 <code>Jest</code></li><li><code>NPM-Scripts</code> 在侧边栏可视化执行 <code>npm</code> 命令(项目内的 <code>package.json</code>)</li><li><code>colorize</code>会给颜色代码增加一个当前匹配代码颜色的背景</li><li><code>vscode-fake</code>——生成各种假数据类型。（姓名，电话）</li><li><code>vscode-CSS Peek</code>——<code>class</code>类定义跳转</li><li><code>vscode-Git Lens</code>—–增强<code>vscode</code>的<code>git</code>管理工具</li><li><code>vscode-Live Server</code>—–<code>http</code>服务器（相当于使用<code>nodejs</code>的<code>http-server</code> ）</li><li><code>EditorConfig for VS Code EditorConfig</code> 插件</li><li><code>Emoji</code> 在代码中输入<code>emoji</code></li><li><code>File Peek</code> 根据路径字符串，快速定位到文件</li><li><code>Font-awesome codes for html FontAwesome</code>提示代码段</li><li><code>Guides</code> 高亮缩进基准线</li><li><code>JavaScript (ES6) code snippets ES6</code>语法代码段</li><li><code>language-stylus Stylus</code>语法高亮和提示</li><li><code>Lodash Lodash</code>代码段</li><li><code>Prettify JSON</code> 格式化<code>JSON</code></li><li><code>Test Spec Generator</code> 测试用例生成（支持<code>chai</code>、<code>should</code>、<code>jasmine</code>）</li><li><code>vetur</code> 目前比较好的<code>Vue</code>语法高亮</li><li><code>cssrem</code> css值转rem插件</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"workbench.activityBar.visible"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">    <span class="attr">"window.menuBarVisibility"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"cssrem.rootFontSize"</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Atom One Dark"</span>,</span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"liveServer.settings.donotShowInfoMsg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.cursorStyle"</span>: <span class="string">"block"</span>,</span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"Fira Code"</span>,</span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.lineHeight"</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"editor.lineNumbers"</span>: <span class="string">"on"</span>,</span><br><span class="line">    <span class="attr">"editor.rulers"</span>: [</span><br><span class="line">        <span class="number">120</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"auto-close-tag.SublimeText3Mode"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"vsicons.dontShowNewVersionMessage"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"javascript.implicitProjectConfig.experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"Scss2Css.compileAfterSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"fileheader.Author"</span>: <span class="string">"poetryxie"</span>,</span><br><span class="line">    <span class="attr">"fileheader.LastModifiedBy"</span>: <span class="string">"poetryxie"</span>,</span><br><span class="line">    <span class="attr">"todohighlight.isEnable"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">    <span class="attr">"explorer.confirmDragAndDrop"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">        <span class="attr">"suppressCommitHasNoPreviousCommitWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressCommitNotFoundWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressFileNotUnderSourceControlWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressGitVersionWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressLineUncommittedWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressNoRepositoryWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressUpdateNotice"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressWelcomeNotice"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体美化"><a href="#字体美化" class="headerlink" title="字体美化"></a>字体美化</h2><p>下载链接 <a href="https://pan.baidu.com/s/1jJHRgF0" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJHRgF0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VS-Code常用插件&quot;&gt;&lt;a href=&quot;#VS-Code常用插件&quot; class=&quot;headerlink&quot; title=&quot;VS Code常用插件&quot;&gt;&lt;/a&gt;VS Code常用插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Auto Close Tag&lt;/code&gt; 
      
    
    </summary>
    
      <category term="Tools" scheme="http://blog.poetries.top/categories/Tools/"/>
    
    
      <category term="VS Code" scheme="http://blog.poetries.top/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript工程项目的一系列最佳实践</title>
    <link href="http://blog.poetries.top/2018/01/28/js-perfect-rules/"/>
    <id>http://blog.poetries.top/2018/01/28/js-perfect-rules/</id>
    <published>2018-01-28T12:36:43.000Z</published>
    <updated>2018-02-26T15:50:35.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h2><h3 id="1-1-一些Git规则"><a href="#1-1-一些Git规则" class="headerlink" title="1.1 一些Git规则"></a>1.1 一些Git规则</h3><blockquote><p>这里有一套规则要牢记</p></blockquote><p><strong>在功能分支中执行开发工作</strong></p><ul><li>因为这样，所有的工作都是在专用的分支而不是在主分支上隔离完成的。它允许您提交多个 <code>pull request</code> 而不会导致混乱。您可以持续迭代提交，而不会使得那些很可能还不稳定而且还未完成的代码污染 <code>master</code> 分支</li></ul><p><strong>从 <code>develop</code> 独立出分支</strong></p><ul><li>这样，您可以保持 <code>master</code> 分支中的代码稳定性，这样就不会导致构建问题，并且几乎可以直接用于发布</li></ul><p><strong>永远也不要将分支（直接）推送到 develop 或者 master<br>，请使用合并请求（Pull Request）</strong></p><ul><li>通过这种方式，它可以通知整个团队他们已经完成了某个功能的开发。这样开发伙伴就可以更容易对代码进行 code review，同时还可以互相讨论所提交的需求功能</li></ul><p><strong>在推送所开发的功能并且发起合并请求前，请更新您本地的develop分支并且完成交互式变基操作（interactive rebase）</strong></p><ul><li>ebase 操作会将（本地开发分支）合并到被请求合并的分支（ master 或 develop ）中，并将您本地进行的提交应用于所有历史提交的最顶端，而不会去创建额外的合并提交（假设没有冲突的话），从而可以保持一个漂亮而干净的历史提交记录</li></ul><p><strong>请确保在变基并发起合并请求之前解决完潜在的冲突</strong></p><ul><li>合并分支后删除本地和远程功能分支<ul><li>如果不删除需求分支，大量僵尸分支的存在会导致分支列表的混乱。而且该操作还能确保有且仅有一次合并到master 或 develop。只有当这个功能还在开发中时对应的功能分支才存在</li></ul></li></ul><p><strong>在进行合并请求之前，请确保您的功能分支可以成功构建，并已经通过了所有的测试（包括代码规则检查）</strong></p><ul><li>因为您即将将代码提交到这个稳定的分支。而如果您的功能分支测试未通过，那您的目标分支的构建有很大的概率也会失败。此外，确保在进行合并请求之前应用代码规则检查。因为它有助于我们代码的可读性，并减少格式化的代码与实际业务代码更改混合在一起导致的混乱问题</li></ul><p><strong>使用 这个 <code>.gitignore</code>文件</strong></p><ul><li>此文件已经囊括了不应该和您开发的代码一起推送至远程仓库（remote repository）的系统文件列表。另外，此文件还排除了大多数编辑器的设置文件夹和文件，以及最常见的（工程开发）依赖目录</li></ul><p><strong>保护您的 develop 和 master 分支</strong></p><ul><li>这样可以保护您的生产分支免受意外情况和不可回退的变更</li></ul><h3 id="1-2-Git-工作流"><a href="#1-2-Git-工作流" class="headerlink" title="1.2 Git 工作流"></a>1.2 Git 工作流</h3><blockquote><p>基于以上原因, 我们将 功能分支工作流 ， 交互式变基的使用方法 结合一些 Gitflow中的基础 (比如，命名和使用一个develop branch)一起使用。 主要步骤如下</p></blockquote><p><strong>针对一个新项目, 在您的项目目录初始化您的项目。 如果是（已有项目）随后的功能开发/代码变动，这一步请忽略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;项目目录&gt;</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>检出（Checkout） 一个新的功能或故障修复（feature/bug-fix）分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p><strong>新增代码变更</strong></p><blockquote><p>git commit -a 会独立启动一个编辑器用来编辑您的说明信息，这样的好处是可以专注于写这些注释说明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit -a</span><br></pre></td></tr></table></figure><p><strong>（切换至功能分支并且）通过交互式变基从您的develop分支中获取最新的代码提交，以更新您的功能分支</strong></p><blockquote><p>您可以使用 –autosquash 将所有提交压缩到单个提交。没有人会愿意（看到） develop 分支中的单个功能开发就占据如此多的提交历史</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchname&gt;</span><br><span class="line">git rebase -i --autosquash develop</span><br></pre></td></tr></table></figure><p><strong>如果没有冲突请跳过此步骤，如果您有冲突, 就需要解决它们并且继续变基操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file1&gt; &lt;file2&gt; ...</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p><strong>推送您的（功能）分支。变基操作会改变提交历史, 所以您必须使用 -f 强制推送到远程（功能）分支。 如果其他人与您在该分支上进行协同开发，请使用破坏性没那么强的 –force-with-lease 参数</strong></p><blockquote><p>当您进行 rebase 操作时，您会改变功能分支的提交历史。这会导致 Git 拒绝正常的 git push 。那么，您只能使用 -f 或 –force 参数了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p><strong>提交一个合并请求（Pull Request）</strong></p><p><strong>Pull Request 会被负责代码审查的同事接受，合并和关闭</strong></p><p><strong>如果您完成了开发，请记得删除您的本地分支。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支&gt;</span><br></pre></td></tr></table></figure><p><strong>（使用以下代码）删除所有已经不在远程仓库维护的分支</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p &amp;&amp; <span class="keyword">for</span> branch <span class="keyword">in</span> <span class="string">`git branch -vv | grep ': gone]' | awk '&#123;print $1&#125;'`</span>; <span class="keyword">do</span> git branch -D $branch; done</span><br></pre></td></tr></table></figure><h3 id="1-3-如何写好-Commit-Message"><a href="#1-3-如何写好-Commit-Message" class="headerlink" title="1.3 如何写好 Commit Message"></a>1.3 如何写好 Commit Message</h3><blockquote><p>坚持遵循关于提交的标准指南，会让在与他人合作使用 Git 时更容易。这里有一些经验法则 </p></blockquote><p><strong>用新的空行将标题和主体两者隔开</strong></p><blockquote><p>Git 非常聪明，它可将您提交消息的第一行识别为摘要。实际上，如果您尝试使用 git shortlog ，而不是 git log ，您会看到一个很长的提交消息列表，只会包含提交的 id 以及摘要（，而不会包含主体部分）</p></blockquote><p><strong>将标题行限制为50个字符，并将主体中一行超过72个字符的部分折行显示</strong></p><blockquote><p>提交应尽可能简洁明了，而不是写一堆冗余的描述</p></blockquote><p><strong>标题首字母大写</strong></p><p><strong>不要用句号结束标题</strong></p><p><strong>使用主体部分去解释 是什么 和 为什么 而不是 怎么做</strong></p><h2 id="2-文档"><a href="#2-文档" class="headerlink" title="2. 文档"></a>2. 文档</h2><ul><li>可以使用这个 模板 作为 <a href="https://github.com/wearehive/project-guidelines/blob/master/README.sample.md" target="_blank" rel="noopener">README （的一个参考）</a></li><li>对于具有多个存储库的项目，请在各自的 README 文件中提供它们的链接</li><li>随项目的进展，持续地更新 README</li><li>给您的代码添加详细的注释，这样就可以清楚每个主要部分的含义</li><li>不要把注释作为坏代码的借口。保持您的代码干净整洁</li><li>也不要把那些清晰的代码作为不写注释的借口</li><li>当代码更新，也请确保注释的同步更新</li></ul><h2 id="3-环境"><a href="#3-环境" class="headerlink" title="3. 环境"></a>3. 环境</h2><p><strong>如果需要，请分别定义 development, test 和 production 三个环境</strong></p><blockquote><p>不同的环境可能需要不同的数据、token、API、端口等。您可能需要一个隔离的 development 环境，它调用 mock 的 API，mock 会返回可预测的数据，使自动和手动测试变得更加容易。或者您可能只想在 production 环境中才启用 Google Analytics（分析）</p></blockquote><p><strong>依据不同的环境变量加载部署的相关配置，不要将这些配置作为常量添加到代码库中</strong></p><blockquote><ul><li>您会有令牌，密码和其他有价值的信息。这些配置应正确地从应用程序内部分离开来，这样代码库就可以随时独立发布，不会包含这些敏感配置信息</li><li>怎么做： 使用 .env 文件来存储环境变量，并将其添加到 .gitignore 中使得排除而不被提交（到仓库）。另外，再提交一个 .env.example 作为开发人员的参考配置。对于生产环境，您应该依旧以标准化的方式设置环境变量</li></ul></blockquote><p><strong>建议您在应用程序启动之前校验一下环境变量</strong> </p><blockquote><p>它可能会将其他人从上小时的故障排查中解救</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> joi = <span class="built_in">require</span>(<span class="string">'joi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envVarsSchema = joi.object(&#123;  </span><br><span class="line">  NODE_ENV: joi.string()</span><br><span class="line">    .valid([<span class="string">'development'</span>, <span class="string">'production'</span>, <span class="string">'test'</span>, <span class="string">'provision'</span>])</span><br><span class="line">    .required(),</span><br><span class="line">  PORT: joi.number()</span><br><span class="line">    .required(),</span><br><span class="line">  LOGGER_LEVEL: joi.string()</span><br><span class="line">    .valid([<span class="string">'error'</span>, <span class="string">'warn'</span>, <span class="string">'info'</span>, <span class="string">'verbose'</span>, <span class="string">'debug'</span>, <span class="string">'silly'</span>])</span><br><span class="line">    .default(<span class="string">'info'</span>),</span><br><span class="line">  LOGGER_ENABLED: joi.boolean()</span><br><span class="line">    .truthy(<span class="string">'TRUE'</span>)</span><br><span class="line">    .truthy(<span class="string">'true'</span>)</span><br><span class="line">    .falsy(<span class="string">'FALSE'</span>)</span><br><span class="line">    .falsy(<span class="string">'false'</span>)</span><br><span class="line">    .default(<span class="literal">true</span>)</span><br><span class="line">&#125;).unknown()</span><br><span class="line">  .required()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; error, <span class="attr">value</span>: envVars &#125; = joi.validate(process.env, envVarsSchema)  </span><br><span class="line"><span class="keyword">if</span> (error) &#123;  </span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Config validation error: <span class="subst">$&#123;error.message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;  </span><br><span class="line">  env: envVars.NODE_ENV,</span><br><span class="line">  isTest: envVars.NODE_ENV === <span class="string">'test'</span>,</span><br><span class="line">  isDevelopment: envVars.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">  logger: &#123;</span><br><span class="line">    level: envVars.LOGGER_LEVEL,</span><br><span class="line">    enabled: envVars.LOGGER_ENABLED</span><br><span class="line">  &#125;,</span><br><span class="line">  server: &#123;</span><br><span class="line">    port: envVars.PORT</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h3 id="3-1-一致的开发环境"><a href="#3-1-一致的开发环境" class="headerlink" title="3.1 一致的开发环境"></a>3.1 一致的开发环境</h3><p><strong>在 package.json 里的 engines 中设置您的node版本</strong></p><ul><li>让其他人可以清晰的知道这个项目中用的什么node版本</li></ul><p><strong>另外，使用 nvm 并在您的项目根目录下创建一个 .nvmrc 文件。不要忘了在文档中标注</strong></p><blockquote><p>任何使用nvm的人都可以使用 nvm use 来切换到合适的node版本</p></blockquote><p><strong>最好设置一个检查 <code>node</code> 和 <code>npm</code> 版本的 <code>preinstall</code> 脚本</strong></p><blockquote><p>某些依赖项可能会在新版本的 npm 中安装失败。</p></blockquote><p><strong>如果可以的话最好使用 Docker 镜像</strong></p><blockquote><p>它可以在整个工作流程中为您提供一致的环境，而且不用花太多的时间来解决依赖或配置</p></blockquote><p><strong>使用本地模块，而不是使用全局安装的模块</strong></p><blockquote><p>您不能指望您的同事在自己的全局环境都安装了相应的模块，本地模块可以方便您分享您的工具</p></blockquote><h3 id="3-2-依赖一致性"><a href="#3-2-依赖一致性" class="headerlink" title="3.2 依赖一致性"></a>3.2 依赖一致性</h3><p><strong>确保您的团队成员获得与您完全相同的依赖。</strong></p><blockquote><ul><li>因为您希望代码在任何开发环境中运行都能像预期的一样</li><li>在<code>npm@5</code>或者更高版本中使用 <code>package-lock.json</code></li></ul></blockquote><ul><li><p>我们没有 <code>npm@5</code></p><ul><li>或者，您可以使用 <code>yarn</code> ，并确保在 <code>README.md</code> 中标注了使用 yarn 。您的锁文件和<code>package.json</code>在每次依赖关系更新后应该具有相同的版本</li></ul></li><li><p>我不太喜欢 <code>Yarn</code></p><ul><li>不喜欢 <code>Yarn</code>，太糟糕了。对于旧版本的<code>npm</code>，在安装新的依赖关系时使用 <code>-save --save-exact</code> ，并在发布之前创建<code>npm-shrinkwrap.json</code></li></ul></li></ul><h2 id="4-依赖"><a href="#4-依赖" class="headerlink" title="4. 依赖"></a>4. 依赖</h2><p><strong>持续跟踪您当前的可用依赖包: 举个例子, <code>npm ls --depth=0</code></strong></p><p><strong>查看这些软件包是否未使用或者与开发项目无关: depcheck</strong></p><blockquote><p>您可能会在代码中包含未使用的库，这会增大生产包的大小。请搜索出这些未使用的依赖关系并去掉它们吧</p></blockquote><p><strong>在使用依赖之前，请检查他的下载统计信息，看看它是否被社区大量使用： npm-stat</strong></p><blockquote><p>更多的使用量很大程度上意味着更多的贡献者，这通常意味着拥有更好的维护，这些能确保错误能够被快速地发现并修复</p></blockquote><p><strong>在使用依赖之前，请检查它是否具有良好而成熟的版本发布频率与大量的维护者：例如， npm view async</strong></p><blockquote><p>如果维护者没有足够快地合并修补程序，那么这些贡献者也将会变得不积极不高效</p></blockquote><p><strong>如果需要使用那些不太熟悉的依赖包，请在使用之前与团队进行充分讨论</strong></p><p><strong>始终确保您的应用程序在最新版本的依赖包上面能正常运行，而不是无法使用：npm outdated</strong></p><blockquote><p>依赖关系更新有时包含破坏性更改。当显示需要更新时，请始终先查看其发行说明。并逐一地更新您的依赖项，如果出现任何问题，可以使故障排除更容易。可以使用类似 npm-check-updates 的酷炫工具</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p><strong>如果需要，请构建一个 test 环境.</strong></p><blockquote><p>虽然有时在 production 模式下端到端测试可能看起来已经足够了，但有一些例外：比如您可能不想在生产环境下启用数据分析功能，只能用测试数据来填充（污染）某人的仪表板。另一个例子是，您的API可能在 production 中才具有速率限制，并在请求达到一定量级后会阻止您的测试请求</p></blockquote><p><strong>将测试文件放在使用 <em> .test.js 或 </em> .spec.js 命名约定的测试模块，比如 moduleName.spec.js</strong></p><blockquote><p>您肯定不想进入一个层次很深的文件夹结构来查找里面的单元测试</p></blockquote><p><strong>将其他测试文件放入独立的测试文件夹中以避免混淆</strong></p><blockquote><p>一些测试文件与任何特定的文件实现没有特别的关系。您只需将它放在最有可能被其他开发人员找到的文件夹中：<strong>test</strong> 文件夹。这个名字：<strong>test</strong>也是现在的标准，被大多数JavaScript测试框架所接受</p></blockquote><p><strong>编写可测试代码，避免副作用（side effects），提取副作用，编写纯函数</strong></p><ul><li>您想要将业务逻辑拆分为单独的测试单元。您必须“尽量减少不可预测性和非确定性过程对代码可靠性的影响”</li><li>纯函数是一种总是为相同的输入返回相同输出的函数。相反地，不纯的函数是一种可能会有副作用，或者取决于来自外部的条件来决定产生对应的输出值的函数。这使得它不那么可预测</li></ul><p><strong>使用静态类型检查器</strong></p><ul><li>有时您可能需要一个静态类型检查器。它为您的代码带来一定程度的可靠性</li></ul><p><strong>先在本地 develop 分支运行测试，待测试通过后，再进行pull请求</strong></p><ul><li>您不想成为一个导致生产分支构建失败的人吧。在您的rebase之后运行测试，然后再将您改动的功能分支推送到远程仓库。</li></ul><p><strong>记录您的测试，包括在 README 文件中的相关说明部分</strong></p><ul><li>这是您为其他开发者或者 DevOps 专家或者 QA 或者其他如此幸运能和您一起协作的人留下的便捷笔记</li></ul><h2 id="6-结构布局与命名"><a href="#6-结构布局与命名" class="headerlink" title="6. 结构布局与命名"></a>6. 结构布局与命名</h2><p><strong>请围绕产品功能/页面/组件，而不是围绕角色来组织文件。此外，请将测试文件放在他们对应实现的旁边</strong></p><ul><li>不规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── controllers</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── user.js</span><br><span class="line">├── models</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── user.js</span><br></pre></td></tr></table></figure><ul><li>规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── product</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── product.test.js</span><br><span class="line">├── user</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── user.js</span><br><span class="line">|   └── user.test.js</span><br></pre></td></tr></table></figure><blockquote><p>比起一个冗长的列表文件，创建一个单一责权封装的小模块，并在其中包括测试文件。将会更容易浏览，更一目了然</p></blockquote><p><strong>将其他测试文件放在单独的测试文件夹中以避免混淆</strong></p><ul><li>这样可以节约您的团队中的其他开发人员或DevOps专家的时间</li></ul><p><strong>使用 ./config 文件夹，不要为不同的环境制作不同的配置文件。</strong></p><blockquote><p>当您为不同的目的（数据库，API等）分解不同的配置文件;将它们放在具有容易识别名称（如 config ）的文件夹中才是有意义的。请记住不要为不同的环境制作不同的配置文件。这样并不是具有扩展性的做法，如果这样，就会导致随着更多应用程序部署被创建出来，新的环境名称也会不断被创建，非常混乱。 配置文件中使用的值应通过环境变量提供</p></blockquote><p><strong>将脚本文件放在./scripts文件夹中。包括 bash 脚本和 node 脚本。</strong></p><ul><li>很可能最终会出现很多脚本文件，比如生产构建，开发构建，数据库feeders，数据库同步等</li></ul><p><strong>将构建输出结果放在./build文件夹中。将build/添加到.gitignore中以便忽略此文件夹</strong></p><blockquote><p>命名为您最喜欢的就行，dist看起来也蛮酷的。但请确保与您的团队保持一致性。放置在该文件夹下的东西应该是已经生成（打包、编译、转换）或者被移到这里的。您产生什么编译结果，您的队友也可以生成同样的结果，所以没有必要将这些结果提交到远程仓库中。除非您故意希望提交上去。</p></blockquote><p><strong>文件名和目录名请使用 PascalCase camelCase 风格。组件请使用 PascalCase 风格</strong></p><p><strong>CheckBox/index.js 应该代表 CheckBox 组件，也可以写成 CheckBox.js ，但是不能写成冗长的 CheckBox/CheckBox.js 或 checkbox/CheckBox.js</strong></p><p><strong>理想情况下，目录名称应该和 index.js 的默认导出名称相匹配。</strong></p><ul><li>这样您就可以通过简单地导入其父文件夹直接使用您预期的组件或模块</li></ul><h2 id="7-代码风格"><a href="#7-代码风格" class="headerlink" title="7. 代码风格"></a>7. 代码风格</h2><h3 id="7-1-若干个代码风格指导"><a href="#7-1-若干个代码风格指导" class="headerlink" title="7.1 若干个代码风格指导"></a>7.1 若干个代码风格指导</h3><p><strong>对新项目请使用 Stage2 和更高版本的 JavaScript（现代化）语法。对于老项目，保持与老的语法一致，除非您打算把老的项目也更新为现代化风格</strong></p><ul><li>这完全取决于您的选择。我们使用转换器来使用新的语法糖。Stage2更有可能最终成为规范的一部分，而且仅仅只需经过小版本的迭代就会成为规范</li></ul><p><strong>在构建过程中包含代码风格检查</strong></p><ul><li>在构建时中断下一步操作是一种强制执行代码风格检查的方法。强制您认真对待代码。请确保在客户端和服务器端代码都执行代码检查</li></ul><p><strong>使用 ESLint - Pluggable JavaScript linter 去强制执行代码检查</strong></p><ul><li>我们个人很喜欢 eslint ，不强制您也喜欢。它拥有支持更多的规则，配置规则的能力和添加自定义规则的能力</li></ul><p><strong>针对 JavaScript 我们使用Airbnb JavaScript Style Guide , 更多请阅读。 请依据您的项目和您的团队选择使用所需的JavaScript 代码风格</strong></p><p><strong>当使用FlowType的时候，我们使用 ESLint的Flow样式检查规则。</strong></p><ul><li>Flow 引入了很少的语法，而这些语法仍然需要遵循代码风格并进行检查</li></ul><p><strong>使用 .eslintignore 将某些文件或文件夹从代码风格检查中排除</strong></p><ul><li>当您需要从风格检查中排除几个文件时，就再也不需要通过 eslint-disable 注释来污染您的代码了</li></ul><p><strong>在Pull Request之前，请删除任何 eslint 的禁用注释</strong></p><ul><li>在处理代码块时禁用风格检查是正常现象，这样就可以关注在业务逻辑。请记住把那些 eslint-disable 注释删除并遵循风格规则</li></ul><p><strong>根据任务的大小使用 //TODO： 注释或做一个标签（ticket）</strong></p><blockquote><p>这样您就可以提醒自己和他人有这样一个小的任务需要处理（如重构一个函数或更新一个注释）。对于较大的任务，可以使用由一个lint规则（no-warning-comments）强制要求其完成（并移除注释）的//TODO（＃3456），其中的#3456号码是一个标签（ticket），方便查找且防止相似的注释堆积导致混乱</p></blockquote><p><strong>随着代码的变化，始终保持注释的相关性。删除那些注释掉的代码块</strong></p><ul><li>代码应该尽可能的可读，您应该摆脱任何分心的事情。如果您在重构一个函数，就不要注释那些旧代码，直接把要注释的代码删除吧</li></ul><p><strong>避免不相关的和搞笑的的注释，日志或命名</strong></p><p><strong>请使用有意义容易搜索的命名，避免缩写名称。对于函数使用长描述性命名。功能命名应该是一个动词或动词短语，需要能清楚传达意图的命名。</strong></p><p><strong>依据《代码整洁之道》的step-down规则，对您的源代码文件中的函数（的声明）进行组织。高抽象级别的函数（调用了低级别函数的函数）在上，低抽象级别函数在下，（保证了阅读代码时遇到未出现的函数仍然是从上往下的顺序，而不会打断阅读顺序地往前查找并且函数的抽象层次依次递减）。</strong></p><h3 id="7-2-强制的代码风格标准"><a href="#7-2-强制的代码风格标准" class="headerlink" title="7.2 强制的代码风格标准"></a>7.2 强制的代码风格标准</h3><p><strong>让您的编辑器提示您关于代码风格方面的错误。 请将 <a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener">eslint-plugin-prettier</a> 与 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener">eslint-config-prettier</a> 和您目前的ESLint配置一起搭配使用</strong></p><p><strong>考虑使用Git钩子</strong></p><ul><li>Git的钩子能大幅度地提升开发者的生产力。在做出改变、提交、推送至暂存区或者生产环境的过程中（充分检验代码），再也不需要担心（推送的代码会导致）构建失败</li></ul><p><strong>将Git的precommit钩子与Prettier结合使用</strong></p><blockquote><p>虽然prettier自身已经非常强大，但是每次将其作为单独的一个npm任务去格式化代码，并不是那么地高效。 这正是lint-staged（还有husky）可以解决的地方。关于如何配置 lint-staged 请阅读这里 以及如何配置 husky 请阅读</p></blockquote><h2 id="8-日志"><a href="#8-日志" class="headerlink" title="8. 日志"></a>8. 日志</h2><p><strong>避免在生产环境中使用客户端的控制台日志</strong></p><ul><li>您在构建过程可以把（应该）它们去掉，但是请确保您在代码风格检查中提供了有关控制台日志的警告信息。</li></ul><p><strong>产出生产环境的可读生产日志记录。一般使用在生产模式下所使用的日志记录库 (比如 winston 或者 node-bunyan)。</strong></p><blockquote><p>它通过添加着色、时间戳、log到控制台或者文件中，甚至是夜以继日地轮流log到文件，来减少故障排除中那些令人不愉快的事情。</p></blockquote><h2 id="9-API"><a href="#9-API" class="headerlink" title="9. API"></a>9. API</h2><h3 id="9-1-API-设计"><a href="#9-1-API-设计" class="headerlink" title="9.1 API 设计"></a>9.1 API 设计</h3><ul><li>因为我们试图实施开发出结构稳健的 Restful 接口，让团队成员和客户可以简单而一致地使用它们</li><li>缺乏一致性和简单性会大大增加集成和维护的成本。这就是为什么API设计这部分会包含在这个文档中的原因</li></ul><p><strong>我们主要遵循资源导向的设计方式。它有三个主要要素：资源，集合和 URLs</strong></p><ul><li>资源具有数据，嵌套，和一些操作方法。</li><li>一组资源称为一个集合。</li><li><code>URL</code>标识资源或集合的线上位置</li></ul><blockquote><p>这是针对开发人员（您的主要API使用者）非常著名的设计方式。除了可读性和易用性之外，它还允许我们在无需了解API细节的情况下编写通用库和一些连接器</p></blockquote><ul><li>使用<code>kebab-case</code>（短横线分割）的<code>URL</code>。</li><li>在查询字符串或资源字段中使用<code>camelCase</code>模式。</li><li>在URL中使用多个<code>kebab-case</code>作为资源名称。</li><li>总是使用复数名词来命名指向一个集合的<code>url：/users</code></li></ul><blockquote><p>基本上，它可读性会更好，并可以保持URL的一致性。</p></blockquote><p><strong>在源代码中，将复数转换为具有列表后缀名描述的变量和属性</strong></p><blockquote><p>复数形式的URL非常好，但在源代码中使用它却很微妙而且容易出错，所以要小心谨慎。</p></blockquote><p><strong>坚持这样一个概念：始终以集合名起始并以标识符结束</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/students/<span class="number">245743</span></span><br><span class="line">/airports/kjfk</span><br></pre></td></tr></table></figure><p><strong>避免这样的网址</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /blogs/:blogId/posts/:postId/summary</span><br></pre></td></tr></table></figure><p><strong>这不是在指向资源，而是在指向属性。您完全可以将属性作为参数传递，以减少响应</strong></p><p><strong>URLs里面请尽量少用动词</strong></p><blockquote><p>因为如果您为每个资源操作使用一个动词，您很快就会维护一个很大的URL列表，而且没有一致的使用模式，这会使开发人员难以学习。此外，我们还要使用动词做别的事情</p></blockquote><p><strong>为非资源型请求使用动词。在这种情况下，您的API并不需要返回任何资源。而是去执行一个操作并返回执行结果。这些不是 CRUD（创建，查询，更新和删除）操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/translate?text=Hallo</span><br></pre></td></tr></table></figure><blockquote><p>因为对于 CRUD，我们在资源或集合URL上使用 HTTP 自己带的方法。我们所说的动词实际上是指Controllers。您通常不会开发这些东西</p></blockquote><p><strong>请求体或响应类型如果是JSON，那么请遵循camelCase规范为JSON属性命名来保持一致性</strong></p><blockquote><p>这是一个 JavaScript 项目指南，其中用于生成JSON的编程语言以及用于解析JSON的编程语言被假定为 JavaScript</p></blockquote><p><strong>如何使用HTTP方法来操作CRUD功能</strong></p><ul><li><code>GET</code>: 查询资源的表示法</li><li><code>POST</code>: 创建一些新的资源或者子资源</li><li><code>PUT</code>: 更新一个存在的资源</li><li><code>PATCH</code>: 更新现有资源。它只更新所提供的字段，不管其他字段</li><li><code>DELETE</code>: 删除一个存在的资源</li></ul><p><strong>对于嵌套资源，请在URL中把他们的关系表现出来。例如，使用id将员工与公司联系起来</strong></p><blockquote><p>这是一种自然的方式，方便资源的认知</p></blockquote><ul><li><code>GET /schools/2/students</code> , 应该从学校2得到所有学生的名单</li><li><code>GET /schools/2/students/31</code> , 应该得到学生31的详细信息，且此学生属于学校2</li><li><code>DELETE /schools/2/students/31</code> , 应删除属于学校2的学生31</li><li><code>PUT /schools/2/students/31</code> , 应该更新学生31的信息，仅在资源URL上使用PUT方式，而不要用收集</li><li><code>POST /schools</code> , 应该创建一所新学校，并返回创建的新学校的细节。在集合<code>URL</code>上使用<code>POST</code></li></ul><p><strong>对于具有v前缀（v1，v2）的版本，使用简单的序数。并将其移到URL的左侧，使其具有最高的范围表述</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//api.domain.com/v1/schools/3/students</span></span><br></pre></td></tr></table></figure><blockquote><p>当您的 API 为第三方公开时，升级API会导致发生一些意料之外的影响，也可能导致使用您API的人无法使用您的服务和产品。而这时使用URL中版本化可以防止这种情况的发生</p></blockquote><p><strong>响应消息必须是自我描述的。一个很好的错误消息响应可能如下所示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">1234</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Something bad happened"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"More details"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>或验证错误:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span> : <span class="number">2314</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Validation Failed"</span>,</span><br><span class="line">    <span class="string">"errors"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"code"</span> : <span class="number">1233</span>,</span><br><span class="line">            <span class="string">"field"</span> : <span class="string">"email"</span>,</span><br><span class="line">            <span class="string">"message"</span> : <span class="string">"Invalid email"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"code"</span> : <span class="number">1234</span>,</span><br><span class="line">            <span class="string">"field"</span> : <span class="string">"password"</span>,</span><br><span class="line">            <span class="string">"message"</span> : <span class="string">"No password provided"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开发人员在使用这些由API​​构建的应用程序时，难免会需要在故障排除和解决问题的关键时刻使用到这些精心设计的错误消息。好的错误消息设计能节约大量的问题排查时间</li><li>_注意：尽可能保持安全异常消息的通用性。例如，别说不正确的密码，您可以换成无效的用户名或密码，以免我们不知不觉地通知用户他的用户名确实是正确的，只有密码不正确。这会让用户很懵逼。</li></ul><p><strong>只使用这8个状态代码，并配合您自定义的响应描述来表述程序工作一切是否正常，客户端应用程序发生了什么错误或API发生错误</strong></p><ul><li><code>200 OK GET</code>, PUT 或 POST 请求响应成功.</li><li><code>201 Created</code> 标识一个新实例创建成功。当创建一个新的实例，请使用POST方法并返回201状态码。</li><li><code>304 Not Modified</code> 发现资源已经缓存在本地，浏览器会自动减少请求次数。</li><li><code>400 Bad Request</code> 请求未被处理，因为服务器不能理解客户端是要什么。</li><li><code>401 Unauthorized</code> 因为请求缺少有效的凭据，应该使用所需的凭据重新发起请求。</li><li><code>403 Forbidden</code> 意味着服务器理解本次请求，但拒绝授权。</li><li><code>404 Not Found</code> 表示未找到请求的资源。</li><li><code>500 Internal Server Error</code> 表示请求本身是有效，但由于某些意外情况，服务器无法实现，服务器发生了故障</li></ul><blockquote><p>大多数 API 提供程序仅仅只使用一小部分 HTTP 状态代码而已。例如，Google GData API 仅使用了10个状态代码，Netflix 使用了9个，而 Digg 只使用了8个。当然，这些响应作为响应主体的附加信息。一共有超过 70 个 HTTP 状态代码。然而，大多数开发者不可能全部记住这 70 个状态码。因此，如果您选择不常用的状态代码，您将使应用程序开发人员厌烦构建应用程序，然后您还要跑到维基百科上面找出您要告诉他们的内容，多累啊</p></blockquote><p><strong>在您的响应中提供资源的总数</strong></p><p><strong>接受limit和offset参数</strong></p><p><strong>还应考虑资源暴露的数据量。API消费者并不总是需要资源的完整表述。可以使用一个字段查询参数，该参数用逗号分隔的字段列表来包括</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /student?fields=id,name,age,class</span><br></pre></td></tr></table></figure><p><strong>分页，过滤和排序功能并不需要从所有资源一开始就要得到支持。记录下那些提供过滤和排序的资源</strong></p><h3 id="9-2-API-安全"><a href="#9-2-API-安全" class="headerlink" title="9.2 API 安全"></a>9.2 API 安全</h3><blockquote><p>这些是一些基本的安全最佳实践</p></blockquote><p><strong>除非通过安全的连接（HTTPS），否则不要只使用基本认证。不要在URL中传输验证令牌：GET /users/123?token=asdf….</strong></p><blockquote><p>因为令牌、用户ID和密码通过网络是明文传递的（它是base64编码，而base64是可逆编码），所以基本认证方案是不安全的</p></blockquote><p><strong>必须使用授权请求头在每个请求上发送令牌：Authorization: Bearer xxxxxx, Extra yyyyy</strong></p><p><strong>授权代码应该是短暂的</strong></p><p><strong>通过不响应任何HTTP请求来拒绝任何非TLS请求，以避免任何不安全的数据交换。响应403 Forbidden的HTTP请求。</strong></p><p><strong>考虑使用速率限制</strong></p><blockquote><p>保护您的API免受每小时数千次的机器人扫描威胁。您应该在早期就考虑实施流控</p></blockquote><p><strong>适当地设置HTTP请求头可以帮助锁定和保护您的Web应用程序</strong></p><p><strong>您的API应将收到的数据转换为规范形式，或直接拒绝响应，并返回400错误请求（400 Bad Request）的错误，并在其中包含有关错误或丢失数据的详细信息</strong></p><p><strong>所有通过Rest API交换的数据必须由API来校验</strong></p><p><strong>序列化JSON</strong></p><blockquote><p>JSON编码器的一个关键问题是阻止任意的可执行代码在浏览器或在服务器中（如果您用nodejs的话）执行。您必须使用适当的JSON序列化程序对用户输入的数据进行正确编码，以防止在浏览器上执行用户提供的输入，这些输入可能会包含恶意代码，而不是正常的用户数据</p></blockquote><p><strong>验证内容类型，主要使用application/*.json（Content-Type 头字段）</strong></p><blockquote><p>例如，接受application/x-www-form-urlencodedMIME类型可以允许攻击者创建一个表单并触发一个简单的POST请求。服务器不应该假定Content-Type。缺少Content-Type请求头或异常的Content-Type请求头，应该让服务器直接以4XX响应内容去拒绝请求</p></blockquote><h3 id="9-3-API-文档"><a href="#9-3-API-文档" class="headerlink" title="9.3 API 文档"></a>9.3 API 文档</h3><ul><li>在README.md模板为 API 填写 API Reference 段落。</li><li>尽量使用示例代码来描述 API 授权方法</li><li>解释 URL 的结构（仅 path，不包括根 URL），包括请求类型（方法）</li></ul><blockquote><p>对于每个端点（endpoint）说明</p></blockquote><p><strong>如果存在 URL 参数就使用 URL 参数，并根据URL中使用到的名称来指定它们</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Required: id=[integer]</span><br><span class="line">Optional: photo_id=[alphanumeric]</span><br></pre></td></tr></table></figure><p><strong>如果请求类型为 POST，请提供如何使用的示例。上述的URL参数规则在这也可以适用。分为可选和必需</strong></p><p><strong>响应成功，应该对应什么样的状态代码，返回了哪些数据？当人们需要知道他们的回调应该是期望的样子，这很有用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code: <span class="number">200</span></span><br><span class="line">Content: &#123; <span class="attr">id</span> : <span class="number">12</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>错误响应，大多数端点都存在许多失败的可能。从未经授权的访问到错误参数等。所有的（错误描述信息）都应该列在这里。虽然有可能会重复，但它却有助于防止别人的猜想（，减少使用时的排错时间）。例如</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">403</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Authentication failed"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"Invalid username or password"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用API​​设计工具，有很多开源工具可用于提供良好的文档</strong></p><h2 id="10-证书"><a href="#10-证书" class="headerlink" title="10. 证书"></a>10. 证书</h2><blockquote><p>确保您有权使用的这些资源。如果您使用其中的软件库，请记住先查询MIT，Apache或BSD（以更好地了解您所能够拥有的权限），但如果您打算修改它们，请查看许可证详细信息。图像和视频的版权可能会导致法律问题</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-Git&quot;&gt;&lt;a href=&quot;#1-Git&quot; class=&quot;headerlink&quot; title=&quot;1.Git&quot;&gt;&lt;/a&gt;1.Git&lt;/h2&gt;&lt;h3 id=&quot;1-1-一些Git规则&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="最佳实践" scheme="http://blog.poetries.top/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>editconfig配置</title>
    <link href="http://blog.poetries.top/2018/01/27/editconfig/"/>
    <id>http://blog.poetries.top/2018/01/27/editconfig/</id>
    <published>2018-01-27T14:48:24.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>在团队开发中，统一的代码格式是必要的。但是不同开发人员的代码风格不同，代码编辑工具的默认格式也不相同，这样就造成代码的<code>differ</code>。而<code>editorConfig</code>可以帮助开发人员在不同的编辑器和IDE中定义和维护一致的编码风格</p></blockquote><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h2><ul><li>一个<code>editorconfig</code>文件例子，用于设置<code>Python</code>和<code>JavaScript</code>行尾和缩进风格的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: http://EditorConfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line">[*.&#123;js,py&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 space indentation</span></span><br><span class="line">[*.py]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line">[*.js]</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br><span class="line"><span class="comment"># Indentation override for all JS under lib directory</span></span><br><span class="line">[lib/**.js]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches the exact files either package.json or .travis.yml</span></span><br><span class="line">[&#123;package.json,.travis.yml&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure><h2 id="安装editorconfig"><a href="#安装editorconfig" class="headerlink" title="安装editorconfig"></a>安装editorconfig</h2><blockquote><p>当打开一个文件时，<code>EditorConfig</code>插件会在打开文件的目录和其每一级父目录查找<code>.editorconfig</code>文件，直到有一个配置文件<code>root=true</code>。<code>EditorConfig</code>配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。</p></blockquote><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><blockquote><p><code>EditorConfig</code>文件使用INI格式。斜杠<code>(/)</code>作为路径分隔符，<code>#</code>或者<code>;</code>作为注释。<code>EditorConfig</code>文件使用<code>UTF-8</code>格式、<code>CRLF</code>或<code>LF</code>作为换行符</p></blockquote><p><strong>通配符</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配除/之外的任意字符串</td></tr><tr><td><code>**</code></td><td>匹配任意字符串</td></tr><tr><td><code>?</code></td><td>匹配任意单个字符</td></tr><tr><td><code>[name</code>]</td><td>匹配name字符</td></tr><tr><td><code>[!name]</code></td><td>匹配非name字符</td></tr><tr><td><code>{s1,s2,s3}</code></td><td>匹配任意给定的字符串(since 0.11.0)</td></tr></tbody></table><p><strong>属性</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>indent_style</code></td><td>设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。</td></tr><tr><td><code>indent_size</code></td><td>缩进的宽度，即列数，整数。如果indent_style为tab，则此属性默认为tab_width。</td></tr><tr><td><code>tab_width</code></td><td>设置tab的列数。默认是indent_size。</td></tr><tr><td><code>end_of_line</code></td><td>换行符，lf、cr和crlf</td></tr><tr><td><code>charset</code></td><td>编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。</td></tr><tr><td><code>trim_trailing_whitespace</code></td><td>设为true表示会除去换行行首的任意空白字符。</td></tr><tr><td><code>insert_final_newline</code></td><td>设为true表明使文件以一个空白行结尾</td></tr><tr><td><code>root</code></td><td>表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>下面以<code>sublime text</code>为例，测试<code>editorconfig</code>是否起作用。首先需要给<code>sublime</code>安装<code>EditorConfig</code>插件，然后在项目的根目录新建文件”<code>.editorconfig</code>“，内容如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: &lt;a onclick="javascript:pageTracker._trackPageview('/outgoing/EditorConfig.org');" href="http://EditorConfig.org"&gt;http://EditorConfig.org&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line">[*.&#123;js,html,css&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line">[*.js]</span><br><span class="line">indent_style = tab</span><br><span class="line">tab_width = 50</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在团队开发中，统一的代码格式是必要的。但是不同开发人员的代码风格不同，代码编辑工具的默认格式也不相同，这样就造成代
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="editconfig" scheme="http://blog.poetries.top/tags/editconfig/"/>
    
  </entry>
  
  <entry>
    <title>eslint 常用配置</title>
    <link href="http://blog.poetries.top/2018/01/27/eslint-config/"/>
    <id>http://blog.poetries.top/2018/01/27/eslint-config/</id>
    <published>2018-01-27T14:41:24.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// no-var</span></span><br><span class="line">    <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 要求或禁止 var 声明中的初始化</span></span><br><span class="line">    <span class="string">'init-declarations'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 强制使用单引号</span></span><br><span class="line">    <span class="string">'quotes'</span>: [<span class="string">'error'</span>, <span class="string">'single'</span>],</span><br><span class="line">    <span class="comment">// 要求或禁止使用分号而不是 ASI</span></span><br><span class="line">    <span class="string">'semi'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 禁止不必要的分号</span></span><br><span class="line">    <span class="string">'no-extra-semi'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 强制使用一致的换行风格</span></span><br><span class="line">    <span class="string">'linebreak-style'</span>: [<span class="string">'error'</span>, <span class="string">'unix'</span>],</span><br><span class="line">    <span class="comment">// 空格2个</span></span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>, &#123;<span class="string">'SwitchCase'</span>: <span class="number">1</span>&#125;],</span><br><span class="line">    <span class="comment">// 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></span><br><span class="line">    <span class="string">'array-bracket-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 在块级作用域外访问块内定义的变量是否报错提示</span></span><br><span class="line">    <span class="string">'block-scoped-var'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></span><br><span class="line">    <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123;<span class="string">'allowSingleLine'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 双峰驼命名格式</span></span><br><span class="line">    <span class="string">'camelcase'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号， </span></span><br><span class="line">    <span class="string">'comma-dangle'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 控制逗号前后的空格</span></span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123;<span class="string">'before'</span>: <span class="literal">false</span>, <span class="string">'after'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 控制逗号在行尾出现还是在行首出现</span></span><br><span class="line">    <span class="string">'comma-style'</span>: [<span class="number">2</span>, <span class="string">'last'</span>],</span><br><span class="line">    <span class="comment">// 圈复杂度</span></span><br><span class="line">    <span class="string">'complexity'</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></span><br><span class="line">    <span class="string">'computed-property-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// TODO 关闭 强制方法必须返回值，TypeScript强类型，不配置</span></span><br><span class="line">    <span class="comment">// 'consistent-return': 0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>更多配置规则说明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="eslint" scheme="http://blog.poetries.top/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>广告行业一些术语</title>
    <link href="http://blog.poetries.top/2018/01/27/ad-term/"/>
    <id>http://blog.poetries.top/2018/01/27/ad-term/</id>
    <published>2018-01-27T14:21:24.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、平台"><a href="#一、平台" class="headerlink" title="一、平台"></a>一、平台</h2><p><strong>DSP</strong></p><blockquote><p><code>DSP</code>广告简单来说主要涉及：广告主，媒体，访客</p></blockquote><ul><li><code>DSP</code>广告对接多个<code>Ad Exchange</code>，<code>Ad Exchange</code>中有大量的媒体广告位</li></ul><p><strong>DMP</strong></p><blockquote><p>Data-ManagementPlatform，数据管理平台</p></blockquote><ul><li><p>定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位</p></li><li><p>是把分散的数据进行整合纳入统一的技术平台</p></li></ul><h2 id="二、专业术语"><a href="#二、专业术语" class="headerlink" title="二、专业术语"></a>二、专业术语</h2><p><strong>信息流广告</strong></p><ul><li><p>信息流广告是目前移动APP上常见的广告形式之一</p><ul><li>简述特点如下<ul><li>出现位置：穿插在产品原有内容信息当中出现（包括当下社交平台的feeds，资讯新闻类产品的文章列表）</li><li>展现形式：常见的有文字图片加链接形式，现也有以视频流的形式播放出现</li><li>投放特点：基于用户行为以及平台上积累的大数据，精准投放；（包括用户在平台上的浏览、评论、分享等各种互动行为，了解用户偏好，匹配相关度高的广告）</li><li>收费形式：CPM（按展示次数收费）和CPC（按点击次数收费）为主</li></ul></li></ul></li><li><p>优点</p><ul><li>与原有内容融合在一起出现，在用户视觉焦点中，不容易被忽视</li><li>精准投放，转化率高</li><li>对用户的打扰性低</li><li>可以通过让用户参与互动（评论、分享、投票）等形式提升广告效果</li></ul></li></ul><h3 id="2-1-行业相关"><a href="#2-1-行业相关" class="headerlink" title="2.1 行业相关"></a>2.1 行业相关</h3><ul><li><strong>Rich Media 富媒体</strong>，这种应用采取了所有适合的最先进技术，以最好的传达广告主的信息，甚至与用户进行互动，如视频、flash广告等</li><li><strong>植入式广告</strong> 在电影或电视剧或者其它综艺节目插入相关的广告，如变形金刚，非诚勿扰等</li><li><strong>SEM</strong>：Search EngineMarketing的缩写，即搜索引擎营销</li><li><strong>SEO</strong>：SearchEngineOptimization的缩写，即搜索引擎优化</li><li><strong>EDM</strong>：Electronic Direct Marketing的缩写，就是电子邮件营销</li><li><strong>AdWords</strong>：Google的关键词竞价广告</li><li><strong>Banner</strong>：横幅广告</li><li><strong>Button</strong>：图标广告</li><li><strong>PR推广</strong>：软文推广</li><li><strong>Adertorial</strong>：软文广告的一种，即付费文章，故意设计成像一篇普通的文章</li><li><strong>Banner Ad</strong>：横幅广告，网页顶部、底部或者侧边的广告展示位置</li><li><strong>DSP展示广告</strong>：是<code>Demand-SidePlatform</code>的缩写，即需求方平台</li></ul><h3 id="2-2-计费相关"><a href="#2-2-计费相关" class="headerlink" title="2.2 计费相关"></a>2.2 计费相关</h3><ul><li><strong>CPS</strong>：<code>Cost Per Sales</code>的缩写，即销售分成</li><li><strong>CPA</strong>：<code>Cost Per Action</code>，每次动作成本</li><li><strong>CPM</strong>：<code>Cost Per Mille</code>，或者<code>Cost Per Thousand</code>，即每千人成本</li><li><strong>CPC</strong>：<code>Cost Per Click</code>，<code>Cost Per Thousand Click-Through</code>，即每点击成本</li><li><strong>CPR</strong>：<code>Cost Per Response</code>，即每回应成本</li><li><strong>CPP</strong>：<code>Cost Per Purchase</code>，即每购买成本</li><li><strong>UV</strong>：<code>Unique Vister</code>的缩写，独立访客</li><li><strong>PV</strong>：<code>page view</code>，即网站被浏览的总次数</li><li><strong>IP</strong>：即<code>internet protocol</code>,指独立<code>IP</code>数，一天内相同IP地址只被计算一次</li><li><strong>PR值</strong>：全称为<code>Pagerank</code>(网页级别)，是用于评测一个网页“重要性”的一种方法</li><li><strong>Alexa</strong>：<code>Alexa.com</code>是专门发布网站世界排名的网站，网站排名有两种：综合排名和分类排名</li><li><strong>Click</strong>：(点击量/点击次数)即<code>Click through</code>，用户点击广告的次数，评估广告效果的指标之一</li><li><strong>Click Rate</strong>：(点击率/点进率)即<code>Clickthrough-Rate</code>，即网络广告被点击的次数与访问次数的比例，即<code>clicks/impressions</code>.如果这个页面被访问了100次，而页面上的广告也被点击了20次，那么CTR为20%，CTR是评估广告效果的指标之一</li></ul><h3 id="2-3-转化相关"><a href="#2-3-转化相关" class="headerlink" title="2.3 转化相关"></a>2.3 转化相关</h3><ul><li><p><strong>ROI</strong> <code>Return OnInvestment</code>的缩写，投资报酬率</p></li><li><p><strong>CR转化率</strong> <code>Conversion Rate</code>的缩写，是指访问某一网站访客中，转化的访客占全部访客的比例</p></li><li><p><strong>二跳率</strong> 网站页面展开后，用户在页面上产生的首次点击被称为“二跳”，二跳的次数即为”二跳量”，二跳量与浏览量的比值称为页面的二跳率</p></li><li><p><strong>跳出率</strong> 跳出率是指浏览了一个页面就离开的用户占一组页面或一个页面访问次数的百分比</p></li><li><p><strong>人均访问页面</strong> <code>PV总和除以IP=人均访问页面</code>。人均访问页面<code>大于等于10</code>个，才算优质用户</p></li><li><p><strong>重复购买率</strong> 指消费者在网站中的重复购买次数</p></li><li><p><strong>客单价</strong> 是指每一个订单的平均购买商品金额，也就是平均交易金额</p></li></ul><h3 id="2-4-理论"><a href="#2-4-理论" class="headerlink" title="2.4 理论"></a>2.4 理论</h3><p><strong>马太效应：（Matthew Effect）</strong> </p><ul><li>指强者愈强、弱者愈弱、好的愈好，坏的愈坏，多的愈多，少的愈少的现象，广泛应用于社会心理学、教育、金融以及科学等众多领域。</li></ul><p><strong>羊群效应</strong></p><ul><li>指人们经常受到多数人影响，从而跟从大众的思想或行为，也被称为“从众效应”。人们会追随大众所同意的，将自己的意见默认否定，且不会主观上思考事件的意义。羊群效应是诉诸群众谬误的基础</li></ul><p><strong>霍桑效应</strong></p><ul><li>指那些意识到自己正在被别人观察的个人具有改变自己行为的倾向</li></ul><p><strong>病毒式营销</strong></p><ul><li>源于英文词汇viralmarketing。常用于进行网站推广、品牌推广等。利用的是用户口碑传播的原理，在互联网上，这种“口碑传播”更为方便，可以像病毒一样迅速蔓延，因此病毒性营销成为一种高效的信息传播方式，而且，由于这种传播是用户之间自发进行的，因此几乎是不需要费用的网络营销手段。</li></ul><p><strong>斯德哥尔摩综合征</strong></p><ul><li>指犯罪的被害者对于犯罪者产生情感，甚至反过来帮助犯罪者的一种情结。这个情感造成被害人对加害人产生好感、依赖心、甚至协助加害人。人质会对劫持者产生一种心理上的依赖感。他们的生死操控在劫持者手里，劫持者让他们活下来，他们便不胜感激。他们与劫持者共命运，把劫持者的前途当成自己的前途，把劫持者的安危视为自己的安危。于是，他们采取了“我们反对他们”的态度，把解救者当成了敌人</li></ul><p><strong>长尾理论</strong> </p><ul><li>网络时代兴起的一种新理论，由于成本和效率的因素，当商品储存流通展示的场地和渠道足够宽广，商品生产成本急剧下降以至于个人都可以进行生产，并且商品的销售成本急剧降低时，几乎任何以前看似需求极低的产品，只要有卖，都会有人买。这些需求和销量不高的产品所占据的共同市场份额，可以和主流产品的市场份额相比，甚至更大</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、平台&quot;&gt;&lt;a href=&quot;#一、平台&quot; class=&quot;headerlink&quot; title=&quot;一、平台&quot;&gt;&lt;/a&gt;一、平台&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DSP&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DSP&lt;/code&gt;广告简单来
      
    
    </summary>
    
      <category term="Ad" scheme="http://blog.poetries.top/categories/Ad/"/>
    
    
      <category term="广告术语" scheme="http://blog.poetries.top/tags/%E5%B9%BF%E5%91%8A%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>移动设备分辨率预览</title>
    <link href="http://blog.poetries.top/2018/01/27/mobile-device-size/"/>
    <id>http://blog.poetries.top/2018/01/27/mobile-device-size/</id>
    <published>2018-01-27T13:20:43.000Z</published>
    <updated>2018-02-26T15:50:35.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源 <a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions" target="_blank" rel="noopener">https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-006d909cb0d4729c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源 &lt;a href=&quot;https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://w
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="适配" scheme="http://blog.poetries.top/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>图解前端性能优化</title>
    <link href="http://blog.poetries.top/2018/01/12/fed-performance-optimization/"/>
    <id>http://blog.poetries.top/2018/01/12/fed-performance-optimization/</id>
    <published>2018-01-12T03:24:03.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、css和js的装载与执行"><a href="#一、css和js的装载与执行" class="headerlink" title="一、css和js的装载与执行"></a>一、css和js的装载与执行</h2><h3 id="1-1-HTML-页面加载渲染的过程"><a href="#1-1-HTML-页面加载渲染的过程" class="headerlink" title="1.1 HTML 页面加载渲染的过程"></a>1.1 HTML 页面加载渲染的过程</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-db7c77d1567a95cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-2-HTML渲染过程的一些特点"><a href="#1-2-HTML渲染过程的一些特点" class="headerlink" title="1.2 HTML渲染过程的一些特点"></a>1.2 HTML渲染过程的一些特点</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e1e6feedcc2fdb1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-3-css-阻塞和-js-阻塞"><a href="#1-3-css-阻塞和-js-阻塞" class="headerlink" title="1.3 css 阻塞和 js 阻塞"></a>1.3 css 阻塞和 js 阻塞</h3><h4 id="1-3-1-CSS阻塞"><a href="#1-3-1-CSS阻塞" class="headerlink" title="1.3.1 CSS阻塞"></a>1.3.1 CSS阻塞</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-508aa2aef18de2b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="1-3-2-JS阻塞"><a href="#1-3-2-JS阻塞" class="headerlink" title="1.3.2 JS阻塞"></a>1.3.2 JS阻塞</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d43c8d6cc854ba71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、资源的压缩与合并"><a href="#二、资源的压缩与合并" class="headerlink" title="二、资源的压缩与合并"></a>二、资源的压缩与合并</h2><h3 id="2-1-文件合并"><a href="#2-1-文件合并" class="headerlink" title="2.1 文件合并"></a>2.1 文件合并</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-bf9c0905ae7544a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-2-css、js-及-HTML压缩"><a href="#2-2-css、js-及-HTML压缩" class="headerlink" title="2.2 css、js 及 HTML压缩"></a>2.2 css、js 及 HTML压缩</h3><h4 id="2-2-1-CSS压缩"><a href="#2-2-1-CSS压缩" class="headerlink" title="2.2.1 CSS压缩"></a>2.2.1 CSS压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b7e0b78856dd41ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-2-2-JS压缩"><a href="#2-2-2-JS压缩" class="headerlink" title="2.2.2 JS压缩"></a>2.2.2 JS压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-28bca2afc251aaad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-2-3-HTML压缩"><a href="#2-2-3-HTML压缩" class="headerlink" title="2.2.3 HTML压缩"></a>2.2.3 HTML压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6216398956a2b443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-3-http-清求的过程及潜在的性能优化点"><a href="#2-3-http-清求的过程及潜在的性能优化点" class="headerlink" title="2.3 http 清求的过程及潜在的性能优化点"></a>2.3 http 清求的过程及潜在的性能优化点</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-42ba978daacbdbfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c228e0f7ea3026a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、图片相关的优化"><a href="#三、图片相关的优化" class="headerlink" title="三、图片相关的优化"></a>三、图片相关的优化</h2><h3 id="3-1-不同格式图片常用的业务场景"><a href="#3-1-不同格式图片常用的业务场景" class="headerlink" title="3.1 不同格式图片常用的业务场景"></a>3.1 不同格式图片常用的业务场景</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-bb112b24d483508f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="3-2-图片压缩几种方法-雪碧图、Image-inline"><a href="#3-2-图片压缩几种方法-雪碧图、Image-inline" class="headerlink" title="3.2 图片压缩几种方法-雪碧图、Image inline"></a>3.2 图片压缩几种方法-雪碧图、Image inline</h3><h4 id="3-2-1-使用矢量图"><a href="#3-2-1-使用矢量图" class="headerlink" title="3.2.1 使用矢量图"></a>3.2.1 使用矢量图</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7268251dc26df726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="3-2-2-在安卓下使用webp"><a href="#3-2-2-在安卓下使用webp" class="headerlink" title="3.2.2 在安卓下使用webp"></a>3.2.2 在安卓下使用webp</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a2efc91b021b0908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="四、-懒加载与预加载"><a href="#四、-懒加载与预加载" class="headerlink" title="四、 懒加载与预加载"></a>四、 懒加载与预加载</h2><h3 id="4-1-懒加载原理"><a href="#4-1-懒加载原理" class="headerlink" title="4.1 懒加载原理"></a>4.1 懒加载原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e224d3c1b30b1166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-2-预加载原理"><a href="#4-2-预加载原理" class="headerlink" title="4.2 预加载原理"></a>4.2 预加载原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15d023ecf8135497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-3-懒加载、预加载使用场景"><a href="#4-3-懒加载、预加载使用场景" class="headerlink" title="4.3 懒加载、预加载使用场景"></a>4.3 懒加载、预加载使用场景</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-32e8e5e65e22520d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-cfb25a3e684a3f63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-909720cb7fba2464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d4d97036deeca145.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-4-预加载原生-js-和-PreloadJS-实现"><a href="#4-4-预加载原生-js-和-PreloadJS-实现" class="headerlink" title="4.4 预加载原生 js 和 PreloadJS 实现"></a>4.4 预加载原生 js 和 PreloadJS 实现</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-70497a61965504c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d9032f68dce4346a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、缓存"><a href="#五、缓存" class="headerlink" title="五、缓存"></a>五、缓存</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d7d9edfaf5aa7579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1dbc343a9ec775eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-366777492f307674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-39b360c7512a00a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0ace88d37f29a1ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-aaea0d655b517f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-ded1efe433d4c007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0cc71bee891f5d44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-abe977f4a60605b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-657b9b61ba419d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a47a8e5fb1099791.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1b339df2c203a1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="六、重绘与回流"><a href="#六、重绘与回流" class="headerlink" title="六、重绘与回流"></a>六、重绘与回流</h2><h3 id="6-1-什么是重绘与回流"><a href="#6-1-什么是重绘与回流" class="headerlink" title="6.1 什么是重绘与回流"></a>6.1 什么是重绘与回流</h3><h4 id="6-1-1-重绘"><a href="#6-1-1-重绘" class="headerlink" title="6.1.1 重绘"></a>6.1.1 重绘</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-83af5a7aaf32ad70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="6-1-2-回流"><a href="#6-1-2-回流" class="headerlink" title="6.1.2 回流"></a>6.1.2 回流</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4bddd29e462cc371.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-76cf21bf4a432931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-2-避免重绘回流的两种方法"><a href="#6-2-避免重绘回流的两种方法" class="headerlink" title="6.2 避免重绘回流的两种方法"></a>6.2 避免重绘回流的两种方法</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b5d315909066dd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-f05cb8a0cc10c2a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-923dc6a9637d50dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1c752f8cc61cd4ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-3-css-性能让-Javacript-变慢？"><a href="#6-3-css-性能让-Javacript-变慢？" class="headerlink" title="6.3 css 性能让 Javacript 变慢？"></a>6.3 css 性能让 Javacript 变慢？</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cea456689dc81a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-4-案例解析-重绘、回流及图层"><a href="#6-4-案例解析-重绘、回流及图层" class="headerlink" title="6.4 案例解析-重绘、回流及图层"></a>6.4 案例解析-重绘、回流及图层</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-04085f94a1992a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a08ea0e9ad2ab135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-16e25f3c65f2d858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d8046867832235a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-4a868eef59433cc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-14b4d57b2f9a2f78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-8b044762ba6ed086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-5-实战优化点总结"><a href="#6-5-实战优化点总结" class="headerlink" title="6.5 实战优化点总结"></a>6.5 实战优化点总结</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-897fa5f8ec6a24d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="七、浏览器存储"><a href="#七、浏览器存储" class="headerlink" title="七、浏览器存储"></a>七、浏览器存储</h2><h3 id="7-1-cookies"><a href="#7-1-cookies" class="headerlink" title="7.1 cookies"></a>7.1 cookies</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dd1a4cbc59e979dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-754f247c65ebb613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-eef80297b5c5a12c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-fe67b7381cd4f871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d098205326c03acf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0e54d54b577be81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-317dd9d7b61a0659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-2-LocalStorage、SessionStorage"><a href="#7-2-LocalStorage、SessionStorage" class="headerlink" title="7.2 LocalStorage、SessionStorage"></a>7.2 LocalStorage、SessionStorage</h3><h4 id="7-2-1-LocalStorage"><a href="#7-2-1-LocalStorage" class="headerlink" title="7.2.1 LocalStorage"></a>7.2.1 LocalStorage</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6c8d497e2ba18890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="7-2-2-SessionStorage"><a href="#7-2-2-SessionStorage" class="headerlink" title="7.2.2 SessionStorage"></a>7.2.2 SessionStorage</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-3aa67b0c1d03ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-3-IndexedDB"><a href="#7-3-IndexedDB" class="headerlink" title="7.3 IndexedDB"></a>7.3 IndexedDB</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4be5537b37c85261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-4-案例解析"><a href="#7-4-案例解析" class="headerlink" title="7.4 案例解析"></a>7.4 案例解析</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-948146becfc107ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-beaec4315a195788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1ad8d12033872186.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-5-PWA与Service-Workers"><a href="#7-5-PWA与Service-Workers" class="headerlink" title="7.5 PWA与Service Workers"></a>7.5 PWA与Service Workers</h3><h4 id="7-5-1-PWA"><a href="#7-5-1-PWA" class="headerlink" title="7.5.1 PWA"></a>7.5.1 PWA</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-85ab5759c2779ef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="7-5-2-Service-Workers"><a href="#7-5-2-Service-Workers" class="headerlink" title="7.5.2 Service Workers"></a>7.5.2 Service Workers</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7b6fa17f0d752474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-54c4d665cb592c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1aae704c7a32cfd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-6-Service-Workers-离线应用"><a href="#7-6-Service-Workers-离线应用" class="headerlink" title="7.6 Service Workers-离线应用"></a>7.6 Service Workers-离线应用</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-af1c1d5a7359e24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-fcff980c6603351b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="八、移动H5前端性能优化指南"><a href="#八、移动H5前端性能优化指南" class="headerlink" title="八、移动H5前端性能优化指南"></a>八、移动H5前端性能优化指南</h2><p><img src="https://camo.githubusercontent.com/db045941b5adebe26eae1202b9286fe8c39e5fa2/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3934383631342d313735326635633839393363633161302e6a7065673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、css和js的装载与执行&quot;&gt;&lt;a href=&quot;#一、css和js的装载与执行&quot; class=&quot;headerlink&quot; title=&quot;一、css和js的装载与执行&quot;&gt;&lt;/a&gt;一、css和js的装载与执行&lt;/h2&gt;&lt;h3 id=&quot;1-1-HTML-页面加载渲染的过
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="性能优化" scheme="http://blog.poetries.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>echart使用小结</title>
    <link href="http://blog.poetries.top/2018/01/12/echart/"/>
    <id>http://blog.poetries.top/2018/01/12/echart/</id>
    <published>2018-01-12T02:05:43.000Z</published>
    <updated>2018-02-26T15:50:35.311Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>十一个组件选项主要用来进行交互</p></blockquote><h2 id="一、Timeline选项"><a href="#一、Timeline选项" class="headerlink" title="一、Timeline选项"></a>一、Timeline选项</h2><ul><li>时间轴，每个图表最多仅有一个时间轴控件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6a02bd853069b904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、Title选项"><a href="#二、Title选项" class="headerlink" title="二、Title选项"></a>二、Title选项</h2><ul><li>每个图表最多仅有一个标题控件，每个标题控件可设主副标题</li></ul><blockquote><p>可以对标题文字的大小样式进行设置</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-aeae6a9ace95a4aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、toolbox"><a href="#三、toolbox" class="headerlink" title="三、toolbox"></a>三、toolbox</h2><ul><li>工具箱，每个图表最多仅有一个工具箱。工具箱里面可以实现图表类型的切换，保存图片，刷新，查看数据等功能。可以对其像素进行设置</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dcc780629ce8ad78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    mark : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            mark : <span class="string">'辅助线开关'</span>,</span><br><span class="line"></span><br><span class="line">            markUndo : <span class="string">'删除辅助线'</span>,</span><br><span class="line"></span><br><span class="line">            markClear : <span class="string">'清空辅助线'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        lineStyle : &#123;</span><br><span class="line"></span><br><span class="line">            width : <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">            color : <span class="string">'#1e90ff'</span>,</span><br><span class="line"></span><br><span class="line">            type : <span class="string">'dashed'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    dataZoom : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            dataZoom : <span class="string">'区域缩放'</span>,</span><br><span class="line"></span><br><span class="line">            dataZoomReset : <span class="string">'区域缩放后退'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    dataView : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'数据视图'</span>,</span><br><span class="line"></span><br><span class="line">        readOnly: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        lang: [<span class="string">'数据视图'</span>, <span class="string">'关闭'</span>, <span class="string">'刷新'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    magicType: &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            line : <span class="string">'折线图切换'</span>,</span><br><span class="line"></span><br><span class="line">            bar : <span class="string">'柱形图切换'</span>,</span><br><span class="line"></span><br><span class="line">            stack : <span class="string">'堆积'</span>,</span><br><span class="line"></span><br><span class="line">            tiled : <span class="string">'平铺'</span>,</span><br><span class="line"></span><br><span class="line">            force: <span class="string">'力导向布局图切换'</span>,</span><br><span class="line"></span><br><span class="line">            chord: <span class="string">'和弦图切换'</span>,</span><br><span class="line"></span><br><span class="line">            pie: <span class="string">'饼图切换'</span>,</span><br><span class="line"></span><br><span class="line">            funnel: <span class="string">'漏斗图切换'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        option: &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// line: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// bar: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// stack: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// tiled: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// force: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// chord: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// pie: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// funnel: &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        type : []</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    restore : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'还原'</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    saveAsImage : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'保存为图片'</span>,</span><br><span class="line"></span><br><span class="line">        type : <span class="string">'png'</span>,</span><br><span class="line"></span><br><span class="line">        lang : [<span class="string">'点击保存'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、tooltip"><a href="#四、tooltip" class="headerlink" title="四、tooltip"></a>四、tooltip</h2><ul><li>提示框，鼠标悬浮交互时的信息提示</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b9c8f725f2f4a50a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、legend"><a href="#五、legend" class="headerlink" title="五、legend"></a>五、legend</h2><ul><li>图例，每个图表最多仅有一个图例，混搭图表共享</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-0d79caad2b169951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="六、dataRange"><a href="#六、dataRange" class="headerlink" title="六、dataRange"></a>六、dataRange</h2><ul><li>值域选择，每个图表最多仅有一个值域控件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c0df8ad67dbd51b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="七、dataZoom"><a href="#七、dataZoom" class="headerlink" title="七、dataZoom"></a>七、dataZoom</h2><ul><li><a href="http://echarts.baidu.com/echarts2/doc/example/dataZoom.html" target="_blank" rel="noopener">数据区域缩放</a>。与toolbox.feature.dataZoom同步，仅对直角坐标系图表有效</li></ul><h2 id="roamController"><a href="#roamController" class="headerlink" title="roamController"></a>roamController</h2><ul><li><a href="http://echarts.baidu.com/echarts2/doc/example/map1.html" target="_blank" rel="noopener">缩放漫游组件</a>，仅对地图有效</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15c5718cc0299a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="八、grid"><a href="#八、grid" class="headerlink" title="八、grid"></a>八、grid</h2><blockquote><p>直角坐标系内绘图网格</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-264f17badedea9f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="九、xAxis"><a href="#九、xAxis" class="headerlink" title="九、xAxis"></a>九、xAxis</h2><blockquote><p>直角坐标系中横轴数组，数组中每一项代表一条横轴坐标轴，仅有一条时可省略数组。最多同时存在2条横轴，单条横轴时可指定安放于grid的底部（默认）或顶部，2条同时存在时位置互斥，默认第一条安放于底部，第二条安放于顶部</p></blockquote><h2 id="十、yAxis"><a href="#十、yAxis" class="headerlink" title="十、yAxis"></a>十、yAxis</h2><blockquote><p>直角坐标系中纵轴数组，数组中每一项代表一条纵轴坐标轴，仅有一条时可省略数组。最多同时存在2条纵轴，单条纵轴时可指定安放于grid的左侧（默认）或右侧，2条同时存在时位置互斥，默认第一条安放于左侧，第二条安放于右侧</p></blockquote><ul><li>坐标轴有三种类型，类目型、数值型和时间型，纵轴通常为数值型，但条形图时则纵轴为类目型</li></ul><h2 id="十一、series（通用）"><a href="#十一、series（通用）" class="headerlink" title="十一、series（通用）"></a>十一、series（通用）</h2><blockquote><p>驱动图表生成的数据内容数组，数组中每一项为一个系列的选项及数据，其中个别选项仅在部分图表类型中有效，请注意适用类型</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;十一个组件选项主要用来进行交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Timeline选项&quot;&gt;&lt;a href=&quot;#一、Timeline选项&quot; class=&quot;headerlink&quot; title=&quot;一、Timeline选项&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Echart" scheme="http://blog.poetries.top/tags/Echart/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用API合集</title>
    <link href="http://blog.poetries.top/2017/12/24/js-api/"/>
    <id>http://blog.poetries.top/2017/12/24/js-api/</id>
    <published>2017-12-24T03:10:43.000Z</published>
    <updated>2018-02-26T15:50:35.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="一、节点"><a href="#一、节点" class="headerlink" title="一、节点"></a>一、节点</h2><p><strong>1.1 节点属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Node.nodeName   <span class="comment">//返回节点名称，只读</span></span><br><span class="line">Node.nodeType   <span class="comment">//返回节点类型的常数值，只读</span></span><br><span class="line">Node.nodeValue  <span class="comment">//返回Text或Comment节点的文本值，只读</span></span><br><span class="line">Node.textContent  <span class="comment">//返回当前节点和它的所有后代节点的文本内容，可读写</span></span><br><span class="line">Node.baseURI    <span class="comment">//返回当前网页的绝对路径</span></span><br><span class="line"></span><br><span class="line">Node.ownerDocument  <span class="comment">//返回当前节点所在的顶层文档对象，即document</span></span><br><span class="line">Node.nextSibling  <span class="comment">//返回紧跟在当前节点后面的第一个兄弟节点</span></span><br><span class="line">Node.previousSibling  <span class="comment">//返回当前节点前面的、距离最近的一个兄弟节点</span></span><br><span class="line">Node.parentNode   <span class="comment">//返回当前节点的父节点</span></span><br><span class="line">Node.parentElement  <span class="comment">//返回当前节点的父Element节点</span></span><br><span class="line">Node.childNodes   <span class="comment">//返回当前节点的所有子节点</span></span><br><span class="line">Node.firstChild  <span class="comment">//返回当前节点的第一个子节点</span></span><br><span class="line">Node.lastChild   <span class="comment">//返回当前节点的最后一个子节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//parentNode接口</span></span><br><span class="line">Node.children  <span class="comment">//返回指定节点的所有Element子节点</span></span><br><span class="line">Node.firstElementChild  <span class="comment">//返回当前节点的第一个Element子节点</span></span><br><span class="line">Node.lastElementChild   <span class="comment">//返回当前节点的最后一个Element子节点</span></span><br><span class="line">Node.childElementCount  <span class="comment">//返回当前节点所有Element子节点的数目。</span></span><br></pre></td></tr></table></figure><p><strong>1.2 操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Node.appendChild(node)   <span class="comment">//向节点添加最后一个子节点</span></span><br><span class="line">Node.hasChildNodes()   <span class="comment">//返回布尔值，表示当前节点是否有子节点</span></span><br><span class="line">Node.cloneNode(<span class="literal">true</span>);  <span class="comment">// 默认为false(克隆节点), true(克隆节点及其属性，以及后代)</span></span><br><span class="line">Node.insertBefore(newNode,oldNode)  <span class="comment">// 在指定子节点之前插入新的子节点</span></span><br><span class="line">Node.removeChild(node)   <span class="comment">//删除节点，在要删除节点的父节点上操作</span></span><br><span class="line">Node.replaceChild(newChild,oldChild)  <span class="comment">//替换节点</span></span><br><span class="line">Node.contains(node)  <span class="comment">//返回一个布尔值，表示参数节点是否为当前节点的后代节点。</span></span><br><span class="line">Node.compareDocumentPosition(node)   <span class="comment">//返回一个7个比特位的二进制值，表示参数节点和当前节点的关系</span></span><br><span class="line">Node.isEqualNode(noe)  <span class="comment">//返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。</span></span><br><span class="line">Node.normalize()   <span class="comment">//用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ChildNode接口</span></span><br><span class="line">Node.remove()  <span class="comment">//用于删除当前节点</span></span><br><span class="line">Node.before()  <span class="comment">//</span></span><br><span class="line">Node.after()</span><br><span class="line">Node.replaceWith()</span><br></pre></td></tr></table></figure><p><strong>1.3 Document节点</strong></p><p><strong>1.3.1 Document节点的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.doctype   <span class="comment">//</span></span><br><span class="line"><span class="built_in">document</span>.documentElement  <span class="comment">//返回当前文档的根节点</span></span><br><span class="line"><span class="built_in">document</span>.defaultView   <span class="comment">//返回document对象所在的window对象</span></span><br><span class="line"><span class="built_in">document</span>.body   <span class="comment">//返回当前文档的&lt;body&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.head   <span class="comment">//返回当前文档的&lt;head&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.activeElement  <span class="comment">//返回当前文档中获得焦点的那个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点集合属性</span></span><br><span class="line"><span class="built_in">document</span>.links  <span class="comment">//返回当前文档的所有a元素</span></span><br><span class="line"><span class="built_in">document</span>.forms  <span class="comment">//返回页面中所有表单元素</span></span><br><span class="line"><span class="built_in">document</span>.images  <span class="comment">//返回页面中所有图片元素</span></span><br><span class="line"><span class="built_in">document</span>.embeds  <span class="comment">//返回网页中所有嵌入对象</span></span><br><span class="line"><span class="built_in">document</span>.scripts  <span class="comment">//返回当前文档的所有脚本</span></span><br><span class="line"><span class="built_in">document</span>.styleSheets  <span class="comment">//返回当前网页的所有样式表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文档信息属性</span></span><br><span class="line"><span class="built_in">document</span>.documentURI  <span class="comment">//表示当前文档的网址</span></span><br><span class="line"><span class="built_in">document</span>.URL  <span class="comment">//返回当前文档的网址</span></span><br><span class="line"><span class="built_in">document</span>.domain  <span class="comment">//返回当前文档的域名</span></span><br><span class="line"><span class="built_in">document</span>.lastModified  <span class="comment">//返回当前文档最后修改的时间戳</span></span><br><span class="line"><span class="built_in">document</span>.location  <span class="comment">//返回location对象，提供当前文档的URL信息</span></span><br><span class="line"><span class="built_in">document</span>.referrer  <span class="comment">//返回当前文档的访问来源</span></span><br><span class="line"><span class="built_in">document</span>.title    <span class="comment">//返回当前文档的标题</span></span><br><span class="line"><span class="built_in">document</span>.characterSet属性返回渲染当前文档的字符集，比如UTF<span class="number">-8</span>、ISO<span class="number">-8859</span><span class="number">-1</span>。</span><br><span class="line"><span class="built_in">document</span>.readyState  <span class="comment">//返回当前文档的状态</span></span><br><span class="line"><span class="built_in">document</span>.designMode  <span class="comment">//控制当前文档是否可编辑，可读写</span></span><br><span class="line"><span class="built_in">document</span>.compatMode  <span class="comment">//返回浏览器处理文档的模式</span></span><br><span class="line"><span class="built_in">document</span>.cookie   <span class="comment">//用来操作Cookie</span></span><br></pre></td></tr></table></figure><p><strong>1.3.2 Document节点的方法</strong></p><p><strong>（1）读写方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.open()   <span class="comment">//用于新建并打开一个文档</span></span><br><span class="line"><span class="built_in">document</span>.close()   <span class="comment">//不安比open方法所新建的文档</span></span><br><span class="line"><span class="built_in">document</span>.write()   <span class="comment">//用于向当前文档写入内容</span></span><br><span class="line"><span class="built_in">document</span>.writeIn()  <span class="comment">//用于向当前文档写入内容，尾部添加换行符。</span></span><br></pre></td></tr></table></figure><p><strong>（2）查找节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(selectors)   <span class="comment">//接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(selectors)  <span class="comment">//接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(tagName)  <span class="comment">//返回所有指定HTML标签的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(className)   <span class="comment">//返回包括了所有class名字符合指定条件的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(name)   <span class="comment">//用于选择拥有name属性的HTML元素（比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(id)   <span class="comment">//返回匹配指定id属性的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.elementFromPoint(x,y)  <span class="comment">//返回位于页面指定位置最上层的Element子节点。</span></span><br></pre></td></tr></table></figure><p><strong>（3）生成节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(tagName)   <span class="comment">//用来生成HTML元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.createTextNode(text)   <span class="comment">//用来生成文本节点</span></span><br><span class="line"><span class="built_in">document</span>.createAttribute(name)  <span class="comment">//生成一个新的属性对象节点，并返回它。</span></span><br><span class="line"><span class="built_in">document</span>.createDocumentFragment()  <span class="comment">//生成一个DocumentFragment对象</span></span><br></pre></td></tr></table></figure><p><strong>（4）事件方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createEvent(type)   <span class="comment">//生成一个事件对象，该对象能被element.dispatchEvent()方法使用</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(type,listener,capture)  <span class="comment">//注册事件</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener(type,listener,capture)  <span class="comment">//注销事件</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event)  <span class="comment">//触发事件</span></span><br></pre></td></tr></table></figure><p><strong>（5）其他</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.hasFocus()   //返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</span><br><span class="line">document.adoptNode(externalNode)  //将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。</span><br><span class="line">document.importNode(externalNode, deep)   //从外部文档拷贝指定节点，插入当前文档。</span><br></pre></td></tr></table></figure><p><strong>1.4 Element节点</strong></p><p><strong>1.4.1 Element节点的属性</strong></p><p><strong>（1）特性属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Element.attributes  <span class="comment">//返回当前元素节点的所有属性节点</span></span><br><span class="line">Element.id  <span class="comment">//返回指定元素的id属性，可读写</span></span><br><span class="line">Element.tagName  <span class="comment">//返回指定元素的大写标签名</span></span><br><span class="line">Element.innerHTML   <span class="comment">//返回该元素包含的HTML代码，可读写</span></span><br><span class="line">Element.outerHTML  <span class="comment">//返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写</span></span><br><span class="line">Element.className  <span class="comment">//返回当前元素的class属性，可读写</span></span><br><span class="line">Element.classList  <span class="comment">//返回当前元素节点的所有class集合</span></span><br><span class="line">Element.dataset   <span class="comment">//返回元素节点中所有的data-*属性。</span></span><br></pre></td></tr></table></figure><p><strong>（2）尺寸属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Element.clientHeight   <span class="comment">//返回元素节点可见部分的高度</span></span><br><span class="line">Element.clientWidth   <span class="comment">//返回元素节点可见部分的宽度</span></span><br><span class="line">Element.clientLeft   <span class="comment">//返回元素节点左边框的宽度</span></span><br><span class="line">Element.clientTop   <span class="comment">//返回元素节点顶部边框的宽度</span></span><br><span class="line">Element.scrollHeight  <span class="comment">//返回元素节点的总高度</span></span><br><span class="line">Element.scrollWidth  <span class="comment">//返回元素节点的总宽度</span></span><br><span class="line">Element.scrollLeft   <span class="comment">//返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置</span></span><br><span class="line">Element.scrollTop   <span class="comment">//返回元素节点的垂直滚动向下滚动的像素数值</span></span><br><span class="line">Element.offsetHeight   <span class="comment">//返回元素的垂直高度(包含border,padding)</span></span><br><span class="line">Element.offsetWidth    <span class="comment">//返回元素的水平宽度(包含border,padding)</span></span><br><span class="line">Element.offsetLeft    <span class="comment">//返回当前元素左上角相对于Element.offsetParent节点的垂直偏移</span></span><br><span class="line">Element.offsetTop   <span class="comment">//返回水平位移</span></span><br><span class="line">Element.style  <span class="comment">//返回元素节点的行内样式</span></span><br></pre></td></tr></table></figure><p><strong>（3）节点相关属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Element.children   <span class="comment">//包括当前元素节点的所有子元素</span></span><br><span class="line">Element.childElementCount   <span class="comment">//返回当前元素节点包含的子HTML元素节点的个数</span></span><br><span class="line">Element.firstElementChild  <span class="comment">//返回当前节点的第一个Element子节点  </span></span><br><span class="line">Element.lastElementChild   <span class="comment">//返回当前节点的最后一个Element子节点  </span></span><br><span class="line">Element.nextElementSibling  <span class="comment">//返回当前元素节点的下一个兄弟HTML元素节点</span></span><br><span class="line">Element.previousElementSibling  <span class="comment">//返回当前元素节点的前一个兄弟HTML节点</span></span><br><span class="line">Element.offsetParent   <span class="comment">//返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。</span></span><br></pre></td></tr></table></figure><p><strong>1.4.2 Element节点的方法</strong></p><p><strong>（1）位置方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getBoundingClientRect()  </span><br><span class="line"><span class="comment">// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、height 元素自身宽高</span></span><br><span class="line"><span class="comment">// top 元素上外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// right 元素右外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// bottom 元素下外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// left 元素左外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// width 元素自身宽(包含border,padding) </span></span><br><span class="line"><span class="comment">// height 元素自身高(包含border,padding) </span></span><br><span class="line"></span><br><span class="line">getClientRects()   <span class="comment">//返回当前元素在页面上形参的所有矩形。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素在页面上的偏移量  </span></span><br><span class="line"><span class="keyword">var</span> rect = el.getBoundingClientRect()  </span><br><span class="line"><span class="keyword">return</span> &#123;   </span><br><span class="line">  top: rect.top + <span class="built_in">document</span>.body.scrollTop,   </span><br><span class="line">  left: rect.left + <span class="built_in">document</span>.body.scrollLeft  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）属性方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element.getAttribute()：读取指定属性  </span><br><span class="line">Element.setAttribute()：设置指定属性  </span><br><span class="line">Element.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性  </span><br><span class="line">Element.removeAttribute()：移除指定属性</span><br></pre></td></tr></table></figure><p><strong>（3）查找方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element.querySelector()  </span><br><span class="line">Element.querySelectorAll()  </span><br><span class="line">Element.getElementsByTagName()  </span><br><span class="line">Element.getElementsByClassName()</span><br></pre></td></tr></table></figure><p><strong>（4）事件方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Element.addEventListener()：添加事件的回调函数  </span><br><span class="line">Element.removeEventListener()：移除事件监听函数  </span><br><span class="line">Element.dispatchEvent()：触发事件</span><br><span class="line"></span><br><span class="line"><span class="comment">//ie8</span></span><br><span class="line">Element.attachEvent(oneventName,listener)</span><br><span class="line">Element.detachEvent(oneventName,listener)</span><br><span class="line"></span><br><span class="line"><span class="comment">// event对象  </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">window</span>.event||event;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件的目标节点  </span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件代理  </span></span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">if</span> (event.target.tagName.toLowerCase() === <span class="string">'li'</span>) &#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(event.target.innerHTML)   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>（5）其他</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Element.scrollIntoView()   <span class="comment">//滚动当前元素，进入浏览器的可见区域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。</span></span><br><span class="line">Element.insertAdjacentHTML(where, htmlString); </span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'beforeBegin'</span>, htmlString); <span class="comment">// 在该元素前插入  </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'afterBegin'</span>, htmlString); <span class="comment">// 在该元素第一个子元素前插入 </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'beforeEnd'</span>, htmlString); <span class="comment">// 在该元素最后一个子元素后面插入 </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'afterEnd'</span>, htmlString); <span class="comment">// 在该元素后插入</span></span><br><span class="line"></span><br><span class="line">Element.remove()  <span class="comment">//用于将当前元素节点从DOM中移除</span></span><br><span class="line">Element.focus()   <span class="comment">//用于将当前页面的焦点，转移到指定元素上</span></span><br></pre></td></tr></table></figure><h2 id="二、CSS操作"><a href="#二、CSS操作" class="headerlink" title="二、CSS操作"></a>二、CSS操作</h2><p><strong>（1）类名操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ie8以下</span></span><br><span class="line">Element.className  <span class="comment">//获取元素节点的类名</span></span><br><span class="line">Element.className += <span class="string">' '</span> + newClassName  <span class="comment">//新增一个类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否有某个类名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(className,<span class="string">'gi'</span>).test(element.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">  element.className = element.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\b)'</span> + className.split(<span class="string">' '</span>).join(<span class="string">'|'</span>) + <span class="string">'(\\b|$)'</span>, <span class="string">'gi'</span>),<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ie10 </span></span><br><span class="line">element.classList.add(className)  <span class="comment">//新增</span></span><br><span class="line">element.classList.remove(className)  <span class="comment">//删除</span></span><br><span class="line">element.classList.contains(className)  <span class="comment">//是否包含</span></span><br><span class="line">element.classList.toggle(className)  <span class="comment">//toggle class</span></span><br></pre></td></tr></table></figure><p><strong>（2）style操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(<span class="string">'style'</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">element.style.backgroundColor = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">element.style.cssText <span class="comment">//用来读写或删除整个style属性</span></span><br><span class="line"></span><br><span class="line">element.style.setProperty(propertyName,value)  <span class="comment">//设置css属性</span></span><br><span class="line">element.style.getPropertyValue(property)  <span class="comment">//获取css属性</span></span><br><span class="line">element.style.removeProperty(property)  <span class="comment">//删除css属性</span></span><br><span class="line">操作非内联样式</span><br><span class="line"><span class="comment">//ie8</span></span><br><span class="line">element.currentStyle[attrName]</span><br><span class="line"><span class="comment">//ie9+</span></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(el,<span class="literal">null</span>)[attrName] </span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(el,<span class="literal">null</span>).getPropertyValue(attrName)</span><br><span class="line"><span class="comment">//伪类</span></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(el,<span class="string">':after'</span>)[attrName]</span><br></pre></td></tr></table></figure><h2 id="三、对象"><a href="#三、对象" class="headerlink" title="三、对象"></a>三、对象</h2><p><strong>3.1 Object对象</strong></p><p><strong>（1）生成实例对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype   <span class="comment">//返回原型对象</span></span><br></pre></td></tr></table></figure><p><strong>（3）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(o)   <span class="comment">//遍历对象的可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyName(o)   <span class="comment">//遍历对象不可枚举的属性</span></span><br></pre></td></tr></table></figure><p><strong>对象实例的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">valueOf()：返回当前对象对应的值。  </span><br><span class="line">toString()：返回当前对象对应的字符串形式。  </span><br><span class="line">toLocaleString()：返回当前对象对应的本地字符串形式。  </span><br><span class="line">hasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。 </span><br><span class="line">isPrototypeOf()：判断当前对象是否为另一个对象的原型。</span><br><span class="line">propertyIsEnumerable()：判断某个属性是否可枚举。</span><br></pre></td></tr></table></figure><p><strong>3.2 Array对象</strong></p><p><strong>（1）生成实例对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.length  <span class="comment">//长度</span></span><br></pre></td></tr></table></figure><p><strong>（3）Array.isArray()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(a)   <span class="comment">//用来判断一个值是否为数组</span></span><br></pre></td></tr></table></figure><p><strong>（4）Array实例的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a.valueof()   <span class="comment">//返回数组本身</span></span><br><span class="line">a.toString()  <span class="comment">//返回数组的字符串形式</span></span><br><span class="line">a.push(value,vlaue....)   <span class="comment">//用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。</span></span><br><span class="line">pop()   <span class="comment">//用于删除数组的最后一个元素，并返回该元素</span></span><br><span class="line">join()  <span class="comment">//以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。</span></span><br><span class="line">concat()  <span class="comment">//用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。</span></span><br><span class="line">shift()  <span class="comment">//用于删除数组的第一个元素，并返回该元素。</span></span><br><span class="line">unshift(value)  <span class="comment">//用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。</span></span><br><span class="line">reverse()   <span class="comment">//用于颠倒数组中元素的顺序，返回改变后的数组</span></span><br><span class="line">slice(start_index, upto_index);   <span class="comment">//用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。</span></span><br><span class="line">splice(index, count_to_remove, addElement1, addElement2, ...);   <span class="comment">//用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</span></span><br><span class="line">sort()   <span class="comment">//对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</span></span><br><span class="line">map()   <span class="comment">//对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</span></span><br><span class="line">map(elem,index,arr)   <span class="comment">//map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。</span></span><br><span class="line">forEach()   <span class="comment">//遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。</span></span><br><span class="line">filter()   <span class="comment">//参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</span></span><br><span class="line">some()    <span class="comment">//用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。</span></span><br><span class="line">every()   <span class="comment">//用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。所有数组成员的返回值都是true，才返回true，否则false。</span></span><br><span class="line">reduce()   <span class="comment">//依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员到最后一个成员）</span></span><br><span class="line">reduceRight()  <span class="comment">//依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）</span></span><br><span class="line">indexOf(s)   <span class="comment">//返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置</span></span><br><span class="line">lastIndexOf()  <span class="comment">//返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</span></span><br></pre></td></tr></table></figure><p><strong>3.3 Number对象</strong></p><p><strong>（1）生成对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> <span class="built_in">Number</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）Number对象的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.POSITIVE_INFINITY：正的无限，指向<span class="literal">Infinity</span>。  </span><br><span class="line"><span class="built_in">Number</span>.NEGATIVE_INFINITY：负的无限，指向-<span class="literal">Infinity</span>。  </span><br><span class="line"><span class="built_in">Number</span>.NaN：表示非数值，指向<span class="literal">NaN</span>。  </span><br><span class="line"><span class="built_in">Number</span>.MAX_VALUE：表示最大的正数，相应的，最小的负数为-<span class="built_in">Number</span>.MAX_VALUE。  </span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE：表示最小的正数（即最接近<span class="number">0</span>的正数，在<span class="number">64</span>位浮点数体系中为<span class="number">5e-324</span>），相应的，最接近<span class="number">0</span>的负数为-<span class="built_in">Number</span>.MIN_VALUE。  </span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即<span class="number">9007199254740991</span>。  </span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即<span class="number">-9007199254740991</span>。</span><br></pre></td></tr></table></figure><p><strong>（4）Number对象实例的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toString()   <span class="comment">//用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</span></span><br><span class="line">toFixed()   <span class="comment">//用于将一个数转为指定位数的小数，返回这个小数对应的字符串。</span></span><br><span class="line">toExponential()  <span class="comment">//用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。</span></span><br><span class="line">toPrecision()  <span class="comment">//用于将一个数转为指定位数的有效数字。</span></span><br></pre></td></tr></table></figure><p><strong>3.4 String 对象</strong></p><p><strong>（1）生成实例对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）String对象的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.length   <span class="comment">//返回字符串的长度</span></span><br></pre></td></tr></table></figure><p><strong>（3）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s.chatAt(index)   <span class="comment">//返回指定位置的字符</span></span><br><span class="line">s.fromCharCode()    <span class="comment">//该方法的参数是一系列Unicode码点，返回对应的字符串。</span></span><br><span class="line">s.charCodeAt(index)    <span class="comment">//返回给定位置字符的Unicode码点（十进制表示）</span></span><br><span class="line">s.concat(s2)  <span class="comment">//用于连接两个字符串</span></span><br><span class="line">s.slice(start,end)   <span class="comment">//用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</span></span><br><span class="line">s.substring(start,end)  <span class="comment">//用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。</span></span><br><span class="line">s.substr(start,length)   <span class="comment">//用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</span></span><br><span class="line">s.indexOf(s)   <span class="comment">//返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置 </span></span><br><span class="line">s.lastIndexOf()  <span class="comment">//返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。</span></span><br><span class="line">s.trim()  <span class="comment">//用于去除字符串两端的空格，返回一个新字符串</span></span><br><span class="line">s.toLowerCase()  <span class="comment">//用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。</span></span><br><span class="line">s.toUpperCase()  <span class="comment">//全部转为大写</span></span><br><span class="line">s.localeCompare(s2)  <span class="comment">//用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</span></span><br><span class="line">s.match(regexp)   <span class="comment">//用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。</span></span><br><span class="line">s.search()  <span class="comment">//返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。</span></span><br><span class="line">s.replace(oldValue,newValue)  <span class="comment">//用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。</span></span><br><span class="line">s.split()  <span class="comment">//按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。</span></span><br></pre></td></tr></table></figure><p><strong>3.5 Math对象</strong></p><p><strong>（1）属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.E：常数e。  </span><br><span class="line"><span class="built_in">Math</span>.LN2：<span class="number">2</span>的自然对数。  </span><br><span class="line"><span class="built_in">Math</span>.LN10：<span class="number">10</span>的自然对数。  </span><br><span class="line"><span class="built_in">Math</span>.LOG2E：以<span class="number">2</span>为底的e的对数。  </span><br><span class="line"><span class="built_in">Math</span>.LOG10E：以<span class="number">10</span>为底的e的对数。  </span><br><span class="line"><span class="built_in">Math</span>.PI：常数Pi。  </span><br><span class="line"><span class="built_in">Math</span>.SQRT1_2：<span class="number">0.5</span>的平方根。  </span><br><span class="line"><span class="built_in">Math</span>.SQRT2：<span class="number">2</span>的平方根。</span><br></pre></td></tr></table></figure><p><strong>（2）数学方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs()：返回参数的绝对值  </span><br><span class="line"><span class="built_in">Math</span>.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。 </span><br><span class="line"><span class="built_in">Math</span>.floor()：向下取整  </span><br><span class="line"><span class="built_in">Math</span>.max(n,n1,...)：可接受多个参数，返回最大值  </span><br><span class="line"><span class="built_in">Math</span>.min(n,n1,..)：可接受多个参数，返回最小值  </span><br><span class="line"><span class="built_in">Math</span>.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。 </span><br><span class="line"><span class="built_in">Math</span>.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回<span class="literal">NaN</span>。  </span><br><span class="line"><span class="built_in">Math</span>.log()：返回以e为底的自然对数值。</span><br><span class="line"><span class="built_in">Math</span>.exp()：返回e的指数，也就是常数e的参数次方。</span><br><span class="line"><span class="built_in">Math</span>.round()：四舍五入  </span><br><span class="line"><span class="built_in">Math</span>.random()：返回<span class="number">0</span>到<span class="number">1</span>之间的一个伪随机数，可能等于<span class="number">0</span>，但是一定小于<span class="number">1</span>。</span><br></pre></td></tr></table></figure><p><strong>（3）三角函数方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sin()：返回参数的正弦  </span><br><span class="line"><span class="built_in">Math</span>.cos()：返回参数的余弦  </span><br><span class="line"><span class="built_in">Math</span>.tan()：返回参数的正切  </span><br><span class="line"><span class="built_in">Math</span>.asin()：返回参数的反正弦（弧度值）  </span><br><span class="line"><span class="built_in">Math</span>.acos()：返回参数的反余弦（弧度值）  </span><br><span class="line"><span class="built_in">Math</span>.atan()：返回参数的反正切（弧度值）</span><br></pre></td></tr></table></figure><p><strong>3.6 JSON对象</strong></p><p><strong>（1）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify()   </span><br><span class="line"><span class="comment">//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。</span></span><br><span class="line"><span class="comment">//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。</span></span><br><span class="line"><span class="comment">//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.parse()   <span class="comment">//用于将JSON字符串转化成对象。</span></span><br></pre></td></tr></table></figure><p><strong>3.7 console对象</strong></p><p><strong>（1）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(text,text2,...)   <span class="comment">//用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。</span></span><br><span class="line"><span class="built_in">console</span>.info()   <span class="comment">//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</span></span><br><span class="line"><span class="built_in">console</span>.debug()  <span class="comment">//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</span></span><br><span class="line"><span class="built_in">console</span>.warn()  <span class="comment">//输出信息时，在最前面加一个黄色三角，表示警告；</span></span><br><span class="line"><span class="built_in">console</span>.error()  <span class="comment">//输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈</span></span><br><span class="line"><span class="built_in">console</span>.table()  <span class="comment">//可以将复合类型的数据转为表格显示。</span></span><br><span class="line"><span class="built_in">console</span>.count()  <span class="comment">//用于计数，输出它被调用了多少次。</span></span><br><span class="line"><span class="built_in">console</span>.dir()    <span class="comment">//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</span></span><br><span class="line"><span class="built_in">console</span>.dirxml()  <span class="comment">//用于以目录树的形式，显示DOM节点。</span></span><br><span class="line"><span class="built_in">console</span>.assert()  <span class="comment">//接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这两个方法用于计时，可以算出一个操作所花费的准确时间。</span></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"><span class="comment">//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.profile()  <span class="comment">//用来新建一个性能测试器（profile），它的参数是性能测试器的名字。</span></span><br><span class="line"><span class="built_in">console</span>.profileEnd()  <span class="comment">//用来结束正在运行的性能测试器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.group()</span><br><span class="line"><span class="built_in">console</span>.groupend()</span><br><span class="line"><span class="comment">//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</span></span><br><span class="line"><span class="built_in">console</span>.groupCollapsed()  <span class="comment">//用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.trace()  <span class="comment">//显示当前执行的代码在堆栈中的调用路径。</span></span><br><span class="line"><span class="built_in">console</span>.clear()  <span class="comment">//用于清除当前控制台的所有输出，将光标回置到第一行。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、节点&quot;&gt;&lt;a href=&quot;#一、节点&quot; class=&quot;headerlink&quot; title=&quot;一、节点&quot;&gt;&lt;/a&gt;一、节点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 节点属性&lt;/str
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="API" scheme="http://blog.poetries.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>React之Immutable学习记录（十二）</title>
    <link href="http://blog.poetries.top/2017/11/20/react-study-Immutable/"/>
    <id>http://blog.poetries.top/2017/11/20/react-study-Immutable/</id>
    <published>2017-11-20T12:10:24.000Z</published>
    <updated>2018-02-26T15:50:35.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理于互联网</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>从问题说起：熟悉 <code>React</code> 组件生命周期的话都知道：调用 <code>setState</code> 方法总是会触发 <code>render</code> 方法从而进行 <code>vdom re-render</code> 相关逻辑，哪怕实际上你没有更改到 <code>Component.state</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="number">0</span>&#125;);<span class="comment">// 组件 state 并未被改变，但仍会触发 render 方法</span></span><br></pre></td></tr></table></figure><ul><li>为了避免这种性能上的浪费，<code>React</code> 提供了一个 <code>shouldComponentUpdate</code> 来控制触发 <code>vdom re-render</code> 逻辑的条件。于是 <code>PureRenderMixin</code> 作为一种优化技巧被使用。它仅仅是浅比较对象，深层次的数据结构根本不管用</li></ul><p><strong>js中的Immutable Data</strong></p><blockquote><p>在<code>javascript</code>中我们可以通过<code>deep clone</code>来模拟<code>Immutable Data</code>，就是每次对数据进行操作，新对数据进行<code>deep clone</code>出一个新数据</p></blockquote><ul><li>deep clone</li><li>当然你或许意识到了，这样非常的慢</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;  </span><br><span class="line"><span class="keyword">var</span> cloneDeep = <span class="built_in">require</span>(<span class="string">'lodash.clonedeep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;  </span><br><span class="line">    id: <span class="string">'data'</span>,</span><br><span class="line">    author: &#123;</span><br><span class="line">        name: <span class="string">'mdemo'</span>,</span><br><span class="line">        github: <span class="string">'https://github.com/demohi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data1 = cloneDeep(data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'equal:'</span>, data1===data); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">data1.id = <span class="string">'data1'</span>;  </span><br><span class="line">data1.author.name = <span class="string">'demohi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.id);<span class="comment">// data  </span></span><br><span class="line"><span class="built_in">console</span>.log(data1.id);<span class="comment">// data1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.author.name);<span class="comment">//mdemo  </span></span><br><span class="line"><span class="built_in">console</span>.log(data1.author.name);<span class="comment">//demohi</span></span><br></pre></td></tr></table></figure><blockquote><p>这时候 immutableJS 就派得上用场了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">7</span>&#125;&#125;&#125;&#125;&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">7</span>&#125;&#125;&#125;&#125;&#125;);</span><br><span class="line">Immutable.is(map1, map2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>遍历对象不再用<code>for-in</code>，可以这样:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123; <span class="comment">/* do some thing */</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="二、什么是-Immutable-Data"><a href="#二、什么是-Immutable-Data" class="headerlink" title="二、什么是 Immutable Data"></a>二、什么是 Immutable Data</h2><ul><li><code>Immutable Data</code> 就是一旦创建，就不能再被更改的数据。对 <code>Immutable</code> 对象的任何修改或添加删除操作都会返回一个新的 <code>Immutable</code> 对象</li><li><code>Immutable</code> 实现的原理是 <code>Persistent Data Structure</code>（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变</li><li>同时为了避免 <code>deepCopy</code> 把所有节点都复制一遍带来的性能损耗，<code>Immutable</code> 使用了 <code>Structural Sharing····</code>（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</li></ul><p><img src="https://segmentfault.com/image?src=http://img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif&amp;objectId=1190000003910357&amp;token=4f994e3bf65c373b010a157dfbab240f" alt=""></p><blockquote><p>打印<code>immutableJS</code>看看有什么东西</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-ddbb8fec9c23aa7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>一个说明不可变的例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生对象</span></span><br><span class="line"><span class="keyword">let</span> a1 = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = a1;</span><br><span class="line">b1.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1.b, b1.b); <span class="comment">// 2, 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === b1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.c === b1.c); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// immutable.js 的Map</span></span><br><span class="line"><span class="keyword">let</span> a2 = Immutable.fromJS(&#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 = a2.set(<span class="string">'b'</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.get(<span class="string">'b'</span>), b2.get(<span class="string">'b'</span>)); <span class="comment">// 1, 2  对象 a2 的 b 值并没有变成2。</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === b2); <span class="comment">//  false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.get(<span class="string">'c'</span>) === b2.get(<span class="string">'c'</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="三、为什么要在React-js中使用Immutable"><a href="#三、为什么要在React-js中使用Immutable" class="headerlink" title="三、为什么要在React.js中使用Immutable"></a>三、为什么要在React.js中使用Immutable</h2><blockquote><ul><li>它是一个完全独立的库，无论基于什么框架都可以用它。意义在于它弥补了<code>Javascript</code> 没有不可变数据结构的问题</li><li>由于是不可变的，可以放心的对对象进行任意操作。在<code>React</code>开发中，频繁操作state对象或是<code>store</code>，配合<code>immutableJS</code>快、安全、方便</li></ul></blockquote><ul><li>熟悉<code>React.js</code>的都应该知道，<code>React.js</code>是一个<code>UI = f(states)</code>的框架，为了解决更新的问题，<code>React.js</code>使用了<code>virtual dom</code>，<code>virtual dom</code>通过<code>diff</code>修改<code>dom</code>，来实现高效的<code>dom</code>更新。</li><li>但是有一个问题。当<code>state</code>更新时，如果数据没变，你也会去做<code>virtual dom</code>的<code>diff</code>，这就产生了浪费。这种情况其实很常见</li></ul><blockquote><ul><li>当然你可能会说，你可以使用<code>PureRenderMixin</code>来解决呀，<code>PureRenderMixin</code>是个好东西，我们可以用它来解决一部分的上述问题</li><li>但<code>PureRenderMixin</code>只是简单的浅比较，不使用于多层比较。那怎么办？自己去做复杂比较的话，性能又会非常差</li></ul></blockquote><ul><li>方案就是使用<code>immutable.js</code>可以解决这个问题。因为每一次<code>state</code>更新只要有数据改变，那么<code>PureRenderMixin</code>可以立刻判断出数据改变，可以大大提升性能</li></ul><p><strong>Immutable 优点</strong></p><ul><li><strong>Immutable 降低了 Mutable 带来的复杂度</strong></li></ul><blockquote><p>可变（<code>Mutable</code>）数据耦合了 <code>Time</code>和 <code>Value</code> 的概念，造成了数据很难被回溯</p></blockquote><ul><li><strong>节省内存</strong></li></ul><blockquote><p><code>Immutable.js</code> 使用了 <code>Structure Sharing</code> 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Map</span>(&#123;</span><br><span class="line">  select: <span class="string">'users'</span>,</span><br><span class="line">  filter: <span class="built_in">Map</span>(&#123; <span class="attr">name</span>: <span class="string">'Cam'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> b = a.set(<span class="string">'select'</span>, <span class="string">'people'</span>);</span><br><span class="line"></span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line">a.get(<span class="string">'filter'</span>) === b.get(<span class="string">'filter'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</strong></li></ul><blockquote><p>因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。</p></blockquote><ul><li><strong>并发安全</strong></li></ul><blockquote><p>传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 <code>Immutable</code> 之后，数据天生是不可变的，并发锁就不需要了。</p></blockquote><ul><li><strong>拥抱函数式编程</strong></li></ul><blockquote><p><code>Immutable</code> 本身就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</p></blockquote><p><strong>Immutable 缺点</strong></p><ul><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ul><h2 id="四、Immutable-的几种数据类型"><a href="#四、Immutable-的几种数据类型" class="headerlink" title="四、Immutable 的几种数据类型"></a>四、Immutable 的几种数据类型</h2><ul><li><code>List</code>: 有序索引集，类似<code>JavaScript</code>中的<code>Array</code>。</li><li><code>Map</code>: 无序索引集，类似<code>JavaScript</code>中的<code>Object</code>。</li><li><code>OrderedMap</code>: 有序的<code>Map</code>，根据数据的<code>set()</code>进行排序。</li><li><code>Set</code>: 没有重复值的集合。</li><li><code>OrderedSet</code>: 有序的<code>Set</code>，根据数据的<code>add</code>进行排序。</li><li><code>Stack</code>: 有序集合，支持使用<code>unshift（）</code>和<code>shift（）</code>添加和删除。</li><li><code>Range()</code>: 返回一个<code>Seq.Indexed</code>类型的集合，这个方法有三个参数，<code>start</code>表示开始值，默认值为<code>0</code>，<code>end</code>表示结束值，默认为无穷大，<code>step</code>代表每次增大的数值，默认为<code>1</code>.如果<code>start = end</code>,则返回空集合。</li><li><code>Repeat()</code>: 返回一个<code>vSeq.Indexe</code>类型的集合，这个方法有两个参数，<code>value</code>代表需要重复的值，<code>times</code>代表要重复的次数，默认为无穷大。</li><li><code>Record</code>: 一个用于生成<code>Record</code>实例的类。类似于<code>JavaScript</code>的<code>Object</code>，但是只接收特定字符串为<code>key</code>，具有默认值。</li><li><code>Seq</code>: 序列，但是可能不能由具体的数据结构支持。</li><li><code>Collection</code>: 是构建所有数据结构的基类，不可以直接构建</li></ul><blockquote><p>上面那么多常用的也就是 <code>List</code>和<code>Map</code></p></blockquote><h2 id="五、几个重要的API"><a href="#五、几个重要的API" class="headerlink" title="五、几个重要的API"></a>五、几个重要的API</h2><p><strong>1、fromJS()</strong></p><ul><li><code>fromJS()</code> 是最最最常用的将原生<code>JS</code>数据转换为<code>ImmutableJS</code>数据的转换方法。使用方式类似于 <code>JSON.parse()</code>，接收两个参数：<code>json</code> 数据和 <code>reviver</code>函数</li><li>在不传递<code>reviver</code>函数的情况下，默认将原生<code>JS</code>的<code>Array</code>转为<code>List</code>，<code>Object</code>转为<code>Map</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见</span></span><br><span class="line"><span class="keyword">const</span> t1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="keyword">const</span> t2 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定制转换方式，下这种就是将Array转换为List，Object转换为Map</span></span><br><span class="line">    <span class="keyword">const</span> isIndexed = Immutable.Iterable.isIndexed(value);</span><br><span class="line">    <span class="keyword">return</span> isIndexed ? value.toList() : value.toOrderedMap();</span><br><span class="line">    <span class="comment">// true, "b", &#123;b: [10, 20, 30]&#125;</span></span><br><span class="line">    <span class="comment">// false, "a", &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;</span></span><br><span class="line">    <span class="comment">// false, "", &#123;"": &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br></pre></td></tr></table></figure><p><strong>2、is()</strong></p><blockquote><p>先来看官网的一段话: <code>immutable</code>数据应该被当作值而不是对象，值是表示该事件在特定时刻的状态。这个原则对理解不可变数据的适当使用是最重要的。为了将<code>Immutable.js</code>数据视为值，就必须使用<code>Immutable.is()</code>函数或<code>.equals()</code>方法来确定值相等，而不是确定对象引用标识的 <code>===</code> 操作符</p></blockquote><ul><li>所以<code>is()</code>就是用来对两个<code>immutable</code>对象进行值比较的。使用方式类似于 <code>Object.is(obj1, obj2)</code>，接收两个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个不同的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(map1 === map2); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 进行值比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(map1, map2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不仅仅只能比较ImmutableJS的类型的数据</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">undefined</span>, <span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">null</span>, <span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">null</span>, <span class="literal">null</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别于 Object.is</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>) ,Immutable.is(<span class="number">-0</span>, <span class="number">0</span>)); <span class="comment">// false , true</span></span><br></pre></td></tr></table></figure><p><strong>3、Map</strong></p><blockquote><p><code>Map</code> 数据类型，对应原生 <code>Object</code> 数组。最最常用的 数据结构之一，循环时无序(<code>orderedMap</code>有序)，对象的 <code>key</code> 可以是任意值。具体看下面的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(List.of(<span class="number">1</span>), <span class="string">'list-of-one'</span>).get(List.of(<span class="number">1</span>)));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">NaN</span>, <span class="string">'NaN'</span>).get(<span class="literal">NaN</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">undefined</span>, <span class="string">'undefined'</span>).get(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">null</span>, <span class="string">'null'</span>).get(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure><ul><li><strong>简单介绍 OrderedMap</strong></li></ul><blockquote><p><code>OrderedMap</code> 是 <code>Map</code> 的变体，它除了具有 <code>Map</code> 的特性外，还具有顺序性，当开发者遍历 <code>OrderedMap</code> 的实例时，遍历顺序为该实例中元素的声明、添加顺序。<code>OrderedMap</code>比非有序<code>Map</code>更昂贵，并且可能消耗更多的内存。如果真要求遍历有序，请使用<code>List</code></p></blockquote><p><strong>4、List</strong></p><blockquote><p><code>List</code> 数据类型，对应原生 <code>Array</code>数组。和原生数组，最大区别不存在’空位’。<code>[, , , , ]</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List([,,,,]).toJS());<span class="comment">// [undefined, undefined, undefined, undefined]</span></span><br></pre></td></tr></table></figure><h2 id="六、API"><a href="#六、API" class="headerlink" title="六、API"></a>六、API</h2><blockquote><p>我们主要介绍<code>Map</code>和 <code>List</code></p></blockquote><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><strong>1、通过构造函数 Map()</strong></p><blockquote><p>构造函数不常用，一般都是通过<code>Immutable.fromJS()</code>将一个<code>JS</code>原生对象转换为一个<code>Immutable</code>对象</p></blockquote><p><strong>2、Map()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iter: Iterable.Keyed&lt;K, V&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iter: Iterable&lt;any, Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(obj: Array&lt;Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;V&gt;(obj: &#123;[key: string]: V&#125;): Map&lt;string, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iterator: Iterator&lt;Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iterable: Object): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().toJS()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value"</span>&#125;).toJS()); <span class="comment">// &#123;key: "value"&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>同Key覆盖问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后的&#123;key: value2&#125; 覆盖了前面的 &#123;key: value&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>([[<span class="string">"key"</span>, <span class="string">"value"</span>], [<span class="string">"key"</span>, <span class="string">"value2"</span>], [<span class="string">"key1"</span>, <span class="string">"value1"</span>]]).toJS());<span class="comment">// &#123;key: "value2", key1: "value1"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、List()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iter: Iterable.Indexed&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iter: Iterable.Set&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;K, V&gt;(iter: Iterable.Keyed&lt;K, V&gt;): List&lt;any&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(array: Array&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iterator: Iterator&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iterable: Object): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(List().toJS()); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,&#123;<span class="attr">a</span>:<span class="number">123</span>&#125;]).toJS()); <span class="comment">// [ 1, 2, 3, 4, &#123;a: 123&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>4、另一种方式</strong></p><p><strong>Map.of()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(<span class="string">'key1'</span>,<span class="string">'value1'</span>,<span class="string">'key2'</span>,<span class="string">'value2'</span>,<span class="string">'key3'</span>,<span class="string">'value3'</span>).toJS()); <span class="comment">// &#123;key1: "value1", key2: "value2", key3: "value3"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>List.of()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).toJS()); <span class="comment">// [&#123;x:1&#125;, 2, [3], 4]</span></span><br></pre></td></tr></table></figure><h3 id="判断是否是一个Map或者List"><a href="#判断是否是一个Map或者List" class="headerlink" title="判断是否是一个Map或者List"></a>判断是否是一个Map或者List</h3><p><strong>1、Map判断</strong></p><ul><li>判断是否是一个<code>Map</code> , 对原生<code>Object</code>不生效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.isMap(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.isMap(<span class="built_in">Map</span>(&#123;&#125;))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>2、List判断</strong></p><blockquote><p>判断是否是一个<code>List</code> , 对原生<code>Array</code>不生效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List.isList([])); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(List.isList(List([]))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h3><p><strong>1、size</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).size);<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).size);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).size);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).size);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>count()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以定制条件，来确定大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).count(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 1 value大于3的有两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以制定条件，来确定 大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 2 大于3的有两个</span></span><br></pre></td></tr></table></figure><p><strong>countBy()</strong></p><blockquote><p><code>countBy()</code>和<code>count()</code>的区别就是它的返回值是一个对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).countBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;false: 1, true: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).countBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p><strong>1、Set</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 将 key 位置的元素替换为 value</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'a'</span>, <span class="number">0</span>).toJS()); <span class="comment">// &#123;a: 0, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'e'</span>, <span class="number">99</span>).toJS());  <span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444, e: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 将 index 位置的元素替换为 value，即使索引越界也是安全的, 空位 undefined</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">-1</span>, <span class="number">0</span>).toJS()); <span class="comment">// [1, 2, 0]  注意-1 等效于 $arr1.set($arr1.size + -1, 0)</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">4</span>, <span class="number">0</span>).toJS());  <span class="comment">// [ 1, 2, 3, undefined, 0 ]  空位置为了undefined</span></span><br></pre></td></tr></table></figure><p><strong>2、setIn</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="List-特有的添加元素"><a href="#List-特有的添加元素" class="headerlink" title="List 特有的添加元素"></a>List 特有的添加元素</h3><p><strong>1、插入元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert(index: number, value: T)</span></span><br><span class="line"><span class="comment">// 向 index 位置插入 value</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).insert(<span class="number">1</span>, <span class="number">1.5</span>).toJS()); <span class="comment">// [ 1, 1.5, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p><strong>2、设置size</strong></p><ul><li>默认值<code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List([]).setSize(<span class="number">2</span>).toJS()); <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><p><strong>3、pop、push、shift、unshift</strong></p><blockquote><p><code>List</code>数据类型也拥有<code>pop</code>、<code>push</code>、<code>shift</code>、<code>unshift</code>这四种操作方法，和原生<code>Array</code>的四种方法使用方式一致，但唯一区别就是返回新的<code>List</code>，并且不改变原来的数组本身，而原生则是会改变元素本身</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ImmutableJS：返回新的List，并且不改变元素本身</span></span><br><span class="line"><span class="keyword">const</span> $test = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($test.pop().toJS(), $test.toJS()); <span class="comment">// [1, 2, 3] [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 原生：返回被改变的值，改变元素本身</span></span><br><span class="line"><span class="keyword">const</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(test.pop(), test); <span class="comment">// 4 [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>4、花样插入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interpose</span></span><br><span class="line"><span class="comment">// 插入xxx之间</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).interpose(<span class="number">5555</span>).toJS()); <span class="comment">// [1, 5555, 2, 5555, 5, 5555, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interleave</span></span><br><span class="line"><span class="comment">// 被操作的两个数组，每个的第一项、第二项、第三项... 组成新的数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).interleave(Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>])).toJS()); <span class="comment">// [1, 555, 2, 666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// zip</span></span><br><span class="line"><span class="comment">// 被操作的两个数组，抽离第一项和第二项组成新的子数组，放入到一个大数组中，形成二维数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).zip(Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>]).toJS())); <span class="comment">// [ [1, 555], [2, 666]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义插入规则。</span></span><br><span class="line"><span class="comment">// zipWith</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).zipWith(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>]).toJS())); <span class="comment">// [ 556, 668]</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><strong>1、delete(key)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// delete(index: number)</span></span><br><span class="line"><span class="comment">// 删除 index 位置的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).delete(<span class="number">1</span>).toJS(), $arr1.toJS());<span class="comment">// [ 1, 3 ] [ 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).delete(<span class="number">77</span>).toJS(), $arr1.toJS(), <span class="string">'超过范围不会强制报错'</span>);<span class="comment">// [ 1, 2, 3] [ 1, 2, 3] 超过范围不会强制报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).delete(<span class="string">'c'</span>).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 1, b: 2, d: 444&#125;  &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).delete(<span class="string">'asdfasfd'</span>).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2、deleteIn</strong></p><blockquote><p>和 <code>setIn</code>使用方式一致</p></blockquote><p><strong>3、清空元素 lear()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).clear().toJS());<span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).clear().toJS());<span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><blockquote><p>修改某一个元素</p></blockquote><p><strong>1、set setIn</strong></p><blockquote><p>上面已经介绍过</p></blockquote><p><strong>2、update</strong></p><blockquote><p>update(key: K, notSetValue: V, updater: (value: V) =&gt; V): Map&lt;K, V&gt;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'2'</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 6] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'6'</span>, <span class="number">1</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 3, undefined, undefined, undefined, 2] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'6'</span>, <span class="number">0</span>, (value)=&gt; &#123; <span class="comment">// 默认值必须大于0 感觉有BUG，所以还是不要用了。</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 3] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'a'</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 2, b: 2, c: 3, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'e'</span>, <span class="number">1</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">//   &#123;a: 1, b: 2, c: 3, d: 444, e: 2&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'e'</span>, <span class="number">0</span>, (value)=&gt; &#123; <span class="comment">// 默认值入手是number必须大于0 感觉有BUG，所以还是不要用了。</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">//  &#123;a: 1, b: 2, c: 6, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、updateIn</strong></p><blockquote><p>使用方式和setIn一样。</p></blockquote><h3 id="获取某个元素值"><a href="#获取某个元素值" class="headerlink" title="获取某个元素值"></a>获取某个元素值</h3><p><strong>1、get getIn</strong></p><ul><li>使用方式：<code>get(key: number, notSetValue?: T)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS([<span class="number">1111111</span>, <span class="number">22222</span>, &#123;<span class="attr">a</span>: <span class="number">888123</span>&#125;]);</span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="number">0</span>)); <span class="comment">// 1111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有数组可以用 number 类型 的key</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="number">1</span>: <span class="string">'abc'</span>&#125;).get(<span class="number">1</span>), Immutable.fromJS(&#123;<span class="number">1</span>: <span class="string">'abc'</span>&#125;).get(<span class="string">'1'</span>));<span class="comment">// undefined "abc" | 只有数组可以用 number 类型 的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notSetValue 默认值，了解</span></span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="number">11</span>, <span class="string">'no have value'</span>)); <span class="comment">// no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getIn</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'2'</span>, <span class="string">'a'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// 888123</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'2'</span>, <span class="string">'b'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// child no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="string">'a'</span>)); <span class="comment">// 1111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notSetValue 默认值，了解</span></span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="string">'v'</span>, <span class="string">'no have value'</span>)); <span class="comment">// no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getIn</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'a'</span>, <span class="string">'a1'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// 222</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'d'</span>, <span class="string">'b1'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// child no have value</span></span><br></pre></td></tr></table></figure><p><strong>2、获取头、尾元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.first());<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.last());<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.first());<span class="comment">// &#123;a1: 34&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.last());<span class="comment">// 444</span></span><br></pre></td></tr></table></figure><h3 id="查找某个元素"><a href="#查找某个元素" class="headerlink" title="查找某个元素"></a>查找某个元素</h3><p><strong>1、find() findLast()</strong></p><blockquote><p><code>find()</code>、<code>findLast()</code>返回 <code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">56</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).find(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: &#123;b: 111&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).find(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>2、findKey() findLastKey()</strong></p><blockquote><p><code>findKey()</code>、<code>findLastKey()</code> 返回 <code>key</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findKey(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).findKey(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// c</span></span><br></pre></td></tr></table></figure><p><strong>3、findEntry() findLastEntry()</strong></p><blockquote><p><code>findEntry()</code>、<code>findLastEntry()</code> 返回 <code>key:value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findEntry(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// [3, Map]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).findEntry(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Immutable.is(value, Immutable.fromJS(&#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;));</span><br><span class="line">&#125;));<span class="comment">// ["a", Map]</span></span><br></pre></td></tr></table></figure><p><strong>4、keyOf() lastKeyOf()</strong></p><blockquote><p><code>keyOf()</code>、<code>lastKeyOf()</code> 根据 <code>value</code> 返回<code>key</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ List</span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).keyOf(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;))); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).keyOf(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).keyOf(Immutable.fromJS(&#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;))); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).keyOf(<span class="number">2</span>)); <span class="comment">// b</span></span><br></pre></td></tr></table></figure><h3 id="List-特有查找某个元素"><a href="#List-特有查找某个元素" class="headerlink" title="List 特有查找某个元素"></a>List 特有查找某个元素</h3><p><strong>1、indexOf() lastIndexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找不到 返回 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).indexOf(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;))); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>2、findIndex() findLastIndex()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findIndex(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value/<span class="number">3</span> === <span class="number">1</span>;</span><br><span class="line">&#125;)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="查找最大、最小元素"><a href="#查找最大、最小元素" class="headerlink" title="查找最大、最小元素"></a>查找最大、最小元素</h3><blockquote><p><code>max()</code>、<code>maxBy()</code>默认比较规则为<code>&gt;</code>，<code>min()</code>、<code>minBy()</code>默认比较规则为<code>&gt;</code></p></blockquote><p><strong>1、max()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">301</span>, <span class="number">88</span>]).max()); <span class="comment">// 301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">301</span>, <span class="number">88</span>]).max(<span class="function">(<span class="params">valueA, valueB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;)); <span class="comment">// 301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">8888</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).max()); <span class="comment">// 8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">8888</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).max(<span class="function">(<span class="params">valueA, valueB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;)); <span class="comment">// 8888</span></span><br></pre></td></tr></table></figure><p><strong>2、maxBy()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 自定义比较的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2301</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">222</span>&#125;]).maxBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>);</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: 2301&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较的元素，和比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2301</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">222</span>&#125;]).maxBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>);</span><br><span class="line">&#125;, (valueA, valueB) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: 2301&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 自定义比较的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: &#123;<span class="attr">a1</span>: <span class="number">11</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a1</span>: <span class="number">33</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a1</span>: <span class="number">54654</span>&#125;&#125;).maxBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a1'</span>);</span><br><span class="line">&#125;).toJS());<span class="comment">//  &#123;a1: 54654&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较的元素，和比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: &#123;<span class="attr">a1</span>: <span class="number">11</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a1</span>: <span class="number">33</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a1</span>: <span class="number">54654</span>&#125;&#125;).maxBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a1'</span>);</span><br><span class="line">&#125;, (valueA, valueB) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a1: 54654&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、min()</strong></p><ul><li>同<code>max()</code></li></ul><p><strong>4、minBy()</strong></p><ul><li>同<code>maxBy()</code></li></ul><p><strong>5、keys() values() entries()</strong></p><blockquote><p>获取<code>ES6 Iterable</code> 迭代器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = List([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = $test.keys();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = $test.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> values) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = $test.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = $test.keys();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = $test.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> values) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// &#123;a1: 222&#125; 2 3 444</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = $test.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">// ["a", Map] ["b", 2] ["c", 3] ["d", 444]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p><strong>1、slice()</strong></p><blockquote><p>和原生<code>Array slice()</code>用法一致</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).slice(<span class="number">0</span>).toJS());<span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).slice(<span class="number">0</span>).toJS());<span class="comment">// &#123;a: Object, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).slice(<span class="number">1</span>).toJS());<span class="comment">// &#123;b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2、rest() butLast()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ List</span><br><span class="line"><span class="comment">// rest() 返回删除第一个元素后的 List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).rest().rest().toJS()); <span class="comment">// [&#123;a: 1&#125;, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">// butLast() 返回删除最后一个元素后的 List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).butLast().toJS()); <span class="comment">// [1, &#123;a: 1&#125;, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// rest() 返回删除第一个元素后的 Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).rest().rest().toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"><span class="comment">// butLast() 返回删除最后一个元素后的 Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).butLast().toJS()); <span class="comment">// &#123;a: &#123;a1: 222&#125;, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、skip() skipLast() skipWhile() skipUntil()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip(number)</span></span><br><span class="line"><span class="comment">// 从头按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).skip(<span class="number">2</span>).toJS()); <span class="comment">// [3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).skipLast(<span class="number">2</span>).toJS()); <span class="comment">// [1, &#123;a: 1&#125;, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">111</span>, <span class="number">33</span> , <span class="number">22</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).skipWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">31</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [22, 44, 55, 66]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">32</span>, <span class="number">33</span> , <span class="number">40</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).skipWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">39</span>;<span class="comment">// 抛出直到小于39的元素。</span></span><br><span class="line">&#125;).toJS()); <span class="comment">// [40, 44, 55, 66]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// skip(number)</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skip(<span class="number">2</span>).toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipLast(<span class="number">2</span>).toJS()); <span class="comment">// &#123;a: &#123;a1: 222&#125;, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">1</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">39</span>;<span class="comment">// 抛出直到小于39的元素。</span></span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>4、take() takeLast() takeWhile() takeUntil()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// take(number)</span></span><br><span class="line"><span class="comment">// 从头获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).take(<span class="number">2</span>).toJS()); <span class="comment">// [1, &#123;a: 1&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).takeLast(<span class="number">2</span>).toJS()); <span class="comment">// [5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">111</span>, <span class="number">33</span> , <span class="number">22</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).takeWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">31</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//[111, 33]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">32</span>, <span class="number">33</span> , <span class="number">40</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).takeUntil(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">41</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//[32, 33 , 40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// take(number)</span></span><br><span class="line"><span class="comment">// 从头获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).take(<span class="number">2</span>).toJS()); <span class="comment">// &#123;a: 5, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeLast(<span class="number">2</span>).toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//&#123;a: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeUntil(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">39</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//&#123;a: 5, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><p><strong>1、map() filter() every() some() forEach() reduce() reduceRight()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">//1. map()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).map(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. filter()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).filter(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [2, 4]</span></span><br><span class="line"><span class="comment">// filterNot() ...这个没有什么卵用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. every()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).every(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. some()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).some(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. forEach() 返回迭代的条目数（包括返回false的最后一个迭代）</span></span><br><span class="line"><span class="comment">// 与Array 的 forEach不同，如果sideEffect的任何调用返回false，迭代将停止。 返回迭代的条目数（包括返回false的最后一个迭代）。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>&#125;]).forEach(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value, index, array.toJS(), <span class="string">'forEach'</span>);</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">5</span>;</span><br><span class="line">&#125;)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. reduce()</span></span><br><span class="line"><span class="comment">// 同原生用法</span></span><br><span class="line"><span class="comment">//7. reduceRight()</span></span><br><span class="line"><span class="comment">// 同原生用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">//1. map()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).map(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;a: 10, b: 4, c: 6, d: 888&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. filter()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).filter(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;b: 2, d: 444&#125;</span></span><br><span class="line"><span class="comment">// filterNot() ...这个没有什么卵用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. every()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).every(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. some()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).some(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. forEach() 返回迭代的条目数（包括返回false的最后一个迭代）</span></span><br><span class="line"><span class="comment">// 与Array 的 forEach不同，如果sideEffect的任何调用返回false，迭代将停止。 返回迭代的条目数（包括返回false的最后一个迭代）。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).forEach(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">444</span>;</span><br><span class="line">&#125;)); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. reduce()</span></span><br><span class="line"><span class="comment">// 同原List用法</span></span><br><span class="line"><span class="comment">//7. reduceRight()</span></span><br><span class="line"><span class="comment">// 同List用法</span></span><br></pre></td></tr></table></figure><h3 id="Map-特有-mapKeys-mapEntries"><a href="#Map-特有-mapKeys-mapEntries" class="headerlink" title="Map 特有 mapKeys() mapEntries()"></a>Map 特有 mapKeys() mapEntries()</h3><blockquote><p>对<code>Map</code>元素进行处理，返回处理后的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapKeys() 返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).mapKeys(<span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">'hhh'</span>;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// &#123;ahhh: 5, bhhh: 2, chhh: 3, dhhh: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapEntries() 返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).mapEntries(<span class="function">(<span class="params">[key, value]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [key + <span class="string">'aaa'</span>, value+<span class="string">'hhhh'</span>];</span><br><span class="line">&#125;).toJS());<span class="comment">//   &#123;aaaa: "5hhhh", baaa: "2hhhh", caaa: "3hhhh", daaa: "444hhhh"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><strong>merge() mergeDeep() mergeWith() mergeDeepWith()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">55</span>, <span class="attr">c</span>: <span class="number">66</span>&#125;&#125;]);</span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">333</span>, <span class="attr">d</span>: <span class="number">67</span>&#125;&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.merge($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test [1, 2, 3, 6, &#123;b: 333, d: 67&#125;] [1, 2, 3, 7, &#123;a: &#123;b: 55, c: 66&#125;&#125;]</span></span><br><span class="line"><span class="comment">// 深merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeep($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test [1, 2, 3, 6, &#123;b: 333, c: 66, d: 67&#125;] [1, 2, 3, 7, &#123;a: &#123;b: 55, c: 66&#125;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"><span class="comment">// 深merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeepWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a2</span>: <span class="number">234</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.merge($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test &#123;a: &#123;a1: 222, a2: 234&#125;, b: 2, c: 3, d: 444&#125; &#123;a: &#123;a1: 222, a3: 456&#125;, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="comment">// 深merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeep($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test &#123;a: &#123;a1: 222, a2: 234, a3: 456&#125;, b: 2, c: 3, d: 444&#125; &#123;a: &#123;a1: 222, a3: 456&#125;, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"><span class="comment">// 深merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeepWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br></pre></td></tr></table></figure><h3 id="jonin-转换为字符串"><a href="#jonin-转换为字符串" class="headerlink" title="jonin() 转换为字符串"></a>jonin() 转换为字符串</h3><blockquote><p>使用方式和原生<code>Array</code>的<code>join()</code>一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).join()); <span class="comment">// 1,2,3,Map &#123; "a": 123, "b": 321 &#125;</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).join()); <span class="comment">// 2,Map &#123; "a1": 222, "a3": 456 &#125;,3,444</span></span><br></pre></td></tr></table></figure><h3 id="isEmpty-判空"><a href="#isEmpty-判空" class="headerlink" title="isEmpty() 判空"></a>isEmpty() 判空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断空List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([]).isEmpty()); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 判断Map是否为空 比原生方便</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;&#125;).isEmpty()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="has-hasIn-检查是否有某个key"><a href="#has-hasIn-检查是否有某个key" class="headerlink" title="has() hasIn() 检查是否有某个key"></a>has() hasIn() 检查是否有某个key</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).has(<span class="string">'0'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).hasIn([<span class="number">3</span>, <span class="string">'b'</span>])); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).has(<span class="string">'a'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).hasIn([<span class="string">'a'</span>, <span class="string">'a3'</span>])); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="includes-是否包含某些元素"><a href="#includes-是否包含某些元素" class="headerlink" title="includes() 是否包含某些元素"></a>includes() 是否包含某些元素</h3><blockquote><p><code>includes()</code>、<code>contains()</code>这俩等效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 对象是否包含某个元素，对Immutable元素使用Immutable.is 进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">89</span>]).includes(<span class="string">'89'</span>));<span class="comment">// 数组没有字符89，所以返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>]).contains(<span class="string">'89'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])]).contains(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 对象是否包含某个元素，对Immutable元素使用Immutable.is 进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">89</span>&#125;).includes(<span class="string">'89'</span>));<span class="comment">// 数组没有字符89，所以返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="string">'89'</span>&#125;).contains(<span class="string">'89'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])&#125;).contains(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="isSubset-子集判断"><a href="#isSubset-子集判断" class="headerlink" title="isSubset() 子集判断"></a>isSubset() 子集判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// isSubset()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]]).isSubset(Immutable.fromJS([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>])));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// isSuperset 就是 isSubset 参数掉个个儿</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>]).isSuperset(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// isSubset()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;&#125;).isSubset(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;)));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// isSuperset 就是 isSubset 参数掉个个儿</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).isSuperset(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;&#125;)));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="reverse-反转"><a href="#reverse-反转" class="headerlink" title="reverse() 反转"></a>reverse() 反转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).reverse().toJS());</span><br><span class="line"><span class="comment">// [6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).reverse().toJS());</span><br><span class="line"><span class="comment">// &#123;d: 5, c: 3, a: &#123;a1: 222, a3: 456&#125;, b: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p><code>sort()</code>和<code>sortBy()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// sort(comparator?: (valueA: V, valueB: V) =&gt; number): Iterable&lt;K, V&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]).sort().toJS());</span><br><span class="line"><span class="comment">// 传入比较函数</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    sortBy&lt;C&gt;(</span></span><br><span class="line"><span class="comment">    comparatorValueMapper: (value: T, key: number, iter: Iterable&lt;number, T&gt;) =&gt; C,</span></span><br><span class="line"><span class="comment">    comparator?: (valueA: C, valueB: C) =&gt; number</span></span><br><span class="line"><span class="comment">    ): Iterable&lt;number, T&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">9</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;]).sortBy(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a, b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">88</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).sort().toJS());<span class="comment">// &#123;b: 2, c: 3, d: 5, a: 88&#125;</span></span><br><span class="line"><span class="comment">// 传入比较函数</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">88</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;b: 2, c: 3, d: 5, a: 88&#125;</span></span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sortBy&lt;C&gt;(</span></span><br><span class="line"><span class="comment">comparatorValueMapper: (value: T, key: number, iter: Iterable&lt;number, T&gt;) =&gt; C,</span></span><br><span class="line"><span class="comment">comparator?: (valueA: C, valueB: C) =&gt; number</span></span><br><span class="line"><span class="comment">): Iterable&lt;number, T&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="number">88</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;&#125;).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a, b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;b: &#123;a: 2&#125;, c: &#123;a: 3&#125;, d: &#123;a: 5&#125;, a: &#123;a: 88&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="flatten-平铺"><a href="#flatten-平铺" class="headerlink" title="flatten() 平铺"></a>flatten() 平铺</h3><blockquote><p>参数默认情况下，<code>false</code> 深度平铺，<code>true</code> 浅度平铺1层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">11</span>, <span class="number">111</span>, <span class="number">12344</span>], &#123;<span class="attr">a</span>: <span class="number">1234</span>, <span class="attr">b</span>: &#123;<span class="attr">bb</span>: [<span class="number">777</span>, <span class="number">888</span>]&#125;&#125;, <span class="number">5</span>, <span class="number">6</span>]).flatten().toJS());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 1, 11, 111, 12344, 1234, 777, 888, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">11</span>, <span class="number">111</span>, <span class="number">12344</span>], &#123;<span class="attr">a</span>: <span class="number">1234</span>, <span class="attr">b</span>: &#123;<span class="attr">bb</span>: [<span class="number">777</span>, <span class="number">888</span>]&#125;&#125;, <span class="number">5</span>, <span class="number">6</span>]).flatten(<span class="literal">true</span>).toJS());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 1, 11, 111, 12344, 1234, Object, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).flatten().toJS());</span><br><span class="line"><span class="comment">// &#123;0: 1, 1: 2, 2: 3, b: 2, a5: 333, c: 3, d: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).flatten(<span class="literal">true</span>).toJS());</span><br><span class="line"><span class="comment">// &#123;b: 2, a1: Object, a3: Array[3], c: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="groupBy-分组"><a href="#groupBy-分组" class="headerlink" title="groupBy() 分组"></a>groupBy() 分组</h3><blockquote><p>返回值是<code>OrderedMap</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">v</span>: <span class="number">0</span>, <span class="attr">a</span>: <span class="number">111</span>&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">333</span>&#125;, &#123;<span class="attr">v</span>: <span class="number">0</span>, <span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">333</span>&#125;]).groupBy(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// OrderedMap &#123;111: Array[1], 333: Array[2], Map &#123; "b": List [ 1, 2, 3 ] &#125;: Array[2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a5</span>: <span class="number">334</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a5</span>: <span class="number">334</span>&#125;&#125;).groupBy(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a5'</span>)</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// OrderedMap  &#123;333: &#123;b: &#123;a5: 333&#125;, a: &#123;a5: 333&#125;&#125;, 334: &#123;c: &#123;a5: 334&#125;, d: &#123;a5: 334&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="flip-Map-特有翻转"><a href="#flip-Map-特有翻转" class="headerlink" title="flip() Map 特有翻转"></a>flip() Map 特有翻转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="string">'b1'</span>, <span class="attr">a</span>: <span class="string">'a1'</span>, <span class="attr">c</span>: <span class="string">'c1'</span>, <span class="attr">d</span>: <span class="string">'d1'</span>&#125;).flip().toJS()); <span class="comment">// &#123;b1: "b", a1: "a", c1: "c", d1: "d"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="连接-concat"><a href="#连接-concat" class="headerlink" title="连接 concat()"></a>连接 concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="keyword">const</span> $test2 = Immutable.fromJS([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($test1.concat($test2).toJS()); <span class="comment">//[1, 2, 3, 4, 5, 6, 111, 222, 333, 444, 555, 666]</span></span><br><span class="line"><span class="built_in">console</span>.log($test1.toJS(), $test2.toJS()); <span class="comment">//[1, 2, 3, 4, 5, 6] [111, 222, 333, 444, 555, 666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> $test2 = Immutable.fromJS(&#123;<span class="attr">b1</span>: <span class="number">22</span>, <span class="attr">b</span>: <span class="number">34</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($test1.concat($test2).toJS()); <span class="comment">//&#123;b: 34, a: Object, c: 3, d: 5, b1: 22&#125; 属性 b 被覆盖</span></span><br><span class="line"><span class="built_in">console</span>.log($test1.toJS(), $test2.toJS()); <span class="comment">//&#123;b: 2, a: &#123;a1: &#123;a5: 333&#125;, c: 3, d: 5&#125; b1: 22, b: 34&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>1、转换为原生类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 浅层</span></span><br><span class="line"><span class="comment">// toArray</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1234</span>, <span class="number">22</span>]&#125;&#125;]).toArray());<span class="comment">// [1, 2, 3, 4, 5, 6, Map]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1234</span>, <span class="number">22</span>]]).toArray());<span class="comment">// [1, 2, 3, 4, 5, 6, List]</span></span><br><span class="line"><span class="comment">// toObject</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1234</span>, <span class="number">22</span>]&#125;&#125;]).toObject());<span class="comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: Map&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1234</span>, <span class="number">22</span>]]).toObject());<span class="comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: List&#125;</span></span><br><span class="line"><span class="comment">//深层</span></span><br><span class="line"><span class="comment">// 就是一直在用的 toJS(); 不到万不得已，尽量不用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 浅层</span></span><br><span class="line"><span class="comment">// toArray</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toArray());<span class="comment">// [2, Map, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toArray());<span class="comment">// [2, List, 3, 5]</span></span><br><span class="line"><span class="comment">// toObject</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toObject());<span class="comment">// &#123;b: 2, a: Map, c: 3, d: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]&#125;).toObject());<span class="comment">// &#123;b: 2, a: List&#125;</span></span><br><span class="line"><span class="comment">//深层</span></span><br><span class="line"><span class="comment">// 就是一直在用的 toJS(); 不到万不得已，尽量不用。</span></span><br></pre></td></tr></table></figure><p><strong>2、转换为其他ImmutableJS数据类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toMap()</span></span><br><span class="line"><span class="comment">// toOrderedMap()</span></span><br><span class="line"><span class="comment">// toSet()</span></span><br><span class="line"><span class="comment">// toOrderedSet()</span></span><br><span class="line"><span class="comment">// toList()</span></span><br><span class="line"><span class="comment">// toStack()</span></span><br></pre></td></tr></table></figure><h2 id="七、和React-Redux-架构的结合"><a href="#七、和React-Redux-架构的结合" class="headerlink" title="七、和React Redux 架构的结合"></a>七、和React Redux 架构的结合</h2><blockquote><p>利用 <code>immutable.js</code> 不可变的特性，可以极大的优化<code>React render</code>的冗余执行。<code>React</code> 官方提供的<code>PureRenderMixin</code>是浅比较</p></blockquote><p><strong>1、immutable-pure-render-decorator</strong></p><blockquote><p>专门针对<code>immutable</code>的<code>PureRenderMixin</code>，用来装饰<code>React</code>组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pureRenderDecorator <span class="keyword">from</span> <span class="string">'../../../widgets/libs/immutable-pure-render-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@pureRenderDecorator</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PartA</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// 舍弃React.addons.PureRenderMixin</span></span><br><span class="line">        <span class="comment">// this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件PartA，render执行了'</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">this</span>.props.data;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;section&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;我是组件PartA&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;&#123;data.toJSON ? JSON.stringify(data.toJSON()) : data&#125;&lt;/</span>p&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>section&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、优化shouldComponentUpdate()</strong></p><blockquote><p>我们都知道官方提供的<code>React.addons.PureRenderMixin</code>提供的<code>shouldComponentUpdate()</code>，只能进行浅比较，对于引用类型<code>Object</code>、<code>Array</code>比较无力，而如果使用<code>Immutable</code>的<code>Map</code>和<code>List</code>替换<code>Object</code>、<code>Array</code>，则可以使用<code>Immutable.is()</code>来比较两个引用类型，从而补充了<code>React.addons.PureRenderMixin</code>的漏洞。</p></blockquote><p><strong>3、高阶组件封装</strong></p><blockquote><p>对于使用<code>immutable.js</code>的项目，在应用公共组件的时候，由于公共组件的内部实现一定是原<code>生</code>JS<code>数据，所以我们只能传递原生</code>JS<code>数据到公共组件，但是如果转换成了原生</code>JS<code>数据，就又会出现&quot;</code>React.addons.PureRenderMixin<code>提供的</code>shouldComponentUpdate()`是浅比较”问题，对此可以使用下面的高阶组件进行封装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"><span class="comment">// 通过Immutable.is 封装过的 shouldComponentUpdate</span></span><br><span class="line"><span class="keyword">import</span> &#123;shouldComponentUpdate&#125; <span class="keyword">from</span> <span class="string">'../immutable-pure-render-decorator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ComposedComponent =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.shouldComponentUpdate = shouldComponentUpdate.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> props = <span class="keyword">this</span>.props.toJS ? <span class="keyword">this</span>.props.toJS() : <span class="keyword">this</span>.props;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ComposedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>3、Demo</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> highComponent <span class="keyword">from</span> <span class="string">'../../../../widgets/libs/utils/highComponent'</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'../../actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共组件</span></span><br><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'@alife/dialog'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import Immutable from 'immutable';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        open: state.getIn([<span class="string">'dialog'</span>, <span class="string">'open'</span>]),</span><br><span class="line">        title: state.getIn([<span class="string">'dialog'</span>, <span class="string">'title'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onPrimaryTouchTap: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            dispatch(actions.toggleDialog(<span class="literal">false</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        onSecondaryTouchTap: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            dispatch(actions.toggleDialog(<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(highComponent(Dialog))<span class="comment">//通过高阶组件封装</span></span><br></pre></td></tr></table></figure><h2 id="八、思维导图总结API"><a href="#八、思维导图总结API" class="headerlink" title="八、思维导图总结API"></a>八、思维导图总结API</h2><ul><li><a href="https://www.processon.com/view/link/5a12c0ede4b0d53d979b33da" target="_blank" rel="noopener">https://www.processon.com/view/link/5a12c0ede4b0d53d979b33da</a></li></ul><h2 id="九、更多参考"><a href="#九、更多参考" class="headerlink" title="九、更多参考"></a>九、更多参考</h2><ul><li>facebook.github.io/immutable-js/docs/</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从问题说起：熟悉
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>React之React Router 4（十一）</title>
    <link href="http://blog.poetries.top/2017/11/19/react-study-router-4-xx/"/>
    <id>http://blog.poetries.top/2017/11/19/react-study-router-4-xx/</id>
    <published>2017-11-19T16:06:10.000Z</published>
    <updated>2018-02-26T15:50:35.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、React-router-V4版本修改内容及一些坑"><a href="#一、React-router-V4版本修改内容及一些坑" class="headerlink" title="一、React-router V4版本修改内容及一些坑"></a>一、React-router V4版本修改内容及一些坑</h2><p><strong>1、所有组件更改为从react-router-dom导入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2</span></span><br><span class="line"><span class="keyword">import</span> &#123;Router,Route,hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.xx写法</span></span><br><span class="line"><span class="comment">//v4</span></span><br><span class="line"><span class="keyword">import</span> &#123;Route,BrowserRouter <span class="keyword">as</span> Router, Switch&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果搭配redux，你还需要使用react-router-redux</span></span><br></pre></td></tr></table></figure><p><strong>2、将所有<router>替换为<browserrouter></browserrouter></router></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2</span></span><br><span class="line"> &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;PCIndex&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;Route path=<span class="string">"/details/:uniqueky"</span> component=&#123;PCNewsDetails&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;PCUserCenter&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"> &lt;<span class="regexp">/Router&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在需要更改为<code>BrowserRouter</code></p></blockquote><ul><li>这里的代码不仅仅是将<code>Router</code>替换为<code>BrowserRouter</code>,而且还把所有的<code>Route</code>中用<code>Switch</code>包裹起来.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v4</span></span><br><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">   &lt;Route exact path=<span class="string">"/"</span> component=&#123;MobileIndex&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &lt;Route path=<span class="string">"/details/:uniqueky"</span> component=&#123;MobileNewsDetails&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;MobileUserCenter&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>BrowserRouter&gt;</span><br></pre></td></tr></table></figure><p><strong>3、<browserrouter>只能有一个子节点</browserrouter></strong></p><blockquote><p><code>&lt;BroserRouter&gt;</code>只能有一个子节点,所以官网建议的是使用<code>&lt;Switch&gt;</code>进行包裹</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3</span></span><br><span class="line">&lt;Route path=<span class="string">'/'</span> component=&#123;App&#125;&gt;</span><br><span class="line"> &lt;IndexRoute component=&#123;Home&#125; /&gt;</span><br><span class="line"> &lt;Route path=<span class="string">'about'</span> component=&#123;About&#125; /&gt;</span><br><span class="line"> &lt;Route path=<span class="string">'contact'</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line"> &lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/about'</span> component=&#123;About&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/contact'</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line"> &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p><strong>4、最坑的地方:在当前目录下的文件路径不再使用<code>./</code>, 而是直接用<code>/.</code></strong></p><blockquote><p>在进行文件引用的时候 ,<code>./src/js</code>的写法需要更改文’<code>/src/js</code>‘, 这是更改之后最坑的地方</p></blockquote><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><blockquote><p><code>react-router-dom</code>暴露出<code>react-router</code>中暴露的对象与方法，因此你只需要安装并引用<code>react-router-dom</code>即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><h2 id="三、路由器-Router"><a href="#三、路由器-Router" class="headerlink" title="三、路由器(Router)"></a>三、路由器(Router)</h2><blockquote><p>在你开始项目前，你需要决定你使用的路由器的类型。对于网页项目，存在<code>&lt;BrowserRouter&gt;</code>与<code>&lt;HashRouter&gt;</code>两种组件。当存在服务器来管理动态请求时，需要使用<code>&lt;BrowserRouter&gt;</code>组件，而<code>&lt;HashRouter&gt;</code>被用于静态网站。通常，我们更倾向选择<code>&lt;BrowserRouter&gt;</code>，但如果你的网站仅用来呈现静态文件，那么<code>&lt;HashRouter&gt;</code>将会是一个好选择</p></blockquote><h2 id="四、历史-History"><a href="#四、历史-History" class="headerlink" title="四、历史(History)"></a>四、历史(History)</h2><blockquote><p>每个路由器都会创建一个<code>history</code>对象并用其保持追踪当前location[注1]并且在有变化时对网站进行重新渲染。这个<code>history</code>对象保证了<code>React Router</code>提供的其他组件的可用性，所以其他组件必须在<code>router</code>内部渲染。一个<code>React Router</code>组件如果向父级上追溯却找不到<code>router</code>组件，那么这个组件将无法正常工作</p></blockquote><h2 id="五、渲染"><a href="#五、渲染" class="headerlink" title="五、渲染"></a>五、渲染<router></router></h2><blockquote><p>路由器组件无法接受两个及以上的子元素。基于这种限制的存在，创建一个<code>&lt;App&gt;</code>组件来渲染应用其余部分是一个有效的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line">ReactDOM.render((</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">), document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h2 id="六、-lt-App-gt"><a href="#六、-lt-App-gt" class="headerlink" title="六、&lt;App&gt;"></a>六、<code>&lt;App&gt;</code></h2><blockquote><p>应用通过<code>&lt;App&gt;</code>组件定义。简化一下，我们将应用拆分成两个部分。<code>&lt;Header&gt;</code>组件包含网站的导航链接。<code>&lt;Main&gt;</code>组件则呈现其余内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;Main /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="七、路由-Route"><a href="#七、路由-Route" class="headerlink" title="七、路由(Route)"></a>七、路由(Route)</h2><blockquote><p><code>&lt;Route&gt;</code>组件是<code>React Router</code>中主要的结构单元。在任意位置只要匹配了<code>URL</code>的路径名(<code>pathname</code>)你就可以创建<code>&lt;Route&gt;</code>元素进行渲染</p></blockquote><p><strong>1、路径(Path)</strong></p><blockquote><p><code>&lt;Route&gt;</code>接受一个数为<code>string</code>类型的<code>path</code>，该值路由匹配的路径名的类型。例如：<code>&lt;Route path=&#39;/roster&#39;/&gt;</code>会匹配以<code>/roster</code>开头的路径名。在当前<code>path</code>参数与当前<code>location</code>的路径相匹配时，路由就会开始渲染<code>React</code>元素。若不匹配，路由不会进行任何操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/roster'</span>/&gt;</span><br><span class="line"><span class="comment">// 当路径名为'/'时, path不匹配</span></span><br><span class="line"><span class="comment">// 当路径名为'/roster'或'/roster/2'时, path匹配</span></span><br><span class="line"><span class="comment">// 当你只想匹配'/roster'时，你需要使用"exact"参数</span></span><br><span class="line"><span class="comment">// 则路由仅匹配'/roster'而不会匹配'/roster/2'</span></span><br><span class="line">&lt;Route exact path=<span class="string">'/roster'</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：在匹配路由时，<code>React Router</code>只关注<code>location</code>的路径名。当<code>URL</code>如下时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.example.com/my-projects/one?extra=false</span></span><br></pre></td></tr></table></figure><ul><li><code>React Router</code>去匹配的只是<code>&#39;/my-projects/one&#39;</code>这一部分</li></ul><p><strong>2、匹配路径</strong></p><blockquote><p><code>path-to-regexp</code>包用来决定<code>route</code>元素的<code>path</code>参数与当前<code>location</code>是否匹配。它将路径字符串编译成正则表达式，并与当前<code>location</code>的路径名进行匹配比较</p></blockquote><ul><li>当路由地址匹配成功后，会创建一个含有以下属性的<code>match</code>对象：<ul><li><code>url</code> ：与当前<code>location</code>路径名所匹配部分</li><li><code>path</code>：路由的地址</li><li><code>isExact</code> ：<code>path</code> 是否等于 <code>pathname</code></li><li><code>params</code>：从<code>path-to-regexp</code>获取的路径中取出的值都被包含在这个对象中</li></ul></li></ul><p>使用<a href="https://pshrmn.github.io/route-tester/#/" target="_blank" rel="noopener">route tester</a>这款工具来对路由与URL进行检验</p><p><strong>3、创建你的路由</strong></p><blockquote><p>可以在路由器(router)组件中的任意位置创建多个<code>&lt;Route&gt;</code>，但通常我们会把它们放在同一个位置。使用<code>&lt;Switch&gt;</code>组件来包裹一组<code>&lt;Route&gt;</code>。<code>&lt;Switch&gt;</code>会遍历自身的子元素（即路由）并对第一个匹配当前路径的元素进行渲染</p></blockquote><ul><li>我们希望匹配一下路径<ul><li><code>/</code>：主页</li><li><code>/roster</code>： 团体列表</li><li><code>/roster/:number</code>：运动员页面，使用运动员的编号作为标识</li><li><code>/schedule</code>：团队的赛程表</li></ul></li></ul><p>为了在应用中能匹配路径，在创建<code>&lt;Route&gt;</code>元素时必须带有需要匹配的<code>path</code>作为参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  &#123;<span class="comment">/* both /roster and /roster/:number begin with /roster */</span>&#125;</span><br><span class="line">  &lt;Route path=<span class="string">'/roster'</span> component=&#123;Roster&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/schedule'</span> component=&#123;Schedule&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、<code>&lt;Route&gt;</code>是如何渲染的？</strong></p><blockquote><p>当一个路由的<code>path</code>匹配成功后，路由用来确定渲染结果的参数有三种。只需要提供其中一个即可</p></blockquote><ul><li><code>component</code> ： 一个<code>React</code>组件。当带有<code>component</code>参数的<code>route</code>匹配成功后，<code>route</code>会返回一个新的元素，其为<code>component</code>参数所对应的<code>React</code>组件（使用<code>React.createElement</code>创建）。</li><li><code>render</code> ： 一个返回<code>React element</code>的函数。当匹配成功后调用该函数。该过程与传入<code>component</code>参数类似，并且对于行级渲染与需要向元素传入额外参数的操作会更有用。</li><li><code>children</code> ： 一个返回<code>React element</code>的函数。与上述两个参数不同，无论<code>route</code>是否匹配当前<code>location</code>，其都会被渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/page'</span> component=&#123;Page&#125; /&gt;</span><br><span class="line"><span class="keyword">const</span> extraProps = &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;</span><br><span class="line">&lt;Route path=<span class="string">'/page'</span> render=&#123;(props) =&gt; (</span><br><span class="line">  &lt;Page &#123;...props&#125; data=&#123;extraProps&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br><span class="line">&lt;Route path=<span class="string">'/page'</span> children=&#123;(props) =&gt; (</span><br><span class="line">  props.match</span><br><span class="line">    ? <span class="xml"><span class="tag">&lt;<span class="name">Page</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line">    : &lt;EmptyPage &#123;...props&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通常<code>component</code>参数与<code>render</code>参数被更经常地使用。<code>children</code>参数偶尔会被使用，它更常用在<code>path</code>无法匹配时呈现的’空’状态。在本例中并不会有额外的状态，所以我们将使用<code>&lt;Route&gt;</code>的<code>component</code>参数</p></blockquote><ul><li>通过<code>&lt;Route&gt;</code>渲染的元素会被传入一些参数。分别是<code>match</code>对象，当前<code>location</code>对象以及<code>history</code>对象（由<code>router</code>创建）</li></ul><p><strong>5、<code>&lt;Main&gt;</code></strong></p><blockquote><p>现在我们清楚了根路由的结构，我们需要实际渲染我们的路由。对于这个应用，我们将会在<code>&lt;Main&gt;</code>组件中渲染<code>&lt;Switch&gt;</code>与<code>&lt;Route&gt;</code>，这一过程会将<code>route</code>匹配生成的<code>HTML</code>放在<code>&lt;main&gt;</code>节点中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Main = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/roster'</span> component=&#123;Roster&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/schedule'</span> component=&#123;Schedule&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/m</span>ain&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：主页路由包含额外参数。该参数用来保证路由能准确匹配<code>path</code></li></ul><p><strong>6、嵌套路由</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, Link, browserHistory &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;Our React Router <span class="number">3</span> App&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/user<span class="string">"&gt;User&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;main&gt;</span></span><br><span class="line"><span class="string">      &#123;props.children&#125;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const HomePage = () =&gt; &lt;h1&gt;Home Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string">const UsersPage = () =&gt; &lt;h1&gt;User Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const App = () =&gt;</span></span><br><span class="line"><span class="string">  &lt;Router history=&#123;browserHistory&#125;&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;PrimaryLayout&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;IndexRoute component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/user<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, document.getElementById("</span>root<span class="string">"));</span></span><br></pre></td></tr></table></figure><ul><li><strong>上面代码中有几个关键的点在 V4 中就不复存在了</strong><ul><li>集中式 <code>router</code></li><li>通过 <code>&lt;Route&gt;</code> 嵌套，实现<code>Layout</code> 和 <code>page</code> 嵌套</li><li><code>Layout</code> 和 <code>page</code>组件 是作为 <code>router</code> 的一部分</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;Our React Router <span class="number">4</span> App&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/User<span class="string">"&gt;User&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;main&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/<span class="string">" exact component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/user<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const HomePage = () =&gt; &lt;h1&gt;Home Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string">const UsersPage = () =&gt; &lt;h1&gt;User Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const App = () =&gt;</span></span><br><span class="line"><span class="string">  &lt;BrowserRouter&gt;</span></span><br><span class="line"><span class="string">    &lt;PrimaryLayout /&gt;</span></span><br><span class="line"><span class="string">  &lt;/BrowserRouter&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, document.getElementById("</span>root<span class="string">"));</span></span><br></pre></td></tr></table></figure><blockquote><p>首先，<code>V3</code> 中的 <code>router</code> 不在了，在 <code>V3</code> 中，我们是将整个庞大的<code>router</code> 直接丢给 <code>DOM</code>，而在 <code>V4</code> 中，除了 <code>BrowserRouter</code>， 我们丢给 <code>DOM</code> 的是我们的应用程序本身</p></blockquote><ul><li><code>V4</code>中，我们不再使用 <code>{props.children}</code> 来嵌套组件了，替代的 <code>&lt;Route&gt;</code>，当 <code>route</code>匹配时，子组件会被渲染到 <code>&lt;Route&gt;</code>书写的地方</li></ul><ul><li>基本使用</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cec7efc659034ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>react-router 4.0</code> 对于接受参数采用 <code>{ this.props.match.params.id }</code> 如下例子：<code>&lt;Route path=&quot;list/:id&quot;&gt;&lt;/Router&gt;</code>、 <code>&lt;Link to=&quot;list/123456&quot;&gt;&lt;/Link&gt;</code></p></blockquote><ul><li>一个完整的嵌套路由的例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123; Router, Route, Link, Switch &#125; from ‘react-router‘;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  HashRouter,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Switch</span><br><span class="line">&#125; <span class="keyword">from</span> ‘react-router-dom‘;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const About = () =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;About&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Home = () =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Home&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Message = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;new messages&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;match.params.id&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Inbox = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path=&#123;`$&#123;match.url&#125;/messages/:id`&#125; component=&#123;Message&#125;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ReactDOM.render(</span></span><br><span class="line"><span class="string">  (&lt;HashRouter&gt;</span></span><br><span class="line"><span class="string">    &lt;App&gt;</span></span><br><span class="line"><span class="string">        &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/inbox<span class="string">" component=&#123;Inbox&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/App&gt;</span></span><br><span class="line"><span class="string">  &lt;/HashRouter&gt;),</span></span><br><span class="line"><span class="string">  document.getElementById(‘root‘)</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><ul><li>嵌套布局</li></ul><blockquote><p>方式一</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user"</span> exact component=&#123;BrowseUsersPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user/:userId"</span> component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> exact component=&#123;BrowseProductsPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products/:productId"</span> component=&#123;ProductProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><code>userId</code> 通过 <code>props.match.params</code> 获取</li><li><code>props.match</code> 赋予给了 <code>&lt;Route&gt;</code> 中的任何组件。</li><li>除此之外，如果组件不通过<code>&lt;Route&gt;</code> 来渲染，要访问 <code>props.match</code>，可以使用 <code>withRouter()</code>高阶组件来实现</li></ul><blockquote><p>方式二</p></blockquote><ul><li>解决了第一种方式中的生命周期，重复渲染的问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user"</span> component=&#123;UserSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> component=&#123;ProductSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>我们用 <code>2</code>个 <code>routes</code> 替换之前的 <code>4</code>个<code>routes</code></li><li>注意，这里我们没有再使用 <code>exact</code>，因为，我们希望 <code>/user</code> 可以匹配任何以 <code>/user</code> 开始的 <code>route</code>，<code>products</code> 同理</li></ul><blockquote><p>使用这种策略，子布局也开始承担起了渲染 <code>routes</code> 的责任，现在，<code>UserSubLayout</code> 长这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/u</span>ser<span class="string">" exact component=&#123;BrowseUsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/user/:userId<span class="string">" component=&#123;UserProfilePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br></pre></td></tr></table></figure><ul><li>但有一点值得注意的是，<code>routes</code> 需要识别它的完整路径才能匹配，为了减少我们的重复输入，我们可以使用 <code>props.match.path</code>来代替</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path=&#123;props.match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&#123;<span class="string">`<span class="subst">$&#123;props.match.path&#125;</span>/:userId`</span>&#125;</span><br><span class="line">          component=&#123;UserProfilePage&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><p><strong>7、路径参数</strong></p><p>有时路径名中存在我们需要获取的参数。例如，在运动员界面，我们需要获取运动员的编号。我们可以向<code>route</code>的路径字符串中添加<code>path</code>参数</p><ul><li>如<code>&#39;/roster/:number&#39;</code>中<code>:number</code>这种写法意味着<code>/roster/</code>后的路径名将会被获取并存在<code>match.params.number</code>中。例如，路径名<code>&#39;/roster/6&#39;</code>会获取到一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">number</span>: <span class="string">'6'</span> &#125; <span class="comment">// 注获取的值是字符串类型的</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Player&gt;</code>组件可以使用<code>props.match.params</code>对象来确定需要被渲染的运动员的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回运动员对象的API</span></span><br><span class="line"><span class="keyword">import</span> PlayerAPI <span class="keyword">from</span> <span class="string">'./PlayerAPI'</span></span><br><span class="line"><span class="keyword">const</span> Player = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> player = PlayerAPI.get(</span><br><span class="line">    <span class="built_in">parseInt</span>(props.match.params.number, <span class="number">10</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (!player) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Sorry, but the player was not found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;player.name&#125; (#&#123;player.number&#125;)&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;player.position&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>除了<code>&lt;Player&gt;</code>组件，我们的页面还包含<code>&lt;FullRoster&gt;</code>, <code>&lt;Schedule&gt;</code>以及 <code>&lt;Home&gt;</code>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FullRoster = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        PlayerAPI.all().map(<span class="function"><span class="params">p</span> =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;p.number&#125;&gt;</span><br><span class="line">            &lt;Link to=&#123;<span class="string">`/roster/<span class="subst">$&#123;p.number&#125;</span>`</span>&#125;&gt;&#123;p.name&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> Schedule = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;<span class="number">6</span>/<span class="number">5</span> @ Evergreens&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;6/</span><span class="number">8</span> vs Kickers&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;6/</span><span class="number">14</span> @ United&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">const Home = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1&gt;Welcome to the Tornadoes Website!&lt;/</span>h1&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="八、inclusive-routing"><a href="#八、inclusive-routing" class="headerlink" title="八、inclusive routing"></a>八、inclusive routing</h2><blockquote><p>当访问 <code>/user</code> 时，两个组价都会被渲染</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const PrimaryLayout = () =&gt;</span><br><span class="line">  &lt;div className=&quot;primary-layout&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Our React Router 4 App</span><br><span class="line">      &lt;Route path=&quot;/user&quot; component=&#123;UsersMenu&#125; /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;/user&quot; component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;;</span><br></pre></td></tr></table></figure><h2 id="九、Exclusive-Routing"><a href="#九、Exclusive-Routing" class="headerlink" title="九、Exclusive Routing"></a>九、Exclusive Routing</h2><blockquote><p>如果你只想匹配一个 <code>route</code>，那么你也可以使用 <code>&lt;Switch&gt;</code> 来 <code>exclusive routing</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;PrimaryHeader /&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user/add"</span> component=&#123;UserAddPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user"</span> component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">        &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>&lt;Switch&gt;</code> 中只有一个 <code>&lt;Route&gt;</code> 会被渲染，另外，我们还是要给 <code>HomePage</code>所在 <code>&lt;Route&gt;</code>添加 <code>exact</code>，否则，在访问 <code>/user</code> 或 <code>/user/add</code>的时候还是会匹配到 <code>/</code>，从而，只渲染 H<code>omePage</code></li><li>我们将 <code>/user/add</code>放在 <code>/user</code> 前面是保证正确匹配的很有策略性的一步，因为，<code>/user/add</code>会同时匹配 <code>/user</code>和 <code>/user/add</code></li><li>如果我们给每一个 <code>&lt;Route&gt;</code>都添加一个 <code>exact</code>，那就不用考虑上面的 策略 了，但不管怎样，现在至少知道了我们还有其它选择</li><li><code>&lt;Redirect&gt;</code>组件不用多说，执行浏览器重定向，但它在 <code>&lt;Switch&gt;</code> 中时，<code>&lt;Redirect&gt;</code>组件只会在 <code>routes</code> 匹配不成功的情况下渲染</li></ul><h2 id="十、Index-Routes”-和-“Not-Found”"><a href="#十、Index-Routes”-和-“Not-Found”" class="headerlink" title="十、Index Routes” 和 “Not Found”"></a>十、Index Routes” 和 “Not Found”</h2><blockquote><p><code>V4</code> 中也没有 <code>&lt;IndexRoute&gt;</code>，但 <code>&lt;Route exact&gt;</code>可以实现相同的功能，或者 <code>&lt;Switch&gt;</code>和 <code>&lt;Redirect&gt;</code> 重定向到默认的有效路径，甚至一个找不到的页面</p></blockquote><h2 id="十一、Link"><a href="#十一、Link" class="headerlink" title="十一、Link"></a>十一、Link</h2><blockquote><p>现在，我们应用需要在各个页面间切换。如果使用锚点元素（就是）实现，在每次点击时页面将被重新加载。<code>React Router</code>提供了<code>&lt;Link&gt;</code>组件用来避免这种状况的发生。当你点击<code>&lt;Link&gt;</code>时，<code>URL</code>会更新，组件会被重新渲染，但是页面不会重新加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/roster'</span>&gt;</span>Roster<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/schedule'</span>&gt;</span>Schedule<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>nav&gt;</span><br><span class="line">  &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Link&gt;</code>使用<code>&#39;to&#39;</code>参数来描述需要定位的页面。它的值即可是字符串也可是<code>location</code>对象（包含<code>pathname</code>，<code>search</code>，<code>hash</code>与<code>state</code>属性）。如果其值为字符床将会被转换为<code>location</code>对象。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> '/<span class="attr">roster</span>/<span class="attr">7</span>' &#125;&#125;&gt;</span>Player #7<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十二、Match"><a href="#十二、Match" class="headerlink" title="十二、Match"></a>十二、Match</h2><blockquote><p>正如我们上面看到的那样，<code>props.match</code> 可以帮我们获取 <code>userId</code> 和 <code>routes</code></p></blockquote><ul><li><code>match</code> 对象为我们提供了 <code>match.params</code>，<code>match.path</code>，和 <code>match.url</code> 等属性</li></ul><p><strong>1、match.path vs match.url</strong></p><blockquote><p>最开始，可能觉得这两者的区别并不明显，控制台经常出现相同的输出，比如，访问 /user</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match.url)   <span class="comment">// output: "/user"</span></span><br><span class="line">  <span class="built_in">console</span>.log(match.path)  <span class="comment">// output: "/user"</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">      &lt;aside&gt;</span><br><span class="line">        &lt;UserNav /&gt;</span><br><span class="line">      &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path=&#123;match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">          &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>match</code> 在组件的参数中被解构，意思就是我们可以使用 <code>match.path</code> 代替 <code>props.match.path</code></li><li>虽然我们看不到什么明显的差异，但需要明白的是 <code>match.url</code> 是浏览器 <code>URL</code> 的一部分，<code>match.path</code> 是我们为 <code>router</code> 书写的路径</li></ul><p><strong>2、如何选择</strong></p><ul><li>如果我们是构建 route 路径，那么肯定使用 match.path</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserComments = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    UserId: &#123;match.params.userId&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const UserSettings = (&#123; match &#125;) =&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    UserId: &#123;match.params.userId&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserProfilePage = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    User Profile:</span><br><span class="line">    &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.url&#125;</span>/comments`</span>&#125; component=&#123;UserComments&#125; /&gt;</span><br><span class="line">    &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/settings`</span>&#125; component=&#123;UserSettings&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后，我们按下面方式来访问</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/<span class="number">5</span>/comments</span><br><span class="line">/user/<span class="number">5</span>/settings</span><br></pre></td></tr></table></figure><ul><li>实践后，我们发现，访问 comments 返回 undefined，访问 settings 返回 5</li></ul><p><strong>3、避免 Match 冲突</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayou = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route exact path=&#123;match.path&#125; component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/add`</span>&#125; component=&#123;AddUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId/edit`</span>&#125; component=&#123;EditUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们使用 <code>${match.path}/:userId(\\d+)</code>作为 <code>UserProfilePage</code> 对应的 <code>path</code>，保证 <code>:userId</code> 是一个数字，可以避免与 <code>/users/add</code>的冲突，这样，将其所在的 <code>&lt;Route&gt;</code> 丢到最前面去也能正常访问 <code>add</code> 页面  </p></blockquote><h2 id="十三、Authorized-Route"><a href="#十三、Authorized-Route" class="headerlink" title="十三、Authorized Route"></a>十三、Authorized Route</h2><blockquote><p>在应用程序中限制未登录的用户访问某些路由是非常常见的，还有对于授权和未授权的用户 UI 也可能大不一样，为了解决这样的需求，我们可以考虑为应用程序设置一个主入口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/auth"</span> component=&#123;UnauthorizedLayout&#125; /&gt;</span><br><span class="line">            &lt;AuthorizedRoute path=<span class="string">"/app"</span> component=&#123;PrimaryLayout&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在，我们首先会去选择应用程序在哪个顶级布局中，比如，<code>/auth/login</code> 和 <code>/auth/forgot-password</code> 肯定在 <code>UnauthorizedLayout</code> 中，另外，当用户登陆时，我们将判断所有的路径都有一个 /app 前缀以确保是否登录。如果用户访问 <code>/app</code> 开头的页面但并没有登录，我们将会重定向到登录页面</p></blockquote><h2 id="十四、-lt-Link-gt"><a href="#十四、-lt-Link-gt" class="headerlink" title="十四、&lt;Link&gt;"></a>十四、<code>&lt;Link&gt;</code></h2><blockquote><p>和之前版本没太大区别，重点看下组件属性</p></blockquote><ul><li><code>to（string/object）</code>：要跳转的路径或地址；</li><li><code>replace（bool）</code>：为 <code>true</code> 时，点击链接后将使用新地址替换掉访问历史记录里面的原地址；为 <code>false</code> 时，点击链接后将在原有访问历史记录的基础上添加一个新的纪录。默认为<code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Link组件示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to为string</span></span><br><span class="line">&lt;Link to=<span class="string">"/about"</span>&gt;关于&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ to为obj</span></span><br><span class="line"><span class="regexp">&lt;Link to=&#123;&#123;</span></span><br><span class="line"><span class="regexp">  pathname: '/</span>courses<span class="string">',</span></span><br><span class="line"><span class="string">  search: '</span>?sort=name<span class="string">',</span></span><br><span class="line">  hash: '#the-hash',</span><br><span class="line">  state: &#123; <span class="attr">fromDashboard</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace </span></span><br><span class="line">&lt;Link to=<span class="string">"/courses"</span> replace /&gt;</span><br></pre></td></tr></table></figure><p><strong><code>&lt;NavLink&gt;</code></strong></p><blockquote><p><code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code> 的一个特定版本, 会在匹配上当前 <code>URL</code> 的时候会给已经渲染的元素添加样式参数，组件属性</p></blockquote><ul><li><code>activeClassName（string）</code>：设置选中样式，默认值为<code>active</code>；</li><li><code>activeStyle（object）</code>：当元素被选中时, 为此元素添加样式；</li><li><code>exact（bool）</code>：为 <code>true</code> 时, 只有当地址完全匹配 <code>class</code> 和 <code>style</code> 才会应用；</li><li><code>strict（bool）</code>：为 <code>true</code> 时，在确定位置是否与当前 <code>URL</code> 匹配时，将考虑位置 - <code>pathname</code> 后的斜线；</li><li><code>isActive（func）</code>：判断链接是否激活的额外逻辑的功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// activeClassName选中时样式为selected</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/faq"</span></span><br><span class="line">  activeClassName=<span class="string">"selected"</span></span><br><span class="line">&gt;FAQs&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 选中时样式为activeStyle的样式设置</span></span><br><span class="line"><span class="regexp">&lt;NavLink</span></span><br><span class="line"><span class="regexp">  to="/</span>faq<span class="string">"</span></span><br><span class="line"><span class="string">  activeStyle=&#123;&#123;</span></span><br><span class="line"><span class="string">    fontWeight: 'bold',</span></span><br><span class="line"><span class="string">    color: 'red'</span></span><br><span class="line"><span class="string">   &#125;&#125;</span></span><br><span class="line"><span class="string">&gt;FAQs&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 当event id为奇数的时候，激活链接</span></span><br><span class="line"><span class="string">const oddEvent = (match, location) =&gt; &#123;</span></span><br><span class="line"><span class="string">  if (!match) &#123;</span></span><br><span class="line"><span class="string">    return false</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  const eventID = parseInt(match.params.eventID)</span></span><br><span class="line"><span class="string">  return !isNaN(eventID) &amp;&amp; eventID % 2 === 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;NavLink</span></span><br><span class="line"><span class="string">  to="</span>/events/<span class="number">123</span><span class="string">"</span></span><br><span class="line"><span class="string">  isActive=&#123;oddEvent&#125;</span></span><br><span class="line"><span class="string">&gt;Event 123&lt;/NavLink&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十五、-lt-Switch-gt"><a href="#十五、-lt-Switch-gt" class="headerlink" title="十五、&lt;Switch&gt;"></a>十五、<code>&lt;Switch&gt;</code></h2><blockquote><p>该组件用来渲染匹配地址的第一个<code>&lt;Route&gt;</code>或者<code>&lt;Redirect&gt;</code>。那么它与使用一堆<code>route</code>又有什么区别呢</p></blockquote><ul><li><code>&lt;Switch&gt;</code>的独特之处是独它仅仅渲染一个路由。相反地，每一个包含匹配地址(<code>location</code>)的<code>&lt;Route&gt;</code>都会被渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/:user"</span> component=&#123;User&#125;/&gt;</span><br><span class="line">  &lt;Route component=&#123;NoMatch&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在，如果我们处于<code>/about</code>，<code>&lt;Switch&gt;</code>将开始寻找匹配的<code>&lt;Route&gt;</code>。<code>&lt;Route path=&quot;/about&quot;/&gt;</code> 将被匹配， <code>&lt;Switch&gt;</code>将停止寻找匹配并渲染<code>&lt;About&gt;</code>。同样，如果我们处于<code>/michael</code>，<code>&lt;User&gt;</code>将被渲染</p></blockquote><h2 id="十六、更多参考"><a href="#十六、更多参考" class="headerlink" title="十六、更多参考"></a>十六、更多参考</h2><ul><li><a href="https://reacttraining.com/react-router/web/guides/philosophy" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/guides/philosophy</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、React-router-V4版本修改内容及一些坑&quot;&gt;&lt;a href=&quot;#一、React-router-V4版本修改内容及一些坑&quot; class=&quot;headerlink&quot; title=&quot;一、React-router V4版本修改内容及一些坑&quot;&gt;&lt;/a&gt;一、Rea
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Router" scheme="http://blog.poetries.top/tags/Router/"/>
    
  </entry>
  
</feed>
